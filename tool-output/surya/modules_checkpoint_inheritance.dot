digraph G {
  graph [ ratio = "auto", page = "40" ];
  "DividendCheckpoint";
  "DividendCheckpointStorage";
  "ICheckpoint";
  "Module";
  "ERC20DividendCheckpoint";
  "ERC20DividendCheckpointStorage";
  "ERC20DividendCheckpointFactory";
  "UpgradableModuleFactory";
  "ERC20DividendCheckpointProxy";
  "ModuleStorage";
  "Pausable";
  "OwnedUpgradeabilityProxy";
  "EtherDividendCheckpoint";
  "EtherDividendCheckpointFactory";
  "EtherDividendCheckpointProxy";
  "PLCRVotingCheckpoint";
  "PLCRVotingCheckpointStorage";
  "VotingCheckpoint";
  "PLCRVotingCheckpointFactory";
  "PLCRVotingCheckpointProxy";
  "VotingCheckpointStorage";
  "WeightedVoteCheckpoint";
  "WeightedVoteCheckpointStorage";
  "WeightedVoteCheckpointFactory";
  "WeightedVoteCheckpointProxy";
  "IVoting";
  "DividendCheckpoint" -> "DividendCheckpointStorage";
  "DividendCheckpoint" -> "ICheckpoint";
  "DividendCheckpoint" -> "Module";
  "ERC20DividendCheckpoint" -> "ERC20DividendCheckpointStorage";
  "ERC20DividendCheckpoint" -> "DividendCheckpoint";
  "ERC20DividendCheckpointFactory" -> "UpgradableModuleFactory";
  "ERC20DividendCheckpointProxy" -> "ERC20DividendCheckpointStorage";
  "ERC20DividendCheckpointProxy" -> "DividendCheckpointStorage";
  "ERC20DividendCheckpointProxy" -> "ModuleStorage";
  "ERC20DividendCheckpointProxy" -> "Pausable";
  "ERC20DividendCheckpointProxy" -> "OwnedUpgradeabilityProxy";
  "EtherDividendCheckpoint" -> "DividendCheckpoint";
  "EtherDividendCheckpointFactory" -> "UpgradableModuleFactory";
  "EtherDividendCheckpointProxy" -> "DividendCheckpointStorage";
  "EtherDividendCheckpointProxy" -> "ModuleStorage";
  "EtherDividendCheckpointProxy" -> "Pausable";
  "EtherDividendCheckpointProxy" -> "OwnedUpgradeabilityProxy";
  "PLCRVotingCheckpoint" -> "PLCRVotingCheckpointStorage";
  "PLCRVotingCheckpoint" -> "VotingCheckpoint";
  "PLCRVotingCheckpointFactory" -> "UpgradableModuleFactory";
  "PLCRVotingCheckpointProxy" -> "PLCRVotingCheckpointStorage";
  "PLCRVotingCheckpointProxy" -> "VotingCheckpointStorage";
  "PLCRVotingCheckpointProxy" -> "ModuleStorage";
  "PLCRVotingCheckpointProxy" -> "Pausable";
  "PLCRVotingCheckpointProxy" -> "OwnedUpgradeabilityProxy";
  "WeightedVoteCheckpoint" -> "WeightedVoteCheckpointStorage";
  "WeightedVoteCheckpoint" -> "VotingCheckpoint";
  "WeightedVoteCheckpointFactory" -> "UpgradableModuleFactory";
  "WeightedVoteCheckpointProxy" -> "WeightedVoteCheckpointStorage";
  "WeightedVoteCheckpointProxy" -> "VotingCheckpointStorage";
  "WeightedVoteCheckpointProxy" -> "ModuleStorage";
  "WeightedVoteCheckpointProxy" -> "Pausable";
  "WeightedVoteCheckpointProxy" -> "OwnedUpgradeabilityProxy";
  "VotingCheckpoint" -> "VotingCheckpointStorage";
  "VotingCheckpoint" -> "ICheckpoint";
  "VotingCheckpoint" -> "IVoting";
  "VotingCheckpoint" -> "Module";
}

