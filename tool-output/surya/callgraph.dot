digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterFeatureRegistry" {
  graph [ label = "FeatureRegistry", color = "lightgray", style = "filled" ];
  "FeatureRegistry.getFeatureStatus" [ label = "getFeatureStatus", color = "blue" ];
  "FeatureRegistry.setFeatureStatus" [ label = "setFeatureStatus", color = "blue" ];
}

subgraph "clusterMigrations" {
  graph [ label = "Migrations", color = "lightgray", style = "filled" ];
  "Migrations.restricted" [ label = "restricted", color = "yellow" ];
  "Migrations.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "Migrations.setCompleted" [ label = "setCompleted" ];
  "Migrations.upgrade" [ label = "upgrade", color = "green" ];
}

subgraph "clusterModuleRegistry" {
  graph [ label = "ModuleRegistry", color = "lightgray", style = "filled" ];
  "ModuleRegistry.onlyOwner" [ label = "onlyOwner", color = "yellow" ];
  "ModuleRegistry.whenNotPausedOrOwner" [ label = "whenNotPausedOrOwner", color = "yellow" ];
  "ModuleRegistry.whenNotPaused" [ label = "whenNotPaused", color = "yellow" ];
  "ModuleRegistry.whenPaused" [ label = "whenPaused", color = "yellow" ];
  "ModuleRegistry.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "ModuleRegistry.initialize" [ label = "initialize", color = "blue" ];
  "ModuleRegistry.useModule" [ label = "useModule", color = "blue" ];
  "ModuleRegistry.isCompatibleModule" [ label = "isCompatibleModule" ];
  "ModuleRegistry.registerModule" [ label = "registerModule", color = "blue" ];
  "ModuleRegistry.removeModule" [ label = "removeModule", color = "blue" ];
  "ModuleRegistry.verifyModule" [ label = "verifyModule", color = "blue" ];
  "ModuleRegistry.unverifyModule" [ label = "unverifyModule", color = "blue" ];
  "ModuleRegistry.getTagsByTypeAndToken" [ label = "getTagsByTypeAndToken", color = "blue" ];
  "ModuleRegistry.getTagsByType" [ label = "getTagsByType", color = "blue" ];
  "ModuleRegistry._tagsByModules" [ label = "_tagsByModules" ];
  "ModuleRegistry.getFactoryDetails" [ label = "getFactoryDetails", color = "blue" ];
  "ModuleRegistry.getModulesByType" [ label = "getModulesByType" ];
  "ModuleRegistry.getModulesByTypeAndToken" [ label = "getModulesByTypeAndToken" ];
  "ModuleRegistry.reclaimERC20" [ label = "reclaimERC20", color = "blue" ];
  "ModuleRegistry.pause" [ label = "pause", color = "blue" ];
  "ModuleRegistry.unpause" [ label = "unpause", color = "blue" ];
  "ModuleRegistry.updateFromRegistry" [ label = "updateFromRegistry", color = "blue" ];
  "ModuleRegistry.transferOwnership" [ label = "transferOwnership", color = "blue" ];
  "ModuleRegistry.owner" [ label = "owner" ];
  "ModuleRegistry.isPaused" [ label = "isPaused" ];
  "ModuleRegistry.getBoolValue" [ label = "getBoolValue" ];
  "ModuleRegistry.set" [ label = "set" ];
  "ModuleRegistry.getAddressValue" [ label = "getAddressValue" ];
  "ModuleRegistry.pushArray" [ label = "pushArray" ];
  "ModuleRegistry.getUintValue" [ label = "getUintValue" ];
  "ModuleRegistry.getArrayAddress" [ label = "getArrayAddress" ];
  "ModuleRegistry.setArrayIndexValue" [ label = "setArrayIndexValue" ];
  "ModuleRegistry.deleteArrayAddress" [ label = "deleteArrayAddress" ];
  "ModuleRegistry.setArray" [ label = "setArray" ];
}

subgraph "clusterPausable" {
  graph [ label = "Pausable", color = "lightgray", style = "filled" ];
  "Pausable.whenNotPaused" [ label = "whenNotPaused", color = "yellow" ];
  "Pausable.whenPaused" [ label = "whenPaused", color = "yellow" ];
  "Pausable._pause" [ label = "_pause" ];
  "Pausable._unpause" [ label = "_unpause" ];
}

subgraph "clusterPolymathRegistry" {
  graph [ label = "PolymathRegistry", color = "lightgray", style = "filled" ];
  "PolymathRegistry.getAddress" [ label = "getAddress" ];
  "PolymathRegistry.changeAddress" [ label = "changeAddress", color = "blue" ];
}

subgraph "clusterReclaimTokens" {
  graph [ label = "ReclaimTokens", color = "lightgray", style = "filled" ];
  "ReclaimTokens.reclaimERC20" [ label = "reclaimERC20", color = "blue" ];
  "ReclaimTokens.owner" [ label = "owner" ];
}

subgraph "clusterSTRGetter" {
  graph [ label = "STRGetter", color = "lightgray", style = "filled" ];
  "STRGetter.getTickersByOwner" [ label = "getTickersByOwner", color = "blue" ];
  "STRGetter._ownerInTicker" [ label = "_ownerInTicker" ];
  "STRGetter.getTokensByOwner" [ label = "getTokensByOwner", color = "blue" ];
  "STRGetter.getTokens" [ label = "getTokens", color = "green" ];
  "STRGetter._getTokens" [ label = "_getTokens" ];
  "STRGetter._ownerInToken" [ label = "_ownerInToken" ];
  "STRGetter.getTokensByDelegate" [ label = "getTokensByDelegate", color = "blue" ];
  "STRGetter._delegateInToken" [ label = "_delegateInToken" ];
  "STRGetter.getTickerDetails" [ label = "getTickerDetails", color = "blue" ];
  "STRGetter.getSecurityTokenAddress" [ label = "getSecurityTokenAddress", color = "blue" ];
  "STRGetter.getSecurityTokenData" [ label = "getSecurityTokenData", color = "blue" ];
  "STRGetter.getSTFactoryAddress" [ label = "getSTFactoryAddress", color = "green" ];
  "STRGetter.getSTFactoryAddressOfVersion" [ label = "getSTFactoryAddressOfVersion", color = "green" ];
  "STRGetter.getLatestProtocolVersion" [ label = "getLatestProtocolVersion", color = "green" ];
  "STRGetter.getIsFeeInPoly" [ label = "getIsFeeInPoly", color = "green" ];
  "STRGetter.getExpiryLimit" [ label = "getExpiryLimit", color = "green" ];
  "STRGetter.getTickerStatus" [ label = "getTickerStatus" ];
  "STRGetter.getTickerOwner" [ label = "getTickerOwner" ];
  "STRGetter.getArrayBytes32" [ label = "getArrayBytes32" ];
  "STRGetter.getUintValue" [ label = "getUintValue" ];
  "STRGetter.getBoolValue" [ label = "getBoolValue" ];
  "STRGetter.getArrayAddress" [ label = "getArrayAddress" ];
  "STRGetter.getAddressValue" [ label = "getAddressValue" ];
  "STRGetter.getStringValue" [ label = "getStringValue" ];
}

subgraph "clusterSecurityTokenRegistry" {
  graph [ label = "SecurityTokenRegistry", color = "lightgray", style = "filled" ];
  "SecurityTokenRegistry.onlyOwner" [ label = "onlyOwner", color = "yellow" ];
  "SecurityTokenRegistry.whenNotPausedOrOwner" [ label = "whenNotPausedOrOwner", color = "yellow" ];
  "SecurityTokenRegistry._whenNotPausedOrOwner" [ label = "_whenNotPausedOrOwner" ];
  "SecurityTokenRegistry.whenNotPaused" [ label = "whenNotPaused", color = "yellow" ];
  "SecurityTokenRegistry.whenPaused" [ label = "whenPaused", color = "yellow" ];
  "SecurityTokenRegistry.initialize" [ label = "initialize", color = "green" ];
  "SecurityTokenRegistry.updateFromRegistry" [ label = "updateFromRegistry", color = "blue" ];
  "SecurityTokenRegistry._updateFromRegistry" [ label = "_updateFromRegistry" ];
  "SecurityTokenRegistry._takeFee" [ label = "_takeFee", color = "white" ];
  "SecurityTokenRegistry.getFees" [ label = "getFees" ];
  "SecurityTokenRegistry.getSecurityTokenLaunchFee" [ label = "getSecurityTokenLaunchFee", color = "green" ];
  "SecurityTokenRegistry.getTickerRegistrationFee" [ label = "getTickerRegistrationFee", color = "green" ];
  "SecurityTokenRegistry.setGetterRegistry" [ label = "setGetterRegistry", color = "green" ];
  "SecurityTokenRegistry._implementation" [ label = "_implementation", color = "white" ];
  "SecurityTokenRegistry.registerTicker" [ label = "registerTicker", color = "green" ];
  "SecurityTokenRegistry._addTicker" [ label = "_addTicker" ];
  "SecurityTokenRegistry.modifyTicker" [ label = "modifyTicker", color = "green" ];
  "SecurityTokenRegistry._modifyTicker" [ label = "_modifyTicker" ];
  "SecurityTokenRegistry._tickerOwner" [ label = "_tickerOwner" ];
  "SecurityTokenRegistry.removeTicker" [ label = "removeTicker", color = "green" ];
  "SecurityTokenRegistry._tickerAvailable" [ label = "_tickerAvailable" ];
  "SecurityTokenRegistry._tickerStatus" [ label = "_tickerStatus" ];
  "SecurityTokenRegistry._setTickerOwnership" [ label = "_setTickerOwnership" ];
  "SecurityTokenRegistry._storeTickerDetails" [ label = "_storeTickerDetails" ];
  "SecurityTokenRegistry.transferTickerOwnership" [ label = "transferTickerOwnership", color = "green" ];
  "SecurityTokenRegistry._deleteTickerOwnership" [ label = "_deleteTickerOwnership" ];
  "SecurityTokenRegistry.changeExpiryLimit" [ label = "changeExpiryLimit", color = "green" ];
  "SecurityTokenRegistry.generateSecurityToken" [ label = "generateSecurityToken", color = "blue" ];
  "SecurityTokenRegistry.generateNewSecurityToken" [ label = "generateNewSecurityToken" ];
  "SecurityTokenRegistry.refreshSecurityToken" [ label = "refreshSecurityToken", color = "green" ];
  "SecurityTokenRegistry._deployToken" [ label = "_deployToken" ];
  "SecurityTokenRegistry.modifySecurityToken" [ label = "modifySecurityToken", color = "green" ];
  "SecurityTokenRegistry._storeSecurityTokenData" [ label = "_storeSecurityTokenData" ];
  "SecurityTokenRegistry.isSecurityToken" [ label = "isSecurityToken", color = "blue" ];
  "SecurityTokenRegistry.transferOwnership" [ label = "transferOwnership", color = "green" ];
  "SecurityTokenRegistry.pause" [ label = "pause", color = "blue" ];
  "SecurityTokenRegistry.unpause" [ label = "unpause", color = "blue" ];
  "SecurityTokenRegistry.changeTickerRegistrationFee" [ label = "changeTickerRegistrationFee", color = "green" ];
  "SecurityTokenRegistry._changeTickerRegistrationFee" [ label = "_changeTickerRegistrationFee" ];
  "SecurityTokenRegistry.changeSecurityLaunchFee" [ label = "changeSecurityLaunchFee", color = "green" ];
  "SecurityTokenRegistry._changeSecurityLaunchFee" [ label = "_changeSecurityLaunchFee" ];
  "SecurityTokenRegistry.changeFeesAmountAndCurrency" [ label = "changeFeesAmountAndCurrency", color = "green" ];
  "SecurityTokenRegistry.reclaimERC20" [ label = "reclaimERC20", color = "green" ];
  "SecurityTokenRegistry.setProtocolFactory" [ label = "setProtocolFactory", color = "green" ];
  "SecurityTokenRegistry._setProtocolFactory" [ label = "_setProtocolFactory" ];
  "SecurityTokenRegistry.removeProtocolFactory" [ label = "removeProtocolFactory", color = "green" ];
  "SecurityTokenRegistry.setLatestVersion" [ label = "setLatestVersion", color = "green" ];
  "SecurityTokenRegistry._setLatestVersion" [ label = "_setLatestVersion" ];
  "SecurityTokenRegistry.updatePolyTokenAddress" [ label = "updatePolyTokenAddress", color = "green" ];
  "SecurityTokenRegistry.isPaused" [ label = "isPaused" ];
  "SecurityTokenRegistry.owner" [ label = "owner" ];
  "SecurityTokenRegistry.getBoolValue" [ label = "getBoolValue" ];
  "SecurityTokenRegistry.set" [ label = "set" ];
  "SecurityTokenRegistry.getAddressValue" [ label = "getAddressValue" ];
  "SecurityTokenRegistry.getUintValue" [ label = "getUintValue" ];
  "SecurityTokenRegistry.getArrayBytes32" [ label = "getArrayBytes32" ];
  "SecurityTokenRegistry.pushArray" [ label = "pushArray" ];
  "SecurityTokenRegistry.deleteArrayBytes32" [ label = "deleteArrayBytes32" ];
  "SecurityTokenRegistry.getStringValue" [ label = "getStringValue" ];
}

subgraph "clusterDataStore" {
  graph [ label = "DataStore", color = "lightgray", style = "filled" ];
  "DataStore._isAuthorized" [ label = "_isAuthorized", color = "white" ];
  "DataStore.validKey" [ label = "validKey", color = "yellow" ];
  "DataStore.validArrayLength" [ label = "validArrayLength", color = "yellow" ];
  "DataStore.onlyOwner" [ label = "onlyOwner", color = "yellow" ];
  "DataStore.setSecurityToken" [ label = "setSecurityToken", color = "blue" ];
  "DataStore.setUint256" [ label = "setUint256", color = "blue" ];
  "DataStore.setBytes32" [ label = "setBytes32", color = "blue" ];
  "DataStore.setAddress" [ label = "setAddress", color = "blue" ];
  "DataStore.setBool" [ label = "setBool", color = "blue" ];
  "DataStore.setString" [ label = "setString", color = "blue" ];
  "DataStore.setBytes" [ label = "setBytes", color = "blue" ];
  "DataStore.setUint256Array" [ label = "setUint256Array", color = "blue" ];
  "DataStore.setBytes32Array" [ label = "setBytes32Array", color = "blue" ];
  "DataStore.setAddressArray" [ label = "setAddressArray", color = "blue" ];
  "DataStore.setBoolArray" [ label = "setBoolArray", color = "blue" ];
  "DataStore.insertUint256" [ label = "insertUint256", color = "blue" ];
  "DataStore.insertBytes32" [ label = "insertBytes32", color = "blue" ];
  "DataStore.insertAddress" [ label = "insertAddress", color = "blue" ];
  "DataStore.insertBool" [ label = "insertBool", color = "blue" ];
  "DataStore.deleteUint256" [ label = "deleteUint256", color = "blue" ];
  "DataStore.deleteBytes32" [ label = "deleteBytes32", color = "blue" ];
  "DataStore.deleteAddress" [ label = "deleteAddress", color = "blue" ];
  "DataStore.deleteBool" [ label = "deleteBool", color = "blue" ];
  "DataStore.setUint256Multi" [ label = "setUint256Multi", color = "green" ];
  "DataStore.setBytes32Multi" [ label = "setBytes32Multi", color = "green" ];
  "DataStore.setAddressMulti" [ label = "setAddressMulti", color = "green" ];
  "DataStore.setBoolMulti" [ label = "setBoolMulti", color = "green" ];
  "DataStore.insertUint256Multi" [ label = "insertUint256Multi", color = "green" ];
  "DataStore.insertBytes32Multi" [ label = "insertBytes32Multi", color = "green" ];
  "DataStore.insertAddressMulti" [ label = "insertAddressMulti", color = "green" ];
  "DataStore.insertBoolMulti" [ label = "insertBoolMulti", color = "green" ];
  "DataStore.getUint256" [ label = "getUint256", color = "blue" ];
  "DataStore.getBytes32" [ label = "getBytes32", color = "blue" ];
  "DataStore.getAddress" [ label = "getAddress", color = "blue" ];
  "DataStore.getString" [ label = "getString", color = "blue" ];
  "DataStore.getBytes" [ label = "getBytes", color = "blue" ];
  "DataStore.getBool" [ label = "getBool", color = "blue" ];
  "DataStore.getUint256Array" [ label = "getUint256Array", color = "blue" ];
  "DataStore.getBytes32Array" [ label = "getBytes32Array", color = "blue" ];
  "DataStore.getAddressArray" [ label = "getAddressArray", color = "blue" ];
  "DataStore.getBoolArray" [ label = "getBoolArray", color = "blue" ];
  "DataStore.getUint256ArrayLength" [ label = "getUint256ArrayLength", color = "blue" ];
  "DataStore.getBytes32ArrayLength" [ label = "getBytes32ArrayLength", color = "blue" ];
  "DataStore.getAddressArrayLength" [ label = "getAddressArrayLength", color = "blue" ];
  "DataStore.getBoolArrayLength" [ label = "getBoolArrayLength", color = "blue" ];
  "DataStore.getUint256ArrayElement" [ label = "getUint256ArrayElement", color = "blue" ];
  "DataStore.getBytes32ArrayElement" [ label = "getBytes32ArrayElement", color = "blue" ];
  "DataStore.getAddressArrayElement" [ label = "getAddressArrayElement", color = "blue" ];
  "DataStore.getBoolArrayElement" [ label = "getBoolArrayElement", color = "blue" ];
  "DataStore.getUint256ArrayElements" [ label = "getUint256ArrayElements", color = "green" ];
  "DataStore.getBytes32ArrayElements" [ label = "getBytes32ArrayElements", color = "green" ];
  "DataStore.getAddressArrayElements" [ label = "getAddressArrayElements", color = "green" ];
  "DataStore.getBoolArrayElements" [ label = "getBoolArrayElements", color = "green" ];
  "DataStore._setData" [ label = "_setData" ];
  "DataStore._deleteUint" [ label = "_deleteUint" ];
  "DataStore._deleteBytes32" [ label = "_deleteBytes32" ];
  "DataStore._deleteAddress" [ label = "_deleteAddress" ];
  "DataStore._deleteBool" [ label = "_deleteBool" ];
}

subgraph "clusterDataStoreFactory" {
  graph [ label = "DataStoreFactory", color = "lightgray", style = "filled" ];
  "DataStoreFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "DataStoreFactory.generateDataStore" [ label = "generateDataStore" ];
}

subgraph "clusterDataStoreProxy" {
  graph [ label = "DataStoreProxy", color = "lightgray", style = "filled" ];
  "DataStoreProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
}

subgraph "clusterDataStoreStorage" {
  graph [ label = "DataStoreStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterIMedianizer" {
  graph [ label = "IMedianizer", color = "lightgray", style = "filled" ];
  "IMedianizer.peek" [ label = "peek" ];
  "IMedianizer.read" [ label = "read", color = "blue" ];
  "IMedianizer.set" [ label = "set", color = "blue" ];
  "IMedianizer.setMin" [ label = "setMin", color = "blue" ];
  "IMedianizer.setNext" [ label = "setNext", color = "blue" ];
  "IMedianizer.unset" [ label = "unset", color = "blue" ];
  "IMedianizer.poke" [ label = "poke", color = "blue" ];
  "IMedianizer.compute" [ label = "compute", color = "blue" ];
  "IMedianizer.void" [ label = "void", color = "blue" ];
}

subgraph "clustersolcChecker" {
  graph [ label = "solcChecker", color = "lightgray", style = "filled" ];
  "solcChecker.f" [ label = "f", color = "blue" ];
}

subgraph "clusterOraclizeI" {
  graph [ label = "OraclizeI", color = "lightgray", style = "filled" ];
  "OraclizeI.setProofType" [ label = "setProofType" ];
  "OraclizeI.setCustomGasPrice" [ label = "setCustomGasPrice" ];
  "OraclizeI.getPrice" [ label = "getPrice" ];
  "OraclizeI.randomDS_getSessionPubKeyHash" [ label = "randomDS_getSessionPubKeyHash" ];
  "OraclizeI.queryN" [ label = "queryN", color = "green" ];
  "OraclizeI.query" [ label = "query", color = "blue" ];
  "OraclizeI.query2" [ label = "query2", color = "green" ];
  "OraclizeI.query_withGasLimit" [ label = "query_withGasLimit", color = "blue" ];
  "OraclizeI.queryN_withGasLimit" [ label = "queryN_withGasLimit", color = "blue" ];
  "OraclizeI.query2_withGasLimit" [ label = "query2_withGasLimit", color = "blue" ];
  "OraclizeI.cbAddress" [ label = "cbAddress" ];
}

subgraph "clusterOraclizeAddrResolverI" {
  graph [ label = "OraclizeAddrResolverI", color = "lightgray", style = "filled" ];
  "OraclizeAddrResolverI.getAddress" [ label = "getAddress" ];
}

subgraph "clusterBuffer" {
  graph [ label = "Buffer", color = "lightgray", style = "filled" ];
  "Buffer.init" [ label = "init" ];
  "Buffer.resize" [ label = "resize", color = "red" ];
  "Buffer.max" [ label = "max" ];
  "Buffer.append" [ label = "append" ];
  "Buffer.appendInt" [ label = "appendInt", color = "white" ];
}

subgraph "clusterCBOR" {
  graph [ label = "CBOR", color = "lightgray", style = "filled" ];
  "CBOR.encodeType" [ label = "encodeType", color = "red" ];
  "CBOR.encodeIndefiniteLengthType" [ label = "encodeIndefiniteLengthType", color = "red" ];
  "CBOR.encodeUInt" [ label = "encodeUInt", color = "white" ];
  "CBOR.encodeInt" [ label = "encodeInt", color = "white" ];
  "CBOR.encodeBytes" [ label = "encodeBytes", color = "white" ];
  "CBOR.encodeString" [ label = "encodeString", color = "white" ];
  "CBOR.startArray" [ label = "startArray", color = "white" ];
  "CBOR.startMap" [ label = "startMap", color = "white" ];
  "CBOR.endSequence" [ label = "endSequence", color = "white" ];
}

subgraph "clusterusingOraclize" {
  graph [ label = "usingOraclize", color = "lightgray", style = "filled" ];
  "usingOraclize.oraclizeAPI" [ label = "oraclizeAPI", color = "yellow" ];
  "usingOraclize.oraclize_randomDS_proofVerify" [ label = "oraclize_randomDS_proofVerify", color = "yellow" ];
  "usingOraclize.oraclize_setNetwork" [ label = "oraclize_setNetwork" ];
  "usingOraclize.oraclize_setNetworkName" [ label = "oraclize_setNetworkName" ];
  "usingOraclize.oraclize_getNetworkName" [ label = "oraclize_getNetworkName" ];
  "usingOraclize.__callback" [ label = "__callback" ];
  "usingOraclize.oraclize_getPrice" [ label = "oraclize_getPrice", color = "white" ];
  "usingOraclize.oraclize_query" [ label = "oraclize_query", color = "white" ];
  "usingOraclize.oraclize_setProof" [ label = "oraclize_setProof", color = "white" ];
  "usingOraclize.oraclize_cbAddress" [ label = "oraclize_cbAddress", color = "white" ];
  "usingOraclize.getCodeSize" [ label = "getCodeSize" ];
  "usingOraclize.oraclize_setCustomGasPrice" [ label = "oraclize_setCustomGasPrice", color = "white" ];
  "usingOraclize.oraclize_randomDS_getSessionPubKeyHash" [ label = "oraclize_randomDS_getSessionPubKeyHash", color = "white" ];
  "usingOraclize.parseAddr" [ label = "parseAddr", color = "white" ];
  "usingOraclize.strCompare" [ label = "strCompare", color = "white" ];
  "usingOraclize.indexOf" [ label = "indexOf", color = "white" ];
  "usingOraclize.strConcat" [ label = "strConcat" ];
  "usingOraclize.safeParseInt" [ label = "safeParseInt" ];
  "usingOraclize.parseInt" [ label = "parseInt" ];
  "usingOraclize.uint2str" [ label = "uint2str", color = "white" ];
  "usingOraclize.stra2cbor" [ label = "stra2cbor" ];
  "usingOraclize.ba2cbor" [ label = "ba2cbor" ];
  "usingOraclize.oraclize_newRandomDSQuery" [ label = "oraclize_newRandomDSQuery", color = "white" ];
  "usingOraclize.oraclize_randomDS_setCommitment" [ label = "oraclize_randomDS_setCommitment" ];
  "usingOraclize.verifySig" [ label = "verifySig", color = "white" ];
  "usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity" [ label = "oraclize_randomDS_proofVerify__sessionKeyValidity", color = "white" ];
  "usingOraclize.oraclize_randomDS_proofVerify__returnCode" [ label = "oraclize_randomDS_proofVerify__returnCode", color = "white" ];
  "usingOraclize.matchBytes32Prefix" [ label = "matchBytes32Prefix" ];
  "usingOraclize.oraclize_randomDS_proofVerify__main" [ label = "oraclize_randomDS_proofVerify__main" ];
  "usingOraclize.copyBytes" [ label = "copyBytes" ];
  "usingOraclize.safer_ecrecover" [ label = "safer_ecrecover" ];
  "usingOraclize.ecrecovery" [ label = "ecrecovery", color = "white" ];
  "usingOraclize.safeMemoryCleaner" [ label = "safeMemoryCleaner" ];
}

subgraph "clusterSafeMath" {
  graph [ label = "SafeMath", color = "lightgray", style = "filled" ];
  "SafeMath.mul" [ label = "mul" ];
  "SafeMath.div" [ label = "div", color = "white" ];
  "SafeMath.sub" [ label = "sub", color = "white" ];
  "SafeMath.add" [ label = "add" ];
}

subgraph "clusterPolyToken" {
  graph [ label = "PolyToken", color = "lightgray", style = "filled" ];
  "PolyToken.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "PolyToken.balanceOf" [ label = "balanceOf", color = "green" ];
  "PolyToken.allowance" [ label = "allowance", color = "green" ];
  "PolyToken.transfer" [ label = "transfer", color = "green" ];
  "PolyToken.transferFrom" [ label = "transferFrom", color = "green" ];
  "PolyToken.approve" [ label = "approve", color = "green" ];
  "PolyToken.increaseApproval" [ label = "increaseApproval", color = "green" ];
  "PolyToken.decreaseApproval" [ label = "decreaseApproval", color = "green" ];
}

subgraph "clusterIBoot" {
  graph [ label = "IBoot", color = "lightgray", style = "filled" ];
  "IBoot.getInitFunction" [ label = "getInitFunction" ];
}

subgraph "clusterICheckPermission" {
  graph [ label = "ICheckPermission", color = "lightgray", style = "filled" ];
  "ICheckPermission.checkPermission" [ label = "checkPermission" ];
}

subgraph "clusterIDataStore" {
  graph [ label = "IDataStore", color = "lightgray", style = "filled" ];
  "IDataStore.setSecurityToken" [ label = "setSecurityToken", color = "blue" ];
  "IDataStore.setUint256" [ label = "setUint256" ];
  "IDataStore.setBytes32" [ label = "setBytes32", color = "blue" ];
  "IDataStore.setAddress" [ label = "setAddress" ];
  "IDataStore.setString" [ label = "setString", color = "blue" ];
  "IDataStore.setBytes" [ label = "setBytes", color = "blue" ];
  "IDataStore.setBool" [ label = "setBool" ];
  "IDataStore.setUint256Array" [ label = "setUint256Array", color = "blue" ];
  "IDataStore.setBytes32Array" [ label = "setBytes32Array", color = "blue" ];
  "IDataStore.setAddressArray" [ label = "setAddressArray", color = "blue" ];
  "IDataStore.setBoolArray" [ label = "setBoolArray", color = "blue" ];
  "IDataStore.insertUint256" [ label = "insertUint256", color = "blue" ];
  "IDataStore.insertBytes32" [ label = "insertBytes32", color = "blue" ];
  "IDataStore.insertAddress" [ label = "insertAddress" ];
  "IDataStore.insertBool" [ label = "insertBool", color = "blue" ];
  "IDataStore.deleteUint256" [ label = "deleteUint256", color = "blue" ];
  "IDataStore.deleteBytes32" [ label = "deleteBytes32", color = "blue" ];
  "IDataStore.deleteAddress" [ label = "deleteAddress" ];
  "IDataStore.deleteBool" [ label = "deleteBool", color = "blue" ];
  "IDataStore.setUint256Multi" [ label = "setUint256Multi", color = "blue" ];
  "IDataStore.setBytes32Multi" [ label = "setBytes32Multi", color = "blue" ];
  "IDataStore.setAddressMulti" [ label = "setAddressMulti", color = "blue" ];
  "IDataStore.setBoolMulti" [ label = "setBoolMulti", color = "blue" ];
  "IDataStore.insertUint256Multi" [ label = "insertUint256Multi", color = "blue" ];
  "IDataStore.insertBytes32Multi" [ label = "insertBytes32Multi", color = "blue" ];
  "IDataStore.insertAddressMulti" [ label = "insertAddressMulti", color = "blue" ];
  "IDataStore.insertBoolMulti" [ label = "insertBoolMulti", color = "blue" ];
  "IDataStore.getUint256" [ label = "getUint256" ];
  "IDataStore.getBytes32" [ label = "getBytes32", color = "blue" ];
  "IDataStore.getAddress" [ label = "getAddress" ];
  "IDataStore.getString" [ label = "getString", color = "blue" ];
  "IDataStore.getBytes" [ label = "getBytes", color = "blue" ];
  "IDataStore.getBool" [ label = "getBool" ];
  "IDataStore.getUint256Array" [ label = "getUint256Array", color = "blue" ];
  "IDataStore.getBytes32Array" [ label = "getBytes32Array", color = "blue" ];
  "IDataStore.getAddressArray" [ label = "getAddressArray" ];
  "IDataStore.getBoolArray" [ label = "getBoolArray", color = "blue" ];
  "IDataStore.getUint256ArrayLength" [ label = "getUint256ArrayLength", color = "blue" ];
  "IDataStore.getBytes32ArrayLength" [ label = "getBytes32ArrayLength", color = "blue" ];
  "IDataStore.getAddressArrayLength" [ label = "getAddressArrayLength" ];
  "IDataStore.getBoolArrayLength" [ label = "getBoolArrayLength", color = "blue" ];
  "IDataStore.getUint256ArrayElement" [ label = "getUint256ArrayElement", color = "blue" ];
  "IDataStore.getBytes32ArrayElement" [ label = "getBytes32ArrayElement", color = "blue" ];
  "IDataStore.getAddressArrayElement" [ label = "getAddressArrayElement" ];
  "IDataStore.getBoolArrayElement" [ label = "getBoolArrayElement", color = "blue" ];
  "IDataStore.getUint256ArrayElements" [ label = "getUint256ArrayElements", color = "blue" ];
  "IDataStore.getBytes32ArrayElements" [ label = "getBytes32ArrayElements", color = "blue" ];
  "IDataStore.getAddressArrayElements" [ label = "getAddressArrayElements" ];
  "IDataStore.getBoolArrayElements" [ label = "getBoolArrayElements", color = "blue" ];
}

subgraph "clusterIFeatureRegistry" {
  graph [ label = "IFeatureRegistry", color = "lightgray", style = "filled" ];
  "IFeatureRegistry.getFeatureStatus" [ label = "getFeatureStatus", color = "blue" ];
}

subgraph "clusterIModule" {
  graph [ label = "IModule", color = "lightgray", style = "filled" ];
  "IModule.getInitFunction" [ label = "getInitFunction", color = "blue" ];
  "IModule.getPermissions" [ label = "getPermissions" ];
  "IModule.takeUsageFee" [ label = "takeUsageFee", color = "blue" ];
}

subgraph "clusterIModuleFactory" {
  graph [ label = "IModuleFactory", color = "lightgray", style = "filled" ];
  "IModuleFactory.lowerSTVersionBounds" [ label = "lowerSTVersionBounds", color = "blue" ];
  "IModuleFactory.upperSTVersionBounds" [ label = "upperSTVersionBounds", color = "blue" ];
  "IModuleFactory.types" [ label = "types", color = "blue" ];
  "IModuleFactory.tags" [ label = "tags", color = "blue" ];
  "IModuleFactory.deploy" [ label = "deploy" ];
  "IModuleFactory.version" [ label = "version", color = "blue" ];
  "IModuleFactory.name" [ label = "name" ];
  "IModuleFactory.title" [ label = "title", color = "blue" ];
  "IModuleFactory.description" [ label = "description", color = "blue" ];
  "IModuleFactory.usageCost" [ label = "usageCost", color = "blue" ];
  "IModuleFactory.setupCost" [ label = "setupCost", color = "blue" ];
  "IModuleFactory.changeSetupCost" [ label = "changeSetupCost", color = "blue" ];
  "IModuleFactory.changeUsageCost" [ label = "changeUsageCost", color = "blue" ];
  "IModuleFactory.changeCostsAndType" [ label = "changeCostsAndType", color = "blue" ];
  "IModuleFactory.changeSTVersionBounds" [ label = "changeSTVersionBounds", color = "blue" ];
  "IModuleFactory.usageCostInPoly" [ label = "usageCostInPoly" ];
  "IModuleFactory.setupCostInPoly" [ label = "setupCostInPoly" ];
}

subgraph "clusterIModuleRegistry" {
  graph [ label = "IModuleRegistry", color = "lightgray", style = "filled" ];
  "IModuleRegistry.useModule" [ label = "useModule" ];
  "IModuleRegistry.registerModule" [ label = "registerModule", color = "blue" ];
  "IModuleRegistry.removeModule" [ label = "removeModule", color = "blue" ];
  "IModuleRegistry.isCompatibleModule" [ label = "isCompatibleModule" ];
  "IModuleRegistry.verifyModule" [ label = "verifyModule", color = "blue" ];
  "IModuleRegistry.unverifyModule" [ label = "unverifyModule" ];
  "IModuleRegistry.getFactoryDetails" [ label = "getFactoryDetails", color = "blue" ];
  "IModuleRegistry.getTagsByTypeAndToken" [ label = "getTagsByTypeAndToken", color = "blue" ];
  "IModuleRegistry.getTagsByType" [ label = "getTagsByType", color = "blue" ];
  "IModuleRegistry.getModulesByType" [ label = "getModulesByType", color = "blue" ];
  "IModuleRegistry.getModulesByTypeAndToken" [ label = "getModulesByTypeAndToken", color = "blue" ];
  "IModuleRegistry.updateFromRegistry" [ label = "updateFromRegistry", color = "blue" ];
  "IModuleRegistry.owner" [ label = "owner", color = "blue" ];
  "IModuleRegistry.isPaused" [ label = "isPaused", color = "blue" ];
}

subgraph "clusterIOracle" {
  graph [ label = "IOracle", color = "lightgray", style = "filled" ];
  "IOracle.getPrice" [ label = "getPrice", color = "blue" ];
  "IOracle.getCurrencyAddress" [ label = "getCurrencyAddress" ];
  "IOracle.getCurrencySymbol" [ label = "getCurrencySymbol" ];
  "IOracle.getCurrencyDenominated" [ label = "getCurrencyDenominated" ];
}

subgraph "clusterIOwnable" {
  graph [ label = "IOwnable", color = "lightgray", style = "filled" ];
  "IOwnable.owner" [ label = "owner", color = "blue" ];
  "IOwnable.renounceOwnership" [ label = "renounceOwnership", color = "blue" ];
  "IOwnable.transferOwnership" [ label = "transferOwnership" ];
}

subgraph "clusterIPoly" {
  graph [ label = "IPoly", color = "lightgray", style = "filled" ];
  "IPoly.decimals" [ label = "decimals", color = "blue" ];
  "IPoly.totalSupply" [ label = "totalSupply", color = "blue" ];
  "IPoly.balanceOf" [ label = "balanceOf", color = "blue" ];
  "IPoly.allowance" [ label = "allowance" ];
  "IPoly.transfer" [ label = "transfer", color = "blue" ];
  "IPoly.transferFrom" [ label = "transferFrom", color = "blue" ];
  "IPoly.approve" [ label = "approve", color = "blue" ];
  "IPoly.decreaseApproval" [ label = "decreaseApproval" ];
  "IPoly.increaseApproval" [ label = "increaseApproval" ];
}

subgraph "clusterIPolymathRegistry" {
  graph [ label = "IPolymathRegistry", color = "lightgray", style = "filled" ];
  "IPolymathRegistry.getAddress" [ label = "getAddress", color = "blue" ];
}

subgraph "clusterISTFactory" {
  graph [ label = "ISTFactory", color = "lightgray", style = "filled" ];
  "ISTFactory.deployToken" [ label = "deployToken", color = "blue" ];
}

subgraph "clusterISTO" {
  graph [ label = "ISTO", color = "lightgray", style = "filled" ];
  "ISTO.getTokensSold" [ label = "getTokensSold", color = "blue" ];
}

subgraph "clusterISecurityToken" {
  graph [ label = "ISecurityToken", color = "lightgray", style = "filled" ];
  "ISecurityToken.getVersion" [ label = "getVersion", color = "blue" ];
  "ISecurityToken.getModulesByType" [ label = "getModulesByType", color = "blue" ];
  "ISecurityToken.getModule" [ label = "getModule", color = "blue" ];
  "ISecurityToken.transfersFrozen" [ label = "transfersFrozen", color = "blue" ];
  "ISecurityToken.checkPermission" [ label = "checkPermission", color = "blue" ];
  "ISecurityToken.isModule" [ label = "isModule", color = "blue" ];
  "ISecurityToken.decimals" [ label = "decimals", color = "blue" ];
  "ISecurityToken.totalSupply" [ label = "totalSupply", color = "blue" ];
  "ISecurityToken.balanceOf" [ label = "balanceOf" ];
  "ISecurityToken.allowance" [ label = "allowance", color = "blue" ];
  "ISecurityToken.transfer" [ label = "transfer" ];
  "ISecurityToken.transferFrom" [ label = "transferFrom" ];
  "ISecurityToken.approve" [ label = "approve", color = "blue" ];
  "ISecurityToken.decreaseApproval" [ label = "decreaseApproval", color = "blue" ];
  "ISecurityToken.increaseApproval" [ label = "increaseApproval", color = "blue" ];
  "ISecurityToken.canTransfer" [ label = "canTransfer", color = "blue" ];
  "ISecurityToken.initialize" [ label = "initialize", color = "blue" ];
  "ISecurityToken.canTransferFrom" [ label = "canTransferFrom", color = "blue" ];
  "ISecurityToken.canTransferByPartition" [ label = "canTransferByPartition", color = "blue" ];
  "ISecurityToken.setDocument" [ label = "setDocument", color = "blue" ];
  "ISecurityToken.removeDocument" [ label = "removeDocument", color = "blue" ];
  "ISecurityToken.getDocument" [ label = "getDocument", color = "blue" ];
  "ISecurityToken.getAllDocuments" [ label = "getAllDocuments", color = "blue" ];
  "ISecurityToken.isControllable" [ label = "isControllable", color = "blue" ];
  "ISecurityToken.issue" [ label = "issue" ];
  "ISecurityToken.issueMulti" [ label = "issueMulti", color = "blue" ];
  "ISecurityToken.issueByPartition" [ label = "issueByPartition", color = "blue" ];
  "ISecurityToken.redeemByPartition" [ label = "redeemByPartition" ];
  "ISecurityToken.redeem" [ label = "redeem" ];
  "ISecurityToken.redeemFrom" [ label = "redeemFrom" ];
  "ISecurityToken.operatorRedeemByPartition" [ label = "operatorRedeemByPartition" ];
  "ISecurityToken.getModulesByName" [ label = "getModulesByName", color = "blue" ];
  "ISecurityToken.getTreasuryWallet" [ label = "getTreasuryWallet", color = "blue" ];
  "ISecurityToken.totalSupplyAt" [ label = "totalSupplyAt" ];
  "ISecurityToken.balanceOfAt" [ label = "balanceOfAt" ];
  "ISecurityToken.createCheckpoint" [ label = "createCheckpoint" ];
  "ISecurityToken.getCheckpointTimes" [ label = "getCheckpointTimes", color = "blue" ];
  "ISecurityToken.getInvestors" [ label = "getInvestors", color = "blue" ];
  "ISecurityToken.getInvestorsAt" [ label = "getInvestorsAt" ];
  "ISecurityToken.getInvestorsSubsetAt" [ label = "getInvestorsSubsetAt" ];
  "ISecurityToken.iterateInvestors" [ label = "iterateInvestors", color = "blue" ];
  "ISecurityToken.currentCheckpointId" [ label = "currentCheckpointId" ];
  "ISecurityToken.isOperator" [ label = "isOperator", color = "blue" ];
  "ISecurityToken.isOperatorForPartition" [ label = "isOperatorForPartition", color = "blue" ];
  "ISecurityToken.partitionsOf" [ label = "partitionsOf", color = "blue" ];
  "ISecurityToken.dataStore" [ label = "dataStore" ];
  "ISecurityToken.changeDataStore" [ label = "changeDataStore" ];
  "ISecurityToken.changeTreasuryWallet" [ label = "changeTreasuryWallet" ];
  "ISecurityToken.withdrawERC20" [ label = "withdrawERC20", color = "blue" ];
  "ISecurityToken.changeModuleBudget" [ label = "changeModuleBudget", color = "blue" ];
  "ISecurityToken.updateTokenDetails" [ label = "updateTokenDetails", color = "blue" ];
  "ISecurityToken.changeName" [ label = "changeName", color = "blue" ];
  "ISecurityToken.changeGranularity" [ label = "changeGranularity", color = "blue" ];
  "ISecurityToken.freezeTransfers" [ label = "freezeTransfers", color = "blue" ];
  "ISecurityToken.unfreezeTransfers" [ label = "unfreezeTransfers", color = "blue" ];
  "ISecurityToken.freezeIssuance" [ label = "freezeIssuance", color = "blue" ];
  "ISecurityToken.addModuleWithLabel" [ label = "addModuleWithLabel", color = "blue" ];
  "ISecurityToken.addModule" [ label = "addModule" ];
  "ISecurityToken.archiveModule" [ label = "archiveModule", color = "blue" ];
  "ISecurityToken.unarchiveModule" [ label = "unarchiveModule", color = "blue" ];
  "ISecurityToken.removeModule" [ label = "removeModule", color = "blue" ];
  "ISecurityToken.setController" [ label = "setController", color = "blue" ];
  "ISecurityToken.controllerTransfer" [ label = "controllerTransfer", color = "blue" ];
  "ISecurityToken.controllerRedeem" [ label = "controllerRedeem", color = "blue" ];
  "ISecurityToken.disableController" [ label = "disableController", color = "blue" ];
  "ISecurityToken.getInvestorCount" [ label = "getInvestorCount", color = "blue" ];
  "ISecurityToken.holderCount" [ label = "holderCount" ];
  "ISecurityToken.transferWithData" [ label = "transferWithData", color = "blue" ];
  "ISecurityToken.transferFromWithData" [ label = "transferFromWithData", color = "blue" ];
  "ISecurityToken.transferByPartition" [ label = "transferByPartition", color = "blue" ];
  "ISecurityToken.balanceOfByPartition" [ label = "balanceOfByPartition", color = "blue" ];
  "ISecurityToken.granularity" [ label = "granularity" ];
  "ISecurityToken.polymathRegistry" [ label = "polymathRegistry" ];
  "ISecurityToken.upgradeModule" [ label = "upgradeModule", color = "blue" ];
  "ISecurityToken.upgradeToken" [ label = "upgradeToken", color = "blue" ];
  "ISecurityToken.isIssuable" [ label = "isIssuable", color = "blue" ];
  "ISecurityToken.authorizeOperator" [ label = "authorizeOperator", color = "blue" ];
  "ISecurityToken.revokeOperator" [ label = "revokeOperator", color = "blue" ];
  "ISecurityToken.authorizeOperatorByPartition" [ label = "authorizeOperatorByPartition", color = "blue" ];
  "ISecurityToken.revokeOperatorByPartition" [ label = "revokeOperatorByPartition", color = "blue" ];
  "ISecurityToken.operatorTransferByPartition" [ label = "operatorTransferByPartition" ];
}

subgraph "clusterISecurityTokenRegistry" {
  graph [ label = "ISecurityTokenRegistry", color = "lightgray", style = "filled" ];
  "ISecurityTokenRegistry.isSecurityToken" [ label = "isSecurityToken", color = "blue" ];
  "ISecurityTokenRegistry.generateSecurityToken" [ label = "generateSecurityToken", color = "blue" ];
  "ISecurityTokenRegistry.modifySecurityToken" [ label = "modifySecurityToken", color = "blue" ];
  "ISecurityTokenRegistry.registerTicker" [ label = "registerTicker", color = "blue" ];
  "ISecurityTokenRegistry.setProtocolVersion" [ label = "setProtocolVersion", color = "blue" ];
  "ISecurityTokenRegistry.transferOwnership" [ label = "transferOwnership", color = "blue" ];
  "ISecurityTokenRegistry.getSecurityTokenAddress" [ label = "getSecurityTokenAddress", color = "blue" ];
  "ISecurityTokenRegistry.getSecurityTokenData" [ label = "getSecurityTokenData", color = "blue" ];
  "ISecurityTokenRegistry.getSTFactoryAddress" [ label = "getSTFactoryAddress", color = "blue" ];
  "ISecurityTokenRegistry.getProtocolVersion" [ label = "getProtocolVersion", color = "blue" ];
  "ISecurityTokenRegistry.getTickersByOwner" [ label = "getTickersByOwner", color = "blue" ];
  "ISecurityTokenRegistry.getTokensByOwner" [ label = "getTokensByOwner", color = "blue" ];
  "ISecurityTokenRegistry.getTokens" [ label = "getTokens", color = "blue" ];
  "ISecurityTokenRegistry.getTickerDetails" [ label = "getTickerDetails", color = "blue" ];
  "ISecurityTokenRegistry.modifyTicker" [ label = "modifyTicker", color = "blue" ];
  "ISecurityTokenRegistry.removeTicker" [ label = "removeTicker", color = "blue" ];
  "ISecurityTokenRegistry.transferTickerOwnership" [ label = "transferTickerOwnership", color = "blue" ];
  "ISecurityTokenRegistry.changeExpiryLimit" [ label = "changeExpiryLimit", color = "blue" ];
  "ISecurityTokenRegistry.changeTickerRegistrationFee" [ label = "changeTickerRegistrationFee", color = "blue" ];
  "ISecurityTokenRegistry.changeSecurityLaunchFee" [ label = "changeSecurityLaunchFee", color = "blue" ];
  "ISecurityTokenRegistry.changeFeesAmountAndCurrency" [ label = "changeFeesAmountAndCurrency", color = "blue" ];
  "ISecurityTokenRegistry.getSecurityTokenLaunchFee" [ label = "getSecurityTokenLaunchFee", color = "blue" ];
  "ISecurityTokenRegistry.getTickerRegistrationFee" [ label = "getTickerRegistrationFee", color = "blue" ];
  "ISecurityTokenRegistry.getTokensByDelegate" [ label = "getTokensByDelegate", color = "blue" ];
  "ISecurityTokenRegistry.getExpiryLimit" [ label = "getExpiryLimit", color = "blue" ];
  "ISecurityTokenRegistry.isPaused" [ label = "isPaused", color = "blue" ];
  "ISecurityTokenRegistry.owner" [ label = "owner", color = "blue" ];
}

subgraph "clusterITransferManager" {
  graph [ label = "ITransferManager", color = "lightgray", style = "filled" ];
  "ITransferManager.executeTransfer" [ label = "executeTransfer" ];
  "ITransferManager.verifyTransfer" [ label = "verifyTransfer" ];
  "ITransferManager.getTokensByPartition" [ label = "getTokensByPartition" ];
  "ITransferManager.getPartitions" [ label = "getPartitions" ];
}

subgraph "clusterIUSDTieredSTOProxy" {
  graph [ label = "IUSDTieredSTOProxy", color = "lightgray", style = "filled" ];
  "IUSDTieredSTOProxy.deploySTO" [ label = "deploySTO", color = "blue" ];
  "IUSDTieredSTOProxy.getInitFunction" [ label = "getInitFunction", color = "blue" ];
}

subgraph "clusterIUpgradableTokenFactory" {
  graph [ label = "IUpgradableTokenFactory", color = "lightgray", style = "filled" ];
  "IUpgradableTokenFactory.upgradeToken" [ label = "upgradeToken" ];
}

subgraph "clusterIVoting" {
  graph [ label = "IVoting", color = "lightgray", style = "filled" ];
  "IVoting.changeBallotStatus" [ label = "changeBallotStatus", color = "blue" ];
  "IVoting.getBallotResults" [ label = "getBallotResults", color = "blue" ];
  "IVoting.getSelectedProposal" [ label = "getSelectedProposal", color = "blue" ];
  "IVoting.getBallotDetails" [ label = "getBallotDetails", color = "blue" ];
}

subgraph "clusterIERC1410" {
  graph [ label = "IERC1410", color = "lightgray", style = "filled" ];
  "IERC1410.balanceOfByPartition" [ label = "balanceOfByPartition", color = "blue" ];
  "IERC1410.transferByPartition" [ label = "transferByPartition", color = "blue" ];
  "IERC1410.operatorTransferByPartition" [ label = "operatorTransferByPartition", color = "blue" ];
  "IERC1410.canTransferByPartition" [ label = "canTransferByPartition", color = "blue" ];
  "IERC1410.authorizeOperator" [ label = "authorizeOperator", color = "blue" ];
  "IERC1410.revokeOperator" [ label = "revokeOperator", color = "blue" ];
  "IERC1410.authorizeOperatorByPartition" [ label = "authorizeOperatorByPartition", color = "blue" ];
  "IERC1410.revokeOperatorByPartition" [ label = "revokeOperatorByPartition", color = "blue" ];
  "IERC1410.issueByPartition" [ label = "issueByPartition", color = "blue" ];
  "IERC1410.redeemByPartition" [ label = "redeemByPartition", color = "blue" ];
  "IERC1410.operatorRedeemByPartition" [ label = "operatorRedeemByPartition", color = "blue" ];
}

subgraph "clusterIERC1594" {
  graph [ label = "IERC1594", color = "lightgray", style = "filled" ];
  "IERC1594.transferWithData" [ label = "transferWithData", color = "blue" ];
  "IERC1594.transferFromWithData" [ label = "transferFromWithData", color = "blue" ];
  "IERC1594.issue" [ label = "issue", color = "blue" ];
  "IERC1594.redeem" [ label = "redeem", color = "blue" ];
  "IERC1594.redeemFrom" [ label = "redeemFrom", color = "blue" ];
  "IERC1594.canTransfer" [ label = "canTransfer", color = "blue" ];
  "IERC1594.canTransferFrom" [ label = "canTransferFrom", color = "blue" ];
}

subgraph "clusterIERC1643" {
  graph [ label = "IERC1643", color = "lightgray", style = "filled" ];
  "IERC1643.setDocument" [ label = "setDocument", color = "blue" ];
  "IERC1643.removeDocument" [ label = "removeDocument", color = "blue" ];
}

subgraph "clusterIERC1644" {
  graph [ label = "IERC1644", color = "lightgray", style = "filled" ];
  "IERC1644.isControllable" [ label = "isControllable", color = "blue" ];
  "IERC1644.controllerTransfer" [ label = "controllerTransfer", color = "blue" ];
  "IERC1644.controllerRedeem" [ label = "controllerRedeem", color = "blue" ];
}

subgraph "clusterBokkyPooBahsDateTimeLibrary" {
  graph [ label = "BokkyPooBahsDateTimeLibrary", color = "lightgray", style = "filled" ];
  "BokkyPooBahsDateTimeLibrary._daysFromDate" [ label = "_daysFromDate" ];
  "BokkyPooBahsDateTimeLibrary._daysToDate" [ label = "_daysToDate" ];
  "BokkyPooBahsDateTimeLibrary.timestampFromDate" [ label = "timestampFromDate", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.timestampFromDateTime" [ label = "timestampFromDateTime", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.timestampToDate" [ label = "timestampToDate", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.timestampToDateTime" [ label = "timestampToDateTime", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.isValidDate" [ label = "isValidDate", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.isValidDateTime" [ label = "isValidDateTime", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.isLeapYear" [ label = "isLeapYear", color = "white" ];
  "BokkyPooBahsDateTimeLibrary._isLeapYear" [ label = "_isLeapYear" ];
  "BokkyPooBahsDateTimeLibrary.isWeekDay" [ label = "isWeekDay", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.isWeekEnd" [ label = "isWeekEnd", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.getDaysInMonth" [ label = "getDaysInMonth", color = "white" ];
  "BokkyPooBahsDateTimeLibrary._getDaysInMonth" [ label = "_getDaysInMonth" ];
  "BokkyPooBahsDateTimeLibrary.getDayOfWeek" [ label = "getDayOfWeek" ];
  "BokkyPooBahsDateTimeLibrary.getYear" [ label = "getYear", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.getMonth" [ label = "getMonth", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.getDay" [ label = "getDay", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.getHour" [ label = "getHour", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.getMinute" [ label = "getMinute", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.getSecond" [ label = "getSecond", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.addYears" [ label = "addYears", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.addMonths" [ label = "addMonths", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.addDays" [ label = "addDays" ];
  "BokkyPooBahsDateTimeLibrary.addHours" [ label = "addHours", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.addMinutes" [ label = "addMinutes", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.addSeconds" [ label = "addSeconds", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.subYears" [ label = "subYears", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.subMonths" [ label = "subMonths", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.subDays" [ label = "subDays", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.subHours" [ label = "subHours", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.subMinutes" [ label = "subMinutes", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.subSeconds" [ label = "subSeconds", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.diffYears" [ label = "diffYears", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.diffMonths" [ label = "diffMonths", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.diffDays" [ label = "diffDays" ];
  "BokkyPooBahsDateTimeLibrary.diffHours" [ label = "diffHours", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.diffMinutes" [ label = "diffMinutes", color = "white" ];
  "BokkyPooBahsDateTimeLibrary.diffSeconds" [ label = "diffSeconds" ];
}

subgraph "clusterDecimalMath" {
  graph [ label = "DecimalMath", color = "lightgray", style = "filled" ];
  "DecimalMath.div" [ label = "div", color = "white" ];
  "DecimalMath.mul" [ label = "mul", color = "white" ];
}

subgraph "clusterEncoder" {
  graph [ label = "Encoder", color = "lightgray", style = "filled" ];
  "Encoder.getKey" [ label = "getKey", color = "white" ];
}

subgraph "clusterKindMath" {
  graph [ label = "KindMath", color = "lightgray", style = "filled" ];
  "KindMath.checkMul" [ label = "checkMul", color = "white" ];
  "KindMath.checkSub" [ label = "checkSub", color = "white" ];
  "KindMath.checkAdd" [ label = "checkAdd", color = "white" ];
}

subgraph "clusterTokenLib" {
  graph [ label = "TokenLib", color = "lightgray", style = "filled" ];
  "TokenLib.hash" [ label = "hash" ];
  "TokenLib.recoverFreezeIssuanceAckSigner" [ label = "recoverFreezeIssuanceAckSigner", color = "green" ];
  "TokenLib.recoverDisableControllerAckSigner" [ label = "recoverDisableControllerAckSigner", color = "green" ];
  "TokenLib.extractSigner" [ label = "extractSigner" ];
  "TokenLib.archiveModule" [ label = "archiveModule" ];
  "TokenLib.unarchiveModule" [ label = "unarchiveModule", color = "green" ];
  "TokenLib.upgradeModule" [ label = "upgradeModule", color = "green" ];
  "TokenLib.removeModule" [ label = "removeModule", color = "green" ];
  "TokenLib._removeModuleWithIndex" [ label = "_removeModuleWithIndex" ];
  "TokenLib.changeModuleBudget" [ label = "changeModuleBudget", color = "green" ];
  "TokenLib.getValueAt" [ label = "getValueAt" ];
  "TokenLib.adjustCheckpoints" [ label = "adjustCheckpoints", color = "green" ];
  "TokenLib.adjustInvestorCount" [ label = "adjustInvestorCount", color = "green" ];
  "TokenLib.setDocument" [ label = "setDocument", color = "green" ];
  "TokenLib.removeDocument" [ label = "removeDocument" ];
  "TokenLib.verifyTransfer" [ label = "verifyTransfer", color = "green" ];
  "TokenLib.canTransfer" [ label = "canTransfer" ];
  "TokenLib._getKey" [ label = "_getKey" ];
  "TokenLib._isExistingInvestor" [ label = "_isExistingInvestor" ];
}

subgraph "clusterUtil" {
  graph [ label = "Util", color = "lightgray", style = "filled" ];
  "Util.bytes32ToString" [ label = "bytes32ToString", color = "white" ];
  "Util.upper" [ label = "upper", color = "white" ];
  "Util.stringToBytes32" [ label = "stringToBytes32", color = "white" ];
  "Util.bytesToBytes32" [ label = "bytesToBytes32" ];
  "Util.getSig" [ label = "getSig" ];
}

subgraph "clusterVersionUtils" {
  graph [ label = "VersionUtils", color = "lightgray", style = "filled" ];
  "VersionUtils.lessThanOrEqual" [ label = "lessThanOrEqual", color = "white" ];
  "VersionUtils.greaterThanOrEqual" [ label = "greaterThanOrEqual", color = "white" ];
  "VersionUtils.unpack" [ label = "unpack", color = "white" ];
  "VersionUtils.pack" [ label = "pack", color = "white" ];
  "VersionUtils.packKYC" [ label = "packKYC" ];
  "VersionUtils.unpackKYC" [ label = "unpackKYC" ];
}

subgraph "clusterVolumeRestrictionLib" {
  graph [ label = "VolumeRestrictionLib", color = "lightgray", style = "filled" ];
  "VolumeRestrictionLib.deleteHolderFromList" [ label = "deleteHolderFromList", color = "green" ];
  "VolumeRestrictionLib.addRestrictionData" [ label = "addRestrictionData", color = "green" ];
  "VolumeRestrictionLib.isValidAmountAfterRestrictionChanges" [ label = "isValidAmountAfterRestrictionChanges", color = "green" ];
  "VolumeRestrictionLib.getRestrictionData" [ label = "getRestrictionData", color = "green" ];
  "VolumeRestrictionLib._setValues" [ label = "_setValues" ];
  "VolumeRestrictionLib._isVolRestricted" [ label = "_isVolRestricted" ];
  "VolumeRestrictionLib._getTypeOfPeriod" [ label = "_getTypeOfPeriod" ];
  "VolumeRestrictionLib._isExistingInvestor" [ label = "_isExistingInvestor" ];
  "VolumeRestrictionLib._getKey" [ label = "_getKey" ];
}

subgraph "clusterDummySTO" {
  graph [ label = "DummySTO", color = "lightgray", style = "filled" ];
  "DummySTO.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "DummySTO.configure" [ label = "configure", color = "green" ];
  "DummySTO.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "DummySTO.generateTokens" [ label = "generateTokens", color = "green" ];
  "DummySTO.getNumberInvestors" [ label = "getNumberInvestors", color = "green" ];
  "DummySTO.getTokensSold" [ label = "getTokensSold", color = "blue" ];
  "DummySTO.getPermissions" [ label = "getPermissions", color = "green" ];
  "DummySTO.<Fallback>" [ label = "<Fallback>", color = "blue" ];
  "DummySTO._canBuy" [ label = "_canBuy" ];
}

subgraph "clusterDummySTOFactory" {
  graph [ label = "DummySTOFactory", color = "lightgray", style = "filled" ];
  "DummySTOFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "DummySTOFactory.deploy" [ label = "deploy", color = "blue" ];
  "DummySTOFactory._initializeModule" [ label = "_initializeModule" ];
}

subgraph "clusterDummySTOProxy" {
  graph [ label = "DummySTOProxy", color = "lightgray", style = "filled" ];
  "DummySTOProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "DummySTOProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterDummySTOStorage" {
  graph [ label = "DummySTOStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterfunctionSigClash1" {
  graph [ label = "functionSigClash1", color = "lightgray", style = "filled" ];
}

subgraph "clusterfunctionSigClash2" {
  graph [ label = "functionSigClash2", color = "lightgray", style = "filled" ];
}

subgraph "clusterMockBurnFactory" {
  graph [ label = "MockBurnFactory", color = "lightgray", style = "filled" ];
  "MockBurnFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "MockBurnFactory.deploy" [ label = "deploy", color = "blue" ];
  "MockBurnFactory._initializeModule" [ label = "_initializeModule" ];
}

subgraph "clusterMockCountTransferManager" {
  graph [ label = "MockCountTransferManager", color = "lightgray", style = "filled" ];
  "MockCountTransferManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "MockCountTransferManager.initialize" [ label = "initialize", color = "green" ];
  "MockCountTransferManager.newFunction" [ label = "newFunction", color = "blue" ];
}

subgraph "clusterMockFactory" {
  graph [ label = "MockFactory", color = "lightgray", style = "filled" ];
  "MockFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "IModuleFactory.types" [ label = "types", color = "blue" ];
  "MockFactory.switchTypes" [ label = "switchTypes", color = "blue" ];
}

subgraph "clusterMockModuleRegistry" {
  graph [ label = "MockModuleRegistry", color = "lightgray", style = "filled" ];
  "MockModuleRegistry.addMoreReputation" [ label = "addMoreReputation", color = "green" ];
}

subgraph "clusterMockOracle" {
  graph [ label = "MockOracle", color = "lightgray", style = "filled" ];
  "MockOracle.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "MockOracle.changePrice" [ label = "changePrice", color = "blue" ];
  "MockOracle.getCurrencyAddress" [ label = "getCurrencyAddress", color = "blue" ];
  "MockOracle.getCurrencySymbol" [ label = "getCurrencySymbol", color = "blue" ];
  "MockOracle.getCurrencyDenominated" [ label = "getCurrencyDenominated", color = "blue" ];
  "IOracle.getPrice" [ label = "getPrice", color = "blue" ];
}

subgraph "clusterMockPolyOracle" {
  graph [ label = "MockPolyOracle", color = "lightgray", style = "filled" ];
  "MockPolyOracle.<Constructor>" [ label = "<Constructor>", color = "green" ];
}

subgraph "clusterMockRedemptionManager" {
  graph [ label = "MockRedemptionManager", color = "lightgray", style = "filled" ];
  "MockRedemptionManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "MockRedemptionManager.transferToRedeem" [ label = "transferToRedeem", color = "green" ];
  "MockRedemptionManager.redeemTokenByOwner" [ label = "redeemTokenByOwner", color = "green" ];
  "MockRedemptionManager.redeemTokensByPartition" [ label = "redeemTokensByPartition", color = "blue" ];
  "MockRedemptionManager.operatorRedeemTokensByPartition" [ label = "operatorRedeemTokensByPartition", color = "blue" ];
  "MockRedemptionManager.operatorTransferToRedeem" [ label = "operatorTransferToRedeem", color = "blue" ];
}

subgraph "clusterMockSTGetter" {
  graph [ label = "MockSTGetter", color = "lightgray", style = "filled" ];
  "MockSTGetter.newGetter" [ label = "newGetter", color = "green" ];
}

subgraph "clusterMockSecurityTokenLogic" {
  graph [ label = "MockSecurityTokenLogic", color = "lightgray", style = "filled" ];
  "MockSecurityTokenLogic.upgrade" [ label = "upgrade", color = "blue" ];
  "MockSecurityTokenLogic.newFunction" [ label = "newFunction", color = "blue" ];
  "MockSecurityTokenLogic.addModuleWithLabel" [ label = "addModuleWithLabel", color = "green" ];
}

subgraph "clusterMockWrongTypeFactory" {
  graph [ label = "MockWrongTypeFactory", color = "lightgray", style = "filled" ];
  "MockWrongTypeFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "IModuleFactory.types" [ label = "types", color = "blue" ];
}

subgraph "clusterPolyTokenFaucet" {
  graph [ label = "PolyTokenFaucet", color = "lightgray", style = "filled" ];
  "PolyTokenFaucet.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "PolyTokenFaucet.getTokens" [ label = "getTokens", color = "green" ];
  "PolyTokenFaucet.transfer" [ label = "transfer", color = "green" ];
  "PolyTokenFaucet.transferFrom" [ label = "transferFrom", color = "green" ];
  "PolyTokenFaucet.balanceOf" [ label = "balanceOf", color = "green" ];
  "PolyTokenFaucet.approve" [ label = "approve", color = "green" ];
  "PolyTokenFaucet.allowance" [ label = "allowance", color = "green" ];
  "PolyTokenFaucet.totalSupply" [ label = "totalSupply", color = "green" ];
  "PolyTokenFaucet.increaseApproval" [ label = "increaseApproval", color = "green" ];
  "PolyTokenFaucet.decreaseApproval" [ label = "decreaseApproval", color = "green" ];
}

subgraph "clusterSecurityTokenMock" {
  graph [ label = "SecurityTokenMock", color = "lightgray", style = "filled" ];
  "SecurityTokenMock.initialize" [ label = "initialize", color = "green" ];
}

subgraph "clusterSecurityTokenRegistryMock" {
  graph [ label = "SecurityTokenRegistryMock", color = "lightgray", style = "filled" ];
  "SecurityTokenRegistryMock.changeTheDeployedAddress" [ label = "changeTheDeployedAddress", color = "green" ];
}

subgraph "clusterTestSTOFactory" {
  graph [ label = "TestSTOFactory", color = "lightgray", style = "filled" ];
  "TestSTOFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "IModuleFactory.tags" [ label = "tags", color = "blue" ];
}

subgraph "clusterIBurn" {
  graph [ label = "IBurn", color = "lightgray", style = "filled" ];
}

subgraph "clusterDividendCheckpoint" {
  graph [ label = "DividendCheckpoint", color = "lightgray", style = "filled" ];
  "DividendCheckpoint._validDividendIndex" [ label = "_validDividendIndex" ];
  "DividendCheckpoint.configure" [ label = "configure", color = "green" ];
  "DividendCheckpoint.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "DividendCheckpoint.changeWallet" [ label = "changeWallet", color = "blue" ];
  "DividendCheckpoint._setWallet" [ label = "_setWallet" ];
  "DividendCheckpoint.getDefaultExcluded" [ label = "getDefaultExcluded", color = "blue" ];
  "DividendCheckpoint.getTreasuryWallet" [ label = "getTreasuryWallet", color = "green" ];
  "DividendCheckpoint.createCheckpoint" [ label = "createCheckpoint", color = "green" ];
  "DividendCheckpoint.setDefaultExcluded" [ label = "setDefaultExcluded", color = "green" ];
  "DividendCheckpoint.setWithholding" [ label = "setWithholding", color = "green" ];
  "DividendCheckpoint.setWithholdingFixed" [ label = "setWithholdingFixed", color = "green" ];
  "DividendCheckpoint.pushDividendPaymentToAddresses" [ label = "pushDividendPaymentToAddresses", color = "green" ];
  "DividendCheckpoint.pushDividendPayment" [ label = "pushDividendPayment", color = "green" ];
  "DividendCheckpoint.pullDividendPayment" [ label = "pullDividendPayment", color = "green" ];
  "DividendCheckpoint._payDividend" [ label = "_payDividend" ];
  "DividendCheckpoint.reclaimDividend" [ label = "reclaimDividend", color = "blue" ];
  "DividendCheckpoint.calculateDividend" [ label = "calculateDividend", color = "green" ];
  "DividendCheckpoint.getDividendIndex" [ label = "getDividendIndex", color = "green" ];
  "DividendCheckpoint.withdrawWithholding" [ label = "withdrawWithholding", color = "blue" ];
  "DividendCheckpoint.updateDividendDates" [ label = "updateDividendDates", color = "blue" ];
  "DividendCheckpoint.getDividendsData" [ label = "getDividendsData", color = "blue" ];
  "DividendCheckpoint.getDividendData" [ label = "getDividendData" ];
  "DividendCheckpoint.getDividendProgress" [ label = "getDividendProgress", color = "blue" ];
  "DividendCheckpoint.getCheckpointData" [ label = "getCheckpointData", color = "blue" ];
  "DividendCheckpoint.isExcluded" [ label = "isExcluded", color = "blue" ];
  "DividendCheckpoint.isClaimed" [ label = "isClaimed", color = "blue" ];
  "DividendCheckpoint.getPermissions" [ label = "getPermissions", color = "green" ];
  "DividendCheckpoint._onlySecurityTokenOwner" [ label = "_onlySecurityTokenOwner" ];
  "DividendCheckpoint.getDataStore" [ label = "getDataStore" ];
}

subgraph "clusterERC20DividendCheckpoint" {
  graph [ label = "ERC20DividendCheckpoint", color = "lightgray", style = "filled" ];
  "ERC20DividendCheckpoint.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "ERC20DividendCheckpoint.createDividend" [ label = "createDividend", color = "blue" ];
  "ERC20DividendCheckpoint.createDividendWithCheckpoint" [ label = "createDividendWithCheckpoint", color = "blue" ];
  "ERC20DividendCheckpoint.createDividendWithExclusions" [ label = "createDividendWithExclusions" ];
  "ERC20DividendCheckpoint.createDividendWithCheckpointAndExclusions" [ label = "createDividendWithCheckpointAndExclusions", color = "green" ];
  "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions" [ label = "_createDividendWithCheckpointAndExclusions" ];
  "ERC20DividendCheckpoint._emitERC20DividendDepositedEvent" [ label = "_emitERC20DividendDepositedEvent" ];
  "DividendCheckpoint._payDividend" [ label = "_payDividend", color = "white" ];
  "ERC20DividendCheckpoint.reclaimDividend" [ label = "reclaimDividend", color = "blue" ];
  "ERC20DividendCheckpoint.withdrawWithholding" [ label = "withdrawWithholding", color = "blue" ];
}

subgraph "clusterERC20DividendCheckpointFactory" {
  graph [ label = "ERC20DividendCheckpointFactory", color = "lightgray", style = "filled" ];
  "ERC20DividendCheckpointFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "ERC20DividendCheckpointFactory.deploy" [ label = "deploy", color = "blue" ];
  "ERC20DividendCheckpointFactory._initializeModule" [ label = "_initializeModule" ];
}

subgraph "clusterERC20DividendCheckpointProxy" {
  graph [ label = "ERC20DividendCheckpointProxy", color = "lightgray", style = "filled" ];
  "ERC20DividendCheckpointProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "ERC20DividendCheckpointProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterERC20DividendCheckpointStorage" {
  graph [ label = "ERC20DividendCheckpointStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterEtherDividendCheckpoint" {
  graph [ label = "EtherDividendCheckpoint", color = "lightgray", style = "filled" ];
  "EtherDividendCheckpoint.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "EtherDividendCheckpoint.createDividend" [ label = "createDividend", color = "blue" ];
  "EtherDividendCheckpoint.createDividendWithCheckpoint" [ label = "createDividendWithCheckpoint", color = "blue" ];
  "EtherDividendCheckpoint.createDividendWithExclusions" [ label = "createDividendWithExclusions" ];
  "EtherDividendCheckpoint.createDividendWithCheckpointAndExclusions" [ label = "createDividendWithCheckpointAndExclusions", color = "green" ];
  "EtherDividendCheckpoint._createDividendWithCheckpointAndExclusions" [ label = "_createDividendWithCheckpointAndExclusions" ];
  "DividendCheckpoint._payDividend" [ label = "_payDividend", color = "white" ];
  "EtherDividendCheckpoint.reclaimDividend" [ label = "reclaimDividend", color = "blue" ];
  "EtherDividendCheckpoint.withdrawWithholding" [ label = "withdrawWithholding", color = "blue" ];
}

subgraph "clusterEtherDividendCheckpointFactory" {
  graph [ label = "EtherDividendCheckpointFactory", color = "lightgray", style = "filled" ];
  "EtherDividendCheckpointFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "EtherDividendCheckpointFactory.deploy" [ label = "deploy", color = "blue" ];
  "EtherDividendCheckpointFactory._initializeModule" [ label = "_initializeModule" ];
}

subgraph "clusterEtherDividendCheckpointProxy" {
  graph [ label = "EtherDividendCheckpointProxy", color = "lightgray", style = "filled" ];
  "EtherDividendCheckpointProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "EtherDividendCheckpointProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterICheckpoint" {
  graph [ label = "ICheckpoint", color = "lightgray", style = "filled" ];
}

subgraph "clusterPLCRVotingCheckpoint" {
  graph [ label = "PLCRVotingCheckpoint", color = "lightgray", style = "filled" ];
  "PLCRVotingCheckpoint.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "PLCRVotingCheckpoint.createBallot" [ label = "createBallot", color = "blue" ];
  "PLCRVotingCheckpoint.createCustomBallot" [ label = "createCustomBallot", color = "blue" ];
  "PLCRVotingCheckpoint._createBallotWithCheckpoint" [ label = "_createBallotWithCheckpoint" ];
  "PLCRVotingCheckpoint.commitVote" [ label = "commitVote", color = "blue" ];
  "PLCRVotingCheckpoint.revealVote" [ label = "revealVote", color = "blue" ];
  "PLCRVotingCheckpoint.changeBallotExemptedVotersList" [ label = "changeBallotExemptedVotersList", color = "blue" ];
  "PLCRVotingCheckpoint.changeBallotExemptedVotersListMulti" [ label = "changeBallotExemptedVotersListMulti", color = "blue" ];
  "PLCRVotingCheckpoint._changeBallotExemptedVotersList" [ label = "_changeBallotExemptedVotersList" ];
  "PLCRVotingCheckpoint.isVoterAllowed" [ label = "isVoterAllowed" ];
  "PLCRVotingCheckpoint.changeBallotStatus" [ label = "changeBallotStatus", color = "blue" ];
  "PLCRVotingCheckpoint.getCurrentBallotStage" [ label = "getCurrentBallotStage" ];
  "PLCRVotingCheckpoint.getBallotResults" [ label = "getBallotResults", color = "blue" ];
  "PLCRVotingCheckpoint.getSelectedProposal" [ label = "getSelectedProposal", color = "blue" ];
  "PLCRVotingCheckpoint.getBallotDetails" [ label = "getBallotDetails", color = "blue" ];
  "PLCRVotingCheckpoint.getBallotCommitRevealDuration" [ label = "getBallotCommitRevealDuration", color = "blue" ];
  "PLCRVotingCheckpoint.getInitFunction" [ label = "getInitFunction", color = "blue" ];
  "PLCRVotingCheckpoint.getPermissions" [ label = "getPermissions", color = "blue" ];
  "PLCRVotingCheckpoint._validValueCheck" [ label = "_validValueCheck" ];
  "PLCRVotingCheckpoint._validBallotId" [ label = "_validBallotId" ];
}

subgraph "clusterPLCRVotingCheckpointFactory" {
  graph [ label = "PLCRVotingCheckpointFactory", color = "lightgray", style = "filled" ];
  "PLCRVotingCheckpointFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "PLCRVotingCheckpointFactory.deploy" [ label = "deploy", color = "blue" ];
  "PLCRVotingCheckpointFactory._initializeModule" [ label = "_initializeModule" ];
}

subgraph "clusterPLCRVotingCheckpointProxy" {
  graph [ label = "PLCRVotingCheckpointProxy", color = "lightgray", style = "filled" ];
  "PLCRVotingCheckpointProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "PLCRVotingCheckpointProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterPLCRVotingCheckpointStorage" {
  graph [ label = "PLCRVotingCheckpointStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterWeightedVoteCheckpoint" {
  graph [ label = "WeightedVoteCheckpoint", color = "lightgray", style = "filled" ];
  "WeightedVoteCheckpoint.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "WeightedVoteCheckpoint.getInitFunction" [ label = "getInitFunction", color = "blue" ];
  "WeightedVoteCheckpoint.createBallot" [ label = "createBallot", color = "blue" ];
  "WeightedVoteCheckpoint._createCustomBallot" [ label = "_createCustomBallot" ];
  "WeightedVoteCheckpoint.createCustomBallot" [ label = "createCustomBallot", color = "blue" ];
  "WeightedVoteCheckpoint.castVote" [ label = "castVote", color = "blue" ];
  "WeightedVoteCheckpoint.changeBallotExemptedVotersList" [ label = "changeBallotExemptedVotersList", color = "blue" ];
  "WeightedVoteCheckpoint.changeBallotExemptedVotersListMulti" [ label = "changeBallotExemptedVotersListMulti", color = "blue" ];
  "WeightedVoteCheckpoint._changeBallotExemptedVotersList" [ label = "_changeBallotExemptedVotersList" ];
  "WeightedVoteCheckpoint.isVoterAllowed" [ label = "isVoterAllowed" ];
  "WeightedVoteCheckpoint.changeBallotStatus" [ label = "changeBallotStatus", color = "blue" ];
  "WeightedVoteCheckpoint.getBallotResults" [ label = "getBallotResults", color = "blue" ];
  "WeightedVoteCheckpoint.getSelectedProposal" [ label = "getSelectedProposal", color = "blue" ];
  "WeightedVoteCheckpoint.getBallotDetails" [ label = "getBallotDetails", color = "blue" ];
  "WeightedVoteCheckpoint.getPermissions" [ label = "getPermissions", color = "green" ];
  "WeightedVoteCheckpoint._validBallotId" [ label = "_validBallotId" ];
}

subgraph "clusterWeightedVoteCheckpointFactory" {
  graph [ label = "WeightedVoteCheckpointFactory", color = "lightgray", style = "filled" ];
  "WeightedVoteCheckpointFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "WeightedVoteCheckpointFactory.deploy" [ label = "deploy", color = "blue" ];
  "WeightedVoteCheckpointFactory._initializeModule" [ label = "_initializeModule" ];
}

subgraph "clusterWeightedVoteCheckpointProxy" {
  graph [ label = "WeightedVoteCheckpointProxy", color = "lightgray", style = "filled" ];
  "WeightedVoteCheckpointProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "WeightedVoteCheckpointProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterWeightedVoteCheckpointStorage" {
  graph [ label = "WeightedVoteCheckpointStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterVotingCheckpoint" {
  graph [ label = "VotingCheckpoint", color = "lightgray", style = "filled" ];
  "VotingCheckpoint.changeDefaultExemptedVotersList" [ label = "changeDefaultExemptedVotersList", color = "blue" ];
  "VotingCheckpoint.changeDefaultExemptedVotersListMulti" [ label = "changeDefaultExemptedVotersListMulti", color = "blue" ];
  "VotingCheckpoint._changeDefaultExemptedVotersList" [ label = "_changeDefaultExemptedVotersList" ];
  "VotingCheckpoint.getDefaultExemptionVotersList" [ label = "getDefaultExemptionVotersList", color = "blue" ];
}

subgraph "clusterTrackedRedemption" {
  graph [ label = "TrackedRedemption", color = "lightgray", style = "filled" ];
  "TrackedRedemption.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "TrackedRedemption.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "TrackedRedemption.redeemTokens" [ label = "redeemTokens", color = "green" ];
  "TrackedRedemption.getPermissions" [ label = "getPermissions", color = "green" ];
}

subgraph "clusterTrackedRedemptionFactory" {
  graph [ label = "TrackedRedemptionFactory", color = "lightgray", style = "filled" ];
  "TrackedRedemptionFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "TrackedRedemptionFactory.deploy" [ label = "deploy", color = "blue" ];
  "TrackedRedemptionFactory._initializeModule" [ label = "_initializeModule" ];
}

subgraph "clusterScheduledCheckpoint" {
  graph [ label = "ScheduledCheckpoint", color = "lightgray", style = "filled" ];
  "ScheduledCheckpoint.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "ScheduledCheckpoint.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "ScheduledCheckpoint.addSchedule" [ label = "addSchedule", color = "blue" ];
  "ScheduledCheckpoint.removeSchedule" [ label = "removeSchedule", color = "blue" ];
  "ScheduledCheckpoint.executeTransfer" [ label = "executeTransfer", color = "blue" ];
  "ITransferManager.verifyTransfer" [ label = "verifyTransfer", color = "green" ];
  "ScheduledCheckpoint.getSchedule" [ label = "getSchedule", color = "blue" ];
  "ScheduledCheckpoint.update" [ label = "update", color = "blue" ];
  "ScheduledCheckpoint._update" [ label = "_update" ];
  "ScheduledCheckpoint.updateAll" [ label = "updateAll", color = "blue" ];
  "ScheduledCheckpoint._updateAll" [ label = "_updateAll" ];
  "ScheduledCheckpoint.getPermissions" [ label = "getPermissions", color = "blue" ];
  "ScheduledCheckpoint._onlySecurityTokenOwner" [ label = "_onlySecurityTokenOwner" ];
}

subgraph "clusterScheduledCheckpointFactory" {
  graph [ label = "ScheduledCheckpointFactory", color = "lightgray", style = "filled" ];
  "ScheduledCheckpointFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "ScheduledCheckpointFactory.deploy" [ label = "deploy", color = "blue" ];
  "ScheduledCheckpointFactory._initializeModule" [ label = "_initializeModule" ];
}

subgraph "clusterKYCTransferManager" {
  graph [ label = "KYCTransferManager", color = "lightgray", style = "filled" ];
  "KYCTransferManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "KYCTransferManager.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "KYCTransferManager.executeTransfer" [ label = "executeTransfer", color = "blue" ];
  "ITransferManager.verifyTransfer" [ label = "verifyTransfer", color = "green" ];
  "KYCTransferManager.modifyKYC" [ label = "modifyKYC", color = "green" ];
  "KYCTransferManager._modifyKYC" [ label = "_modifyKYC" ];
  "KYCTransferManager.getKYCAddresses" [ label = "getKYCAddresses", color = "green" ];
  "KYCTransferManager.checkKYC" [ label = "checkKYC" ];
  "KYCTransferManager._getKYCKey" [ label = "_getKYCKey" ];
  "KYCTransferManager.getPermissions" [ label = "getPermissions", color = "green" ];
  "KYCTransferManager.getDataStore" [ label = "getDataStore" ];
}

subgraph "clusterKYCTransferManagerFactory" {
  graph [ label = "KYCTransferManagerFactory", color = "lightgray", style = "filled" ];
  "KYCTransferManagerFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "KYCTransferManagerFactory.deploy" [ label = "deploy", color = "blue" ];
  "KYCTransferManagerFactory._initializeModule" [ label = "_initializeModule" ];
}

subgraph "clusterSignedTransferManager" {
  graph [ label = "SignedTransferManager", color = "lightgray", style = "filled" ];
  "SignedTransferManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "SignedTransferManager.getInitFunction" [ label = "getInitFunction", color = "blue" ];
  "SignedTransferManager.checkSignatureValidity" [ label = "checkSignatureValidity", color = "blue" ];
  "SignedTransferManager.checkSigner" [ label = "checkSigner", color = "blue" ];
  "SignedTransferManager.executeTransfer" [ label = "executeTransfer", color = "blue" ];
  "ITransferManager.verifyTransfer" [ label = "verifyTransfer", color = "green" ];
  "SignedTransferManager.invalidateSignature" [ label = "invalidateSignature", color = "blue" ];
  "SignedTransferManager.getPermissions" [ label = "getPermissions", color = "green" ];
  "SignedTransferManager._checkSignatureIsInvalid" [ label = "_checkSignatureIsInvalid" ];
  "SignedTransferManager._checkSigner" [ label = "_checkSigner" ];
  "SignedTransferManager._invalidateSignature" [ label = "_invalidateSignature" ];
  "SignedTransferManager.getDataStore" [ label = "getDataStore" ];
  "SignedTransferManager._checkPerm" [ label = "_checkPerm" ];
}

subgraph "clusterSignedTransferManagerFactory" {
  graph [ label = "SignedTransferManagerFactory", color = "lightgray", style = "filled" ];
  "SignedTransferManagerFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "SignedTransferManagerFactory.deploy" [ label = "deploy", color = "blue" ];
  "SignedTransferManagerFactory._initializeModule" [ label = "_initializeModule" ];
}

subgraph "clusterModule" {
  graph [ label = "Module", color = "lightgray", style = "filled" ];
  "Module.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "Module.withPerm" [ label = "withPerm", color = "yellow" ];
  "Module._checkPerm" [ label = "_checkPerm" ];
  "Module._onlySecurityTokenOwner" [ label = "_onlySecurityTokenOwner", color = "white" ];
  "Module.onlyFactory" [ label = "onlyFactory", color = "yellow" ];
  "Module.onlyFactoryOwner" [ label = "onlyFactoryOwner", color = "yellow" ];
  "Module.onlyFactoryOrOwner" [ label = "onlyFactoryOrOwner", color = "yellow" ];
  "Module.pause" [ label = "pause", color = "green" ];
  "Module.unpause" [ label = "unpause", color = "green" ];
  "Module.takeUsageFee" [ label = "takeUsageFee", color = "green" ];
  "Module.getDataStore" [ label = "getDataStore", color = "green" ];
  "Module.reclaimERC20" [ label = "reclaimERC20", color = "blue" ];
  "Module.reclaimETH" [ label = "reclaimETH", color = "blue" ];
}

subgraph "clusterModuleFactory" {
  graph [ label = "ModuleFactory", color = "lightgray", style = "filled" ];
  "ModuleFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "IModuleFactory.types" [ label = "types", color = "blue" ];
  "IModuleFactory.tags" [ label = "tags", color = "blue" ];
  "ModuleFactory.version" [ label = "version", color = "blue" ];
  "ModuleFactory.changeSetupCost" [ label = "changeSetupCost", color = "green" ];
  "ModuleFactory.changeUsageCost" [ label = "changeUsageCost", color = "green" ];
  "ModuleFactory.changeCostsAndType" [ label = "changeCostsAndType", color = "green" ];
  "ModuleFactory.changeTitle" [ label = "changeTitle", color = "green" ];
  "ModuleFactory.changeDescription" [ label = "changeDescription", color = "green" ];
  "ModuleFactory.changeName" [ label = "changeName", color = "green" ];
  "ModuleFactory.changeTags" [ label = "changeTags", color = "green" ];
  "ModuleFactory.changeSTVersionBounds" [ label = "changeSTVersionBounds", color = "blue" ];
  "IModuleFactory.lowerSTVersionBounds" [ label = "lowerSTVersionBounds", color = "blue" ];
  "IModuleFactory.upperSTVersionBounds" [ label = "upperSTVersionBounds", color = "blue" ];
  "ModuleFactory.setupCostInPoly" [ label = "setupCostInPoly", color = "green" ];
  "IModuleFactory.usageCostInPoly" [ label = "usageCostInPoly", color = "green" ];
  "ModuleFactory._takeFee" [ label = "_takeFee", color = "white" ];
  "ModuleFactory._initializeModule" [ label = "_initializeModule", color = "white" ];
}

subgraph "clusterGeneralPermissionManager" {
  graph [ label = "GeneralPermissionManager", color = "lightgray", style = "filled" ];
  "GeneralPermissionManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "GeneralPermissionManager.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "GeneralPermissionManager.checkPermission" [ label = "checkPermission", color = "blue" ];
  "GeneralPermissionManager.addDelegate" [ label = "addDelegate", color = "blue" ];
  "GeneralPermissionManager.deleteDelegate" [ label = "deleteDelegate", color = "blue" ];
  "IPermissionManager.checkDelegate" [ label = "checkDelegate", color = "blue" ];
  "GeneralPermissionManager.changePermission" [ label = "changePermission", color = "green" ];
  "GeneralPermissionManager.changePermissionMulti" [ label = "changePermissionMulti", color = "green" ];
  "GeneralPermissionManager.getAllDelegatesWithPerm" [ label = "getAllDelegatesWithPerm", color = "blue" ];
  "GeneralPermissionManager.getAllModulesAndPermsFromTypes" [ label = "getAllModulesAndPermsFromTypes", color = "blue" ];
  "GeneralPermissionManager._changePermission" [ label = "_changePermission" ];
  "GeneralPermissionManager.getAllDelegates" [ label = "getAllDelegates", color = "blue" ];
  "GeneralPermissionManager.getPermissions" [ label = "getPermissions", color = "green" ];
}

subgraph "clusterGeneralPermissionManagerFactory" {
  graph [ label = "GeneralPermissionManagerFactory", color = "lightgray", style = "filled" ];
  "GeneralPermissionManagerFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "GeneralPermissionManagerFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterGeneralPermissionManagerProxy" {
  graph [ label = "GeneralPermissionManagerProxy", color = "lightgray", style = "filled" ];
  "GeneralPermissionManagerProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "GeneralPermissionManagerProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterGeneralPermissionManagerStorage" {
  graph [ label = "GeneralPermissionManagerStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterIPermissionManager" {
  graph [ label = "IPermissionManager", color = "lightgray", style = "filled" ];
  "IPermissionManager.checkDelegate" [ label = "checkDelegate", color = "blue" ];
  "IPermissionManager.checkPermission" [ label = "checkPermission" ];
  "IPermissionManager.addDelegate" [ label = "addDelegate", color = "blue" ];
  "IPermissionManager.deleteDelegate" [ label = "deleteDelegate", color = "blue" ];
  "IPermissionManager.changePermission" [ label = "changePermission", color = "blue" ];
  "IPermissionManager.changePermissionMulti" [ label = "changePermissionMulti", color = "blue" ];
  "IPermissionManager.getAllDelegatesWithPerm" [ label = "getAllDelegatesWithPerm", color = "blue" ];
  "IPermissionManager.getAllModulesAndPermsFromTypes" [ label = "getAllModulesAndPermsFromTypes", color = "blue" ];
  "IPermissionManager.getPermissions" [ label = "getPermissions", color = "blue" ];
  "IPermissionManager.getAllDelegates" [ label = "getAllDelegates", color = "blue" ];
}

subgraph "clusterCappedSTO" {
  graph [ label = "CappedSTO", color = "lightgray", style = "filled" ];
  "CappedSTO.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "CappedSTO.<Fallback>" [ label = "<Fallback>", color = "blue" ];
  "CappedSTO.configure" [ label = "configure", color = "green" ];
  "CappedSTO.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "CappedSTO.changeAllowBeneficialInvestments" [ label = "changeAllowBeneficialInvestments", color = "green" ];
  "CappedSTO.buyTokens" [ label = "buyTokens" ];
  "CappedSTO.buyTokensWithPoly" [ label = "buyTokensWithPoly", color = "green" ];
  "CappedSTO.capReached" [ label = "capReached", color = "green" ];
  "CappedSTO.getTokensSold" [ label = "getTokensSold", color = "blue" ];
  "IModule.getPermissions" [ label = "getPermissions", color = "green" ];
  "CappedSTO.getSTODetails" [ label = "getSTODetails", color = "green" ];
  "CappedSTO._processTx" [ label = "_processTx" ];
  "CappedSTO._preValidatePurchase" [ label = "_preValidatePurchase" ];
  "CappedSTO._deliverTokens" [ label = "_deliverTokens", color = "white" ];
  "CappedSTO._processPurchase" [ label = "_processPurchase" ];
  "CappedSTO._getTokenAmount" [ label = "_getTokenAmount" ];
  "CappedSTO._forwardFunds" [ label = "_forwardFunds" ];
  "CappedSTO._forwardPoly" [ label = "_forwardPoly" ];
  "CappedSTO._setFundRaiseType" [ label = "_setFundRaiseType" ];
  "CappedSTO._canBuy" [ label = "_canBuy" ];
}

subgraph "clusterCappedSTOFactory" {
  graph [ label = "CappedSTOFactory", color = "lightgray", style = "filled" ];
  "CappedSTOFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "CappedSTOFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterCappedSTOProxy" {
  graph [ label = "CappedSTOProxy", color = "lightgray", style = "filled" ];
  "CappedSTOProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "CappedSTOProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterCappedSTOStorage" {
  graph [ label = "CappedSTOStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterPreSaleSTO" {
  graph [ label = "PreSaleSTO", color = "lightgray", style = "filled" ];
  "PreSaleSTO.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "PreSaleSTO.configure" [ label = "configure", color = "green" ];
  "PreSaleSTO.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "PreSaleSTO.getNumberInvestors" [ label = "getNumberInvestors", color = "green" ];
  "PreSaleSTO.getTokensSold" [ label = "getTokensSold", color = "blue" ];
  "IModule.getPermissions" [ label = "getPermissions", color = "green" ];
  "PreSaleSTO.allocateTokens" [ label = "allocateTokens", color = "green" ];
  "PreSaleSTO.allocateTokensMulti" [ label = "allocateTokensMulti", color = "green" ];
  "PreSaleSTO._canBuy" [ label = "_canBuy" ];
}

subgraph "clusterPreSaleSTOFactory" {
  graph [ label = "PreSaleSTOFactory", color = "lightgray", style = "filled" ];
  "PreSaleSTOFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "PreSaleSTOFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterPreSaleSTOProxy" {
  graph [ label = "PreSaleSTOProxy", color = "lightgray", style = "filled" ];
  "PreSaleSTOProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "PreSaleSTOProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterPreSaleSTOStorage" {
  graph [ label = "PreSaleSTOStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterSTO" {
  graph [ label = "STO", color = "lightgray", style = "filled" ];
  "STO.getRaised" [ label = "getRaised", color = "green" ];
  "STO.getTokensSold" [ label = "getTokensSold", color = "blue" ];
  "Module.pause" [ label = "pause", color = "green" ];
  "STO._setFundRaiseType" [ label = "_setFundRaiseType", color = "white" ];
  "STO._canBuy" [ label = "_canBuy", color = "white" ];
  "STO._getKey" [ label = "_getKey" ];
}

subgraph "clusterUSDTieredSTO" {
  graph [ label = "USDTieredSTO", color = "lightgray", style = "filled" ];
  "USDTieredSTO.validETH" [ label = "validETH", color = "yellow" ];
  "USDTieredSTO.validPOLY" [ label = "validPOLY", color = "yellow" ];
  "USDTieredSTO.validSC" [ label = "validSC", color = "yellow" ];
  "USDTieredSTO.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "USDTieredSTO.configure" [ label = "configure", color = "green" ];
  "USDTieredSTO.modifyFunding" [ label = "modifyFunding", color = "blue" ];
  "USDTieredSTO.modifyLimits" [ label = "modifyLimits", color = "blue" ];
  "USDTieredSTO.modifyTiers" [ label = "modifyTiers", color = "blue" ];
  "USDTieredSTO.modifyTimes" [ label = "modifyTimes", color = "blue" ];
  "USDTieredSTO._isSTOStarted" [ label = "_isSTOStarted" ];
  "USDTieredSTO.modifyAddresses" [ label = "modifyAddresses", color = "blue" ];
  "USDTieredSTO._modifyLimits" [ label = "_modifyLimits" ];
  "USDTieredSTO._modifyTiers" [ label = "_modifyTiers" ];
  "USDTieredSTO._modifyTimes" [ label = "_modifyTimes" ];
  "USDTieredSTO._modifyAddresses" [ label = "_modifyAddresses" ];
  "USDTieredSTO._modifyUSDTokens" [ label = "_modifyUSDTokens" ];
  "USDTieredSTO.finalize" [ label = "finalize", color = "blue" ];
  "USDTieredSTO.changeNonAccreditedLimit" [ label = "changeNonAccreditedLimit", color = "blue" ];
  "USDTieredSTO.getAccreditedData" [ label = "getAccreditedData", color = "blue" ];
  "USDTieredSTO.changeAllowBeneficialInvestments" [ label = "changeAllowBeneficialInvestments", color = "blue" ];
  "USDTieredSTO.<Fallback>" [ label = "<Fallback>", color = "blue" ];
  "USDTieredSTO.buyWithETH" [ label = "buyWithETH", color = "blue" ];
  "USDTieredSTO.buyWithPOLY" [ label = "buyWithPOLY", color = "blue" ];
  "USDTieredSTO.buyWithUSD" [ label = "buyWithUSD", color = "blue" ];
  "USDTieredSTO.buyWithETHRateLimited" [ label = "buyWithETHRateLimited" ];
  "USDTieredSTO.buyWithPOLYRateLimited" [ label = "buyWithPOLYRateLimited" ];
  "USDTieredSTO.buyWithUSDRateLimited" [ label = "buyWithUSDRateLimited" ];
  "USDTieredSTO._buyWithTokens" [ label = "_buyWithTokens" ];
  "USDTieredSTO._getSpentvalues" [ label = "_getSpentvalues" ];
  "USDTieredSTO._buyTokens" [ label = "_buyTokens" ];
  "USDTieredSTO._buyTokensChecks" [ label = "_buyTokensChecks" ];
  "USDTieredSTO._calculateTier" [ label = "_calculateTier" ];
  "USDTieredSTO._purchaseTier" [ label = "_purchaseTier" ];
  "USDTieredSTO._isAccredited" [ label = "_isAccredited" ];
  "USDTieredSTO._getIsAccredited" [ label = "_getIsAccredited" ];
  "USDTieredSTO.isOpen" [ label = "isOpen" ];
  "USDTieredSTO.capReached" [ label = "capReached" ];
  "USDTieredSTO.getRate" [ label = "getRate" ];
  "USDTieredSTO.convertToUSD" [ label = "convertToUSD", color = "green" ];
  "USDTieredSTO.convertFromUSD" [ label = "convertFromUSD", color = "green" ];
  "USDTieredSTO.getTokensSold" [ label = "getTokensSold", color = "green" ];
  "USDTieredSTO.getTokensMinted" [ label = "getTokensMinted" ];
  "USDTieredSTO.getTokensSoldFor" [ label = "getTokensSoldFor", color = "blue" ];
  "USDTieredSTO.getTokensMintedByTier" [ label = "getTokensMintedByTier", color = "blue" ];
  "USDTieredSTO.getTokensSoldByTier" [ label = "getTokensSoldByTier", color = "blue" ];
  "USDTieredSTO.getNumberOfTiers" [ label = "getNumberOfTiers", color = "blue" ];
  "USDTieredSTO.getUsdTokens" [ label = "getUsdTokens", color = "blue" ];
  "IModule.getPermissions" [ label = "getPermissions", color = "green" ];
  "USDTieredSTO.getSTODetails" [ label = "getSTODetails", color = "blue" ];
  "USDTieredSTO.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "USDTieredSTO._getOracle" [ label = "_getOracle" ];
  "USDTieredSTO._setFundRaiseType" [ label = "_setFundRaiseType" ];
}

subgraph "clusterUSDTieredSTOFactory" {
  graph [ label = "USDTieredSTOFactory", color = "lightgray", style = "filled" ];
  "USDTieredSTOFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "USDTieredSTOFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterUSDTieredSTOProxy" {
  graph [ label = "USDTieredSTOProxy", color = "lightgray", style = "filled" ];
  "USDTieredSTOProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "USDTieredSTOProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterUSDTieredSTOStorage" {
  graph [ label = "USDTieredSTOStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterBlacklistTransferManager" {
  graph [ label = "BlacklistTransferManager", color = "lightgray", style = "filled" ];
  "BlacklistTransferManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "BlacklistTransferManager.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "BlacklistTransferManager.executeTransfer" [ label = "executeTransfer", color = "blue" ];
  "ITransferManager.verifyTransfer" [ label = "verifyTransfer", color = "green" ];
  "BlacklistTransferManager._verifyTransfer" [ label = "_verifyTransfer" ];
  "BlacklistTransferManager.addBlacklistType" [ label = "addBlacklistType", color = "green" ];
  "BlacklistTransferManager._addBlacklistType" [ label = "_addBlacklistType" ];
  "BlacklistTransferManager._addBlacklistTypeDetails" [ label = "_addBlacklistTypeDetails" ];
  "BlacklistTransferManager.addBlacklistTypeMulti" [ label = "addBlacklistTypeMulti", color = "green" ];
  "BlacklistTransferManager.modifyBlacklistType" [ label = "modifyBlacklistType", color = "green" ];
  "BlacklistTransferManager._modifyBlacklistType" [ label = "_modifyBlacklistType" ];
  "BlacklistTransferManager.modifyBlacklistTypeMulti" [ label = "modifyBlacklistTypeMulti", color = "green" ];
  "BlacklistTransferManager.deleteBlacklistType" [ label = "deleteBlacklistType", color = "green" ];
  "BlacklistTransferManager._deleteBlacklistType" [ label = "_deleteBlacklistType" ];
  "BlacklistTransferManager.deleteBlacklistTypeMulti" [ label = "deleteBlacklistTypeMulti", color = "green" ];
  "BlacklistTransferManager.addInvestorToBlacklist" [ label = "addInvestorToBlacklist", color = "green" ];
  "BlacklistTransferManager._addInvestorToBlacklist" [ label = "_addInvestorToBlacklist" ];
  "BlacklistTransferManager.addInvestorToBlacklistMulti" [ label = "addInvestorToBlacklistMulti", color = "green" ];
  "BlacklistTransferManager.addMultiInvestorToBlacklistMulti" [ label = "addMultiInvestorToBlacklistMulti", color = "green" ];
  "BlacklistTransferManager.addInvestorToNewBlacklist" [ label = "addInvestorToNewBlacklist", color = "green" ];
  "BlacklistTransferManager.deleteInvestorFromBlacklist" [ label = "deleteInvestorFromBlacklist", color = "green" ];
  "BlacklistTransferManager._deleteInvestorFromBlacklist" [ label = "_deleteInvestorFromBlacklist" ];
  "BlacklistTransferManager.deleteInvestorFromAllBlacklist" [ label = "deleteInvestorFromAllBlacklist", color = "green" ];
  "BlacklistTransferManager._deleteInvestorFromAllBlacklist" [ label = "_deleteInvestorFromAllBlacklist" ];
  "BlacklistTransferManager.deleteInvestorFromAllBlacklistMulti" [ label = "deleteInvestorFromAllBlacklistMulti", color = "green" ];
  "BlacklistTransferManager.deleteMultiInvestorsFromBlacklistMulti" [ label = "deleteMultiInvestorsFromBlacklistMulti", color = "green" ];
  "BlacklistTransferManager._validParams" [ label = "_validParams" ];
  "BlacklistTransferManager.getListOfAddresses" [ label = "getListOfAddresses", color = "blue" ];
  "BlacklistTransferManager.getBlacklistNamesToUser" [ label = "getBlacklistNamesToUser", color = "blue" ];
  "BlacklistTransferManager.getAllBlacklists" [ label = "getAllBlacklists", color = "blue" ];
  "BlacklistTransferManager.getTokensByPartition" [ label = "getTokensByPartition", color = "blue" ];
  "IModule.getPermissions" [ label = "getPermissions", color = "green" ];
}

subgraph "clusterBlacklistTransferManagerFactory" {
  graph [ label = "BlacklistTransferManagerFactory", color = "lightgray", style = "filled" ];
  "BlacklistTransferManagerFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "BlacklistTransferManagerFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterBlacklistTransferManagerProxy" {
  graph [ label = "BlacklistTransferManagerProxy", color = "lightgray", style = "filled" ];
  "BlacklistTransferManagerProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "BlacklistTransferManagerProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterBlacklistTransferManagerStorage" {
  graph [ label = "BlacklistTransferManagerStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterCountTransferManager" {
  graph [ label = "CountTransferManager", color = "lightgray", style = "filled" ];
  "CountTransferManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "CountTransferManager.executeTransfer" [ label = "executeTransfer", color = "blue" ];
  "ITransferManager.verifyTransfer" [ label = "verifyTransfer", color = "green" ];
  "CountTransferManager._verifyTransfer" [ label = "_verifyTransfer" ];
  "CountTransferManager.configure" [ label = "configure", color = "green" ];
  "CountTransferManager.changeHolderCount" [ label = "changeHolderCount", color = "green" ];
  "CountTransferManager.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "IModule.getPermissions" [ label = "getPermissions", color = "green" ];
}

subgraph "clusterCountTransferManagerFactory" {
  graph [ label = "CountTransferManagerFactory", color = "lightgray", style = "filled" ];
  "CountTransferManagerFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "CountTransferManagerFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterCountTransferManagerProxy" {
  graph [ label = "CountTransferManagerProxy", color = "lightgray", style = "filled" ];
  "CountTransferManagerProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "CountTransferManagerProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterCountTransferManagerStorage" {
  graph [ label = "CountTransferManagerStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterGeneralTransferManager" {
  graph [ label = "GeneralTransferManager", color = "lightgray", style = "filled" ];
  "GeneralTransferManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "GeneralTransferManager.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "GeneralTransferManager.changeDefaults" [ label = "changeDefaults", color = "green" ];
  "GeneralTransferManager.changeIssuanceAddress" [ label = "changeIssuanceAddress", color = "green" ];
  "GeneralTransferManager.executeTransfer" [ label = "executeTransfer", color = "blue" ];
  "GeneralTransferManager._processTransferSignature" [ label = "_processTransferSignature" ];
  "ITransferManager.verifyTransfer" [ label = "verifyTransfer", color = "green" ];
  "GeneralTransferManager._verifyTransfer" [ label = "_verifyTransfer" ];
  "GeneralTransferManager.modifyTransferRequirements" [ label = "modifyTransferRequirements", color = "green" ];
  "GeneralTransferManager.modifyTransferRequirementsMulti" [ label = "modifyTransferRequirementsMulti", color = "green" ];
  "GeneralTransferManager._modifyTransferRequirements" [ label = "_modifyTransferRequirements" ];
  "GeneralTransferManager.modifyKYCData" [ label = "modifyKYCData", color = "green" ];
  "GeneralTransferManager._modifyKYCData" [ label = "_modifyKYCData" ];
  "GeneralTransferManager.modifyKYCDataMulti" [ label = "modifyKYCDataMulti", color = "green" ];
  "GeneralTransferManager.modifyInvestorFlag" [ label = "modifyInvestorFlag", color = "green" ];
  "GeneralTransferManager._modifyInvestorFlag" [ label = "_modifyInvestorFlag" ];
  "GeneralTransferManager.modifyInvestorFlagMulti" [ label = "modifyInvestorFlagMulti", color = "green" ];
  "GeneralTransferManager.modifyKYCDataSigned" [ label = "modifyKYCDataSigned", color = "green" ];
  "GeneralTransferManager._modifyKYCDataSigned" [ label = "_modifyKYCDataSigned" ];
  "GeneralTransferManager.modifyKYCDataSignedMulti" [ label = "modifyKYCDataSignedMulti", color = "green" ];
  "GeneralTransferManager._modifyKYCDataSignedMulti" [ label = "_modifyKYCDataSignedMulti" ];
  "GeneralTransferManager._checkSig" [ label = "_checkSig" ];
  "GeneralTransferManager._validExpiry" [ label = "_validExpiry" ];
  "GeneralTransferManager._validLockTime" [ label = "_validLockTime" ];
  "GeneralTransferManager._adjustTimes" [ label = "_adjustTimes" ];
  "GeneralTransferManager._getKey" [ label = "_getKey" ];
  "GeneralTransferManager._getKYCValues" [ label = "_getKYCValues", color = "white" ];
  "GeneralTransferManager._isExistingInvestor" [ label = "_isExistingInvestor" ];
  "GeneralTransferManager._getValuesForTransfer" [ label = "_getValuesForTransfer" ];
  "GeneralTransferManager.getAllInvestors" [ label = "getAllInvestors", color = "green" ];
  "GeneralTransferManager.getInvestors" [ label = "getInvestors", color = "green" ];
  "GeneralTransferManager.getAllInvestorFlags" [ label = "getAllInvestorFlags", color = "green" ];
  "GeneralTransferManager.getInvestorFlag" [ label = "getInvestorFlag", color = "green" ];
  "GeneralTransferManager.getInvestorFlags" [ label = "getInvestorFlags", color = "green" ];
  "GeneralTransferManager._getInvestorFlags" [ label = "_getInvestorFlags" ];
  "GeneralTransferManager.getAllKYCData" [ label = "getAllKYCData", color = "blue" ];
  "GeneralTransferManager.getKYCData" [ label = "getKYCData", color = "blue" ];
  "GeneralTransferManager._kycData" [ label = "_kycData" ];
  "IModule.getPermissions" [ label = "getPermissions", color = "green" ];
  "GeneralTransferManager.getTokensByPartition" [ label = "getTokensByPartition", color = "blue" ];
  "GeneralTransferManager.getAddressBytes32" [ label = "getAddressBytes32" ];
}

subgraph "clusterGeneralTransferManagerFactory" {
  graph [ label = "GeneralTransferManagerFactory", color = "lightgray", style = "filled" ];
  "GeneralTransferManagerFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "GeneralTransferManagerFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterGeneralTransferManagerProxy" {
  graph [ label = "GeneralTransferManagerProxy", color = "lightgray", style = "filled" ];
  "GeneralTransferManagerProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "GeneralTransferManagerProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterGeneralTransferManagerStorage" {
  graph [ label = "GeneralTransferManagerStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterLockUpTransferManager" {
  graph [ label = "LockUpTransferManager", color = "lightgray", style = "filled" ];
  "LockUpTransferManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "LockUpTransferManager.executeTransfer" [ label = "executeTransfer", color = "blue" ];
  "ITransferManager.verifyTransfer" [ label = "verifyTransfer", color = "green" ];
  "LockUpTransferManager._verifyTransfer" [ label = "_verifyTransfer" ];
  "LockUpTransferManager.addNewLockUpType" [ label = "addNewLockUpType", color = "blue" ];
  "LockUpTransferManager.addNewLockUpTypeMulti" [ label = "addNewLockUpTypeMulti", color = "green" ];
  "LockUpTransferManager.addLockUpByName" [ label = "addLockUpByName", color = "blue" ];
  "LockUpTransferManager.addLockUpByNameMulti" [ label = "addLockUpByNameMulti", color = "green" ];
  "LockUpTransferManager.addNewLockUpToUser" [ label = "addNewLockUpToUser", color = "blue" ];
  "LockUpTransferManager.addNewLockUpToUserMulti" [ label = "addNewLockUpToUserMulti", color = "green" ];
  "LockUpTransferManager.removeLockUpFromUser" [ label = "removeLockUpFromUser", color = "blue" ];
  "LockUpTransferManager.removeLockupType" [ label = "removeLockupType", color = "blue" ];
  "LockUpTransferManager.removeLockupTypeMulti" [ label = "removeLockupTypeMulti", color = "green" ];
  "LockUpTransferManager.removeLockUpFromUserMulti" [ label = "removeLockUpFromUserMulti", color = "green" ];
  "LockUpTransferManager.modifyLockUpType" [ label = "modifyLockUpType", color = "blue" ];
  "LockUpTransferManager.modifyLockUpTypeMulti" [ label = "modifyLockUpTypeMulti", color = "green" ];
  "LockUpTransferManager.getLockUp" [ label = "getLockUp", color = "green" ];
  "LockUpTransferManager.getAllLockupData" [ label = "getAllLockupData", color = "blue" ];
  "LockUpTransferManager.getListOfAddresses" [ label = "getListOfAddresses", color = "blue" ];
  "LockUpTransferManager.getAllLockups" [ label = "getAllLockups", color = "blue" ];
  "LockUpTransferManager.getLockupsNamesToUser" [ label = "getLockupsNamesToUser", color = "blue" ];
  "LockUpTransferManager.getLockedTokenToUser" [ label = "getLockedTokenToUser", color = "green" ];
  "LockUpTransferManager._checkIfValidTransfer" [ label = "_checkIfValidTransfer" ];
  "LockUpTransferManager._getUnlockedAmountForLockup" [ label = "_getUnlockedAmountForLockup" ];
  "LockUpTransferManager._removeLockupType" [ label = "_removeLockupType" ];
  "LockUpTransferManager._modifyLockUpType" [ label = "_modifyLockUpType" ];
  "LockUpTransferManager._removeLockUpFromUser" [ label = "_removeLockUpFromUser" ];
  "LockUpTransferManager._addNewLockUpToUser" [ label = "_addNewLockUpToUser" ];
  "LockUpTransferManager._addLockUpByName" [ label = "_addLockUpByName" ];
  "LockUpTransferManager._addNewLockUpType" [ label = "_addNewLockUpType" ];
  "LockUpTransferManager._checkLockUpParams" [ label = "_checkLockUpParams" ];
  "LockUpTransferManager._checkValidStartTime" [ label = "_checkValidStartTime" ];
  "LockUpTransferManager._checkZeroAddress" [ label = "_checkZeroAddress" ];
  "LockUpTransferManager._validLockUpCheck" [ label = "_validLockUpCheck" ];
  "LockUpTransferManager._checkValidName" [ label = "_checkValidName" ];
  "LockUpTransferManager._checkLengthOfArray" [ label = "_checkLengthOfArray" ];
  "LockUpTransferManager.getTokensByPartition" [ label = "getTokensByPartition", color = "blue" ];
  "LockUpTransferManager.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "IModule.getPermissions" [ label = "getPermissions", color = "green" ];
}

subgraph "clusterLockUpTransferManagerFactory" {
  graph [ label = "LockUpTransferManagerFactory", color = "lightgray", style = "filled" ];
  "LockUpTransferManagerFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "LockUpTransferManagerFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterLockUpTransferManagerProxy" {
  graph [ label = "LockUpTransferManagerProxy", color = "lightgray", style = "filled" ];
  "LockUpTransferManagerProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "LockUpTransferManagerProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterLockUpTransferManagerStorage" {
  graph [ label = "LockUpTransferManagerStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterManualApprovalTransferManager" {
  graph [ label = "ManualApprovalTransferManager", color = "lightgray", style = "filled" ];
  "ManualApprovalTransferManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "ManualApprovalTransferManager.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "ManualApprovalTransferManager.executeTransfer" [ label = "executeTransfer", color = "blue" ];
  "ITransferManager.verifyTransfer" [ label = "verifyTransfer", color = "green" ];
  "ManualApprovalTransferManager._verifyTransfer" [ label = "_verifyTransfer" ];
  "ManualApprovalTransferManager.addManualApproval" [ label = "addManualApproval", color = "blue" ];
  "ManualApprovalTransferManager._addManualApproval" [ label = "_addManualApproval" ];
  "ManualApprovalTransferManager.addManualApprovalMulti" [ label = "addManualApprovalMulti", color = "green" ];
  "ManualApprovalTransferManager.modifyManualApproval" [ label = "modifyManualApproval", color = "blue" ];
  "ManualApprovalTransferManager._modifyManualApproval" [ label = "_modifyManualApproval" ];
  "ManualApprovalTransferManager.modifyManualApprovalMulti" [ label = "modifyManualApprovalMulti", color = "green" ];
  "ManualApprovalTransferManager.revokeManualApproval" [ label = "revokeManualApproval", color = "blue" ];
  "ManualApprovalTransferManager._revokeManualApproval" [ label = "_revokeManualApproval" ];
  "ManualApprovalTransferManager.revokeManualApprovalMulti" [ label = "revokeManualApprovalMulti", color = "blue" ];
  "ManualApprovalTransferManager._checkInputLengthArray" [ label = "_checkInputLengthArray" ];
  "ManualApprovalTransferManager.getActiveApprovalsToUser" [ label = "getActiveApprovalsToUser", color = "blue" ];
  "ManualApprovalTransferManager.getApprovalDetails" [ label = "getApprovalDetails", color = "blue" ];
  "ManualApprovalTransferManager.getTotalApprovalsLength" [ label = "getTotalApprovalsLength", color = "blue" ];
  "ManualApprovalTransferManager.getAllApprovals" [ label = "getAllApprovals", color = "blue" ];
  "IModule.getPermissions" [ label = "getPermissions", color = "green" ];
}

subgraph "clusterManualApprovalTransferManagerFactory" {
  graph [ label = "ManualApprovalTransferManagerFactory", color = "lightgray", style = "filled" ];
  "ManualApprovalTransferManagerFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "ManualApprovalTransferManagerFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterManualApprovalTransferManagerProxy" {
  graph [ label = "ManualApprovalTransferManagerProxy", color = "lightgray", style = "filled" ];
  "ManualApprovalTransferManagerProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "ManualApprovalTransferManagerProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterManualApprovalTransferManagerStorage" {
  graph [ label = "ManualApprovalTransferManagerStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterPercentageTransferManager" {
  graph [ label = "PercentageTransferManager", color = "lightgray", style = "filled" ];
  "PercentageTransferManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "PercentageTransferManager.executeTransfer" [ label = "executeTransfer", color = "blue" ];
  "ITransferManager.verifyTransfer" [ label = "verifyTransfer", color = "green" ];
  "PercentageTransferManager._verifyTransfer" [ label = "_verifyTransfer" ];
  "PercentageTransferManager.configure" [ label = "configure", color = "green" ];
  "PercentageTransferManager.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "PercentageTransferManager.changeHolderPercentage" [ label = "changeHolderPercentage", color = "green" ];
  "PercentageTransferManager.modifyWhitelist" [ label = "modifyWhitelist" ];
  "PercentageTransferManager.modifyWhitelistMulti" [ label = "modifyWhitelistMulti", color = "green" ];
  "PercentageTransferManager.setAllowPrimaryIssuance" [ label = "setAllowPrimaryIssuance", color = "green" ];
  "IModule.getPermissions" [ label = "getPermissions", color = "green" ];
}

subgraph "clusterPercentageTransferManagerFactory" {
  graph [ label = "PercentageTransferManagerFactory", color = "lightgray", style = "filled" ];
  "PercentageTransferManagerFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "PercentageTransferManagerFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterPercentageTransferManagerProxy" {
  graph [ label = "PercentageTransferManagerProxy", color = "lightgray", style = "filled" ];
  "PercentageTransferManagerProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "PercentageTransferManagerProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterPercentageTransferManagerStorage" {
  graph [ label = "PercentageTransferManagerStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterTransferManager" {
  graph [ label = "TransferManager", color = "lightgray", style = "filled" ];
  "TransferManager.onlySecurityToken" [ label = "onlySecurityToken", color = "yellow" ];
  "Module.unpause" [ label = "unpause", color = "green" ];
  "Module.pause" [ label = "pause", color = "green" ];
  "TransferManager.getTokensByPartition" [ label = "getTokensByPartition", color = "blue" ];
  "TransferManager.getPartitions" [ label = "getPartitions", color = "blue" ];
}

subgraph "clusterVolumeRestrictionTM" {
  graph [ label = "VolumeRestrictionTM", color = "lightgray", style = "filled" ];
  "VolumeRestrictionTM.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "VolumeRestrictionTM.executeTransfer" [ label = "executeTransfer", color = "blue" ];
  "ITransferManager.verifyTransfer" [ label = "verifyTransfer", color = "green" ];
  "VolumeRestrictionTM._verifyTransfer" [ label = "_verifyTransfer" ];
  "VolumeRestrictionTM.changeExemptWalletList" [ label = "changeExemptWalletList", color = "green" ];
  "VolumeRestrictionTM.addIndividualRestriction" [ label = "addIndividualRestriction", color = "green" ];
  "VolumeRestrictionTM.addIndividualDailyRestriction" [ label = "addIndividualDailyRestriction", color = "green" ];
  "VolumeRestrictionTM.addIndividualDailyRestrictionMulti" [ label = "addIndividualDailyRestrictionMulti", color = "green" ];
  "VolumeRestrictionTM.addIndividualRestrictionMulti" [ label = "addIndividualRestrictionMulti", color = "green" ];
  "VolumeRestrictionTM.addDefaultRestriction" [ label = "addDefaultRestriction", color = "blue" ];
  "VolumeRestrictionTM.addDefaultDailyRestriction" [ label = "addDefaultDailyRestriction", color = "blue" ];
  "VolumeRestrictionTM.removeIndividualRestriction" [ label = "removeIndividualRestriction" ];
  "VolumeRestrictionTM._removeIndividualRestriction" [ label = "_removeIndividualRestriction" ];
  "VolumeRestrictionTM.removeIndividualRestrictionMulti" [ label = "removeIndividualRestrictionMulti", color = "green" ];
  "VolumeRestrictionTM.removeIndividualDailyRestriction" [ label = "removeIndividualDailyRestriction" ];
  "VolumeRestrictionTM._removeIndividualDailyRestriction" [ label = "_removeIndividualDailyRestriction" ];
  "VolumeRestrictionTM.removeIndividualDailyRestrictionMulti" [ label = "removeIndividualDailyRestrictionMulti", color = "green" ];
  "VolumeRestrictionTM.removeDefaultRestriction" [ label = "removeDefaultRestriction", color = "green" ];
  "VolumeRestrictionTM.removeDefaultDailyRestriction" [ label = "removeDefaultDailyRestriction", color = "blue" ];
  "VolumeRestrictionTM.modifyIndividualRestriction" [ label = "modifyIndividualRestriction", color = "green" ];
  "VolumeRestrictionTM.modifyIndividualDailyRestriction" [ label = "modifyIndividualDailyRestriction", color = "green" ];
  "VolumeRestrictionTM.modifyIndividualDailyRestrictionMulti" [ label = "modifyIndividualDailyRestrictionMulti", color = "green" ];
  "VolumeRestrictionTM.modifyIndividualRestrictionMulti" [ label = "modifyIndividualRestrictionMulti", color = "green" ];
  "VolumeRestrictionTM.modifyDefaultRestriction" [ label = "modifyDefaultRestriction", color = "blue" ];
  "VolumeRestrictionTM.modifyDefaultDailyRestriction" [ label = "modifyDefaultDailyRestriction", color = "blue" ];
  "VolumeRestrictionTM._restrictionCheck" [ label = "_restrictionCheck" ];
  "VolumeRestrictionTM._validAllowedAmount" [ label = "_validAllowedAmount" ];
  "VolumeRestrictionTM._isValidAmountAfterRestrictionChanges" [ label = "_isValidAmountAfterRestrictionChanges", color = "white" ];
  "VolumeRestrictionTM._dailyTxCheck" [ label = "_dailyTxCheck" ];
  "VolumeRestrictionTM._bucketCheck" [ label = "_bucketCheck" ];
  "VolumeRestrictionTM._checkValidAmountToTransact" [ label = "_checkValidAmountToTransact" ];
  "VolumeRestrictionTM._allowedAmountToTransact" [ label = "_allowedAmountToTransact" ];
  "VolumeRestrictionTM._updateStorage" [ label = "_updateStorage" ];
  "VolumeRestrictionTM._updateStorageActual" [ label = "_updateStorageActual" ];
  "VolumeRestrictionTM._checkInputParams" [ label = "_checkInputParams" ];
  "VolumeRestrictionTM._isAllowedToModify" [ label = "_isAllowedToModify" ];
  "VolumeRestrictionTM._getValidStartTime" [ label = "_getValidStartTime" ];
  "VolumeRestrictionTM.getTokensByPartition" [ label = "getTokensByPartition", color = "blue" ];
  "VolumeRestrictionTM.getIndividualBucketDetailsToUser" [ label = "getIndividualBucketDetailsToUser", color = "green" ];
  "VolumeRestrictionTM.getDefaultBucketDetailsToUser" [ label = "getDefaultBucketDetailsToUser", color = "green" ];
  "VolumeRestrictionTM._getBucketDetails" [ label = "_getBucketDetails" ];
  "VolumeRestrictionTM.getTotalTradedByUser" [ label = "getTotalTradedByUser", color = "blue" ];
  "VolumeRestrictionTM.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "VolumeRestrictionTM.getExemptAddress" [ label = "getExemptAddress", color = "blue" ];
  "VolumeRestrictionTM.getIndividualRestriction" [ label = "getIndividualRestriction", color = "blue" ];
  "VolumeRestrictionTM.getIndividualDailyRestriction" [ label = "getIndividualDailyRestriction", color = "blue" ];
  "VolumeRestrictionTM.getDefaultRestriction" [ label = "getDefaultRestriction", color = "blue" ];
  "VolumeRestrictionTM.getDefaultDailyRestriction" [ label = "getDefaultDailyRestriction", color = "blue" ];
  "VolumeRestrictionTM._volumeRestrictionSplay" [ label = "_volumeRestrictionSplay" ];
  "VolumeRestrictionTM.getRestrictionData" [ label = "getRestrictionData", color = "blue" ];
  "VolumeRestrictionTM._checkLengthOfArray" [ label = "_checkLengthOfArray" ];
  "IModule.getPermissions" [ label = "getPermissions", color = "green" ];
}

subgraph "clusterVolumeRestrictionTMFactory" {
  graph [ label = "VolumeRestrictionTMFactory", color = "lightgray", style = "filled" ];
  "VolumeRestrictionTMFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "VolumeRestrictionTMFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterVolumeRestrictionTMProxy" {
  graph [ label = "VolumeRestrictionTMProxy", color = "lightgray", style = "filled" ];
  "VolumeRestrictionTMProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "VolumeRestrictionTMProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterVolumeRestrictionTMStorage" {
  graph [ label = "VolumeRestrictionTMStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterUpgradableModuleFactory" {
  graph [ label = "UpgradableModuleFactory", color = "lightgray", style = "filled" ];
  "UpgradableModuleFactory.upgrade" [ label = "upgrade", color = "blue" ];
  "UpgradableModuleFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "UpgradableModuleFactory.setLogicContract" [ label = "setLogicContract", color = "blue" ];
  "ModuleFactory._initializeModule" [ label = "_initializeModule", color = "white" ];
  "UpgradableModuleFactory.version" [ label = "version", color = "blue" ];
}

subgraph "clusterVestingEscrowWallet" {
  graph [ label = "VestingEscrowWallet", color = "lightgray", style = "filled" ];
  "VestingEscrowWallet.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "VestingEscrowWallet.getInitFunction" [ label = "getInitFunction", color = "green" ];
  "VestingEscrowWallet.configure" [ label = "configure", color = "green" ];
  "VestingEscrowWallet.changeTreasuryWallet" [ label = "changeTreasuryWallet", color = "green" ];
  "VestingEscrowWallet._setWallet" [ label = "_setWallet" ];
  "VestingEscrowWallet.depositTokens" [ label = "depositTokens", color = "blue" ];
  "VestingEscrowWallet._depositTokens" [ label = "_depositTokens" ];
  "VestingEscrowWallet.sendToTreasury" [ label = "sendToTreasury", color = "green" ];
  "VestingEscrowWallet.getTreasuryWallet" [ label = "getTreasuryWallet" ];
  "VestingEscrowWallet.pushAvailableTokens" [ label = "pushAvailableTokens", color = "green" ];
  "VestingEscrowWallet.pullAvailableTokens" [ label = "pullAvailableTokens", color = "blue" ];
  "VestingEscrowWallet.addTemplate" [ label = "addTemplate", color = "blue" ];
  "VestingEscrowWallet._addTemplate" [ label = "_addTemplate" ];
  "VestingEscrowWallet.removeTemplate" [ label = "removeTemplate", color = "blue" ];
  "VestingEscrowWallet.getTemplateCount" [ label = "getTemplateCount", color = "blue" ];
  "VestingEscrowWallet.getAllTemplateNames" [ label = "getAllTemplateNames", color = "blue" ];
  "VestingEscrowWallet.addSchedule" [ label = "addSchedule", color = "blue" ];
  "VestingEscrowWallet._addSchedule" [ label = "_addSchedule" ];
  "VestingEscrowWallet.addScheduleFromTemplate" [ label = "addScheduleFromTemplate", color = "blue" ];
  "VestingEscrowWallet._addScheduleFromTemplate" [ label = "_addScheduleFromTemplate" ];
  "VestingEscrowWallet.modifySchedule" [ label = "modifySchedule", color = "blue" ];
  "VestingEscrowWallet._modifySchedule" [ label = "_modifySchedule" ];
  "VestingEscrowWallet.revokeSchedule" [ label = "revokeSchedule", color = "blue" ];
  "VestingEscrowWallet._deleteUserToTemplates" [ label = "_deleteUserToTemplates" ];
  "VestingEscrowWallet._deleteTemplateToUsers" [ label = "_deleteTemplateToUsers" ];
  "VestingEscrowWallet.revokeAllSchedules" [ label = "revokeAllSchedules", color = "green" ];
  "VestingEscrowWallet._revokeAllSchedules" [ label = "_revokeAllSchedules" ];
  "VestingEscrowWallet.getSchedule" [ label = "getSchedule", color = "blue" ];
  "VestingEscrowWallet._getScheduleState" [ label = "_getScheduleState" ];
  "VestingEscrowWallet.getTemplateNames" [ label = "getTemplateNames", color = "blue" ];
  "VestingEscrowWallet.getScheduleCount" [ label = "getScheduleCount", color = "blue" ];
  "VestingEscrowWallet._getAvailableTokens" [ label = "_getAvailableTokens", color = "white" ];
  "VestingEscrowWallet._getReleasedTokens" [ label = "_getReleasedTokens" ];
  "VestingEscrowWallet.pushAvailableTokensMulti" [ label = "pushAvailableTokensMulti", color = "green" ];
  "VestingEscrowWallet.addScheduleMulti" [ label = "addScheduleMulti", color = "green" ];
  "VestingEscrowWallet.addScheduleFromTemplateMulti" [ label = "addScheduleFromTemplateMulti", color = "green" ];
  "VestingEscrowWallet.revokeSchedulesMulti" [ label = "revokeSchedulesMulti", color = "green" ];
  "VestingEscrowWallet.modifyScheduleMulti" [ label = "modifyScheduleMulti", color = "green" ];
  "VestingEscrowWallet._checkSchedule" [ label = "_checkSchedule" ];
  "VestingEscrowWallet._isTemplateExists" [ label = "_isTemplateExists" ];
  "VestingEscrowWallet._validateTemplate" [ label = "_validateTemplate" ];
  "VestingEscrowWallet._sendTokens" [ label = "_sendTokens" ];
  "VestingEscrowWallet._sendTokensPerSchedule" [ label = "_sendTokensPerSchedule" ];
  "IModule.getPermissions" [ label = "getPermissions", color = "green" ];
}

subgraph "clusterVestingEscrowWalletFactory" {
  graph [ label = "VestingEscrowWalletFactory", color = "lightgray", style = "filled" ];
  "VestingEscrowWalletFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "VestingEscrowWalletFactory.deploy" [ label = "deploy", color = "blue" ];
}

subgraph "clusterVestingEscrowWalletProxy" {
  graph [ label = "VestingEscrowWalletProxy", color = "lightgray", style = "filled" ];
  "VestingEscrowWalletProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "VestingEscrowWalletProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterVestingEscrowWalletStorage" {
  graph [ label = "VestingEscrowWalletStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterWallet" {
  graph [ label = "Wallet", color = "lightgray", style = "filled" ];
}

subgraph "clusterMakerDAOOracle" {
  graph [ label = "MakerDAOOracle", color = "lightgray", style = "filled" ];
  "MakerDAOOracle.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "MakerDAOOracle.changeMedianier" [ label = "changeMedianier", color = "green" ];
  "MakerDAOOracle.getCurrencyAddress" [ label = "getCurrencyAddress", color = "blue" ];
  "MakerDAOOracle.getCurrencySymbol" [ label = "getCurrencySymbol", color = "blue" ];
  "MakerDAOOracle.getCurrencyDenominated" [ label = "getCurrencyDenominated", color = "blue" ];
  "IOracle.getPrice" [ label = "getPrice", color = "blue" ];
  "MakerDAOOracle.setManualPrice" [ label = "setManualPrice", color = "green" ];
  "MakerDAOOracle.setManualOverride" [ label = "setManualOverride", color = "green" ];
}

subgraph "clusterPolyOracle" {
  graph [ label = "PolyOracle", color = "lightgray", style = "filled" ];
  "PolyOracle.isAdminOrOwner" [ label = "isAdminOrOwner", color = "yellow" ];
  "PolyOracle.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "usingOraclize.__callback" [ label = "__callback", color = "green" ];
  "PolyOracle.schedulePriceUpdatesFixed" [ label = "schedulePriceUpdatesFixed", color = "green" ];
  "PolyOracle.schedulePriceUpdatesRolling" [ label = "schedulePriceUpdatesRolling", color = "green" ];
  "PolyOracle.setPOLYUSD" [ label = "setPOLYUSD", color = "green" ];
  "PolyOracle.setFreezeOracle" [ label = "setFreezeOracle", color = "green" ];
  "PolyOracle.setOracleURL" [ label = "setOracleURL", color = "green" ];
  "PolyOracle.setOracleQueryType" [ label = "setOracleQueryType", color = "green" ];
  "PolyOracle.setSanityBounds" [ label = "setSanityBounds", color = "green" ];
  "PolyOracle.setGasPrice" [ label = "setGasPrice", color = "green" ];
  "PolyOracle.getPriceAndTime" [ label = "getPriceAndTime", color = "green" ];
  "PolyOracle.setGasLimit" [ label = "setGasLimit", color = "green" ];
  "PolyOracle.setStaleTime" [ label = "setStaleTime", color = "green" ];
  "PolyOracle.setIgnoreRequestIds" [ label = "setIgnoreRequestIds", color = "green" ];
  "PolyOracle.setAdmin" [ label = "setAdmin", color = "green" ];
  "PolyOracle.setOraclizeTimeTolerance" [ label = "setOraclizeTimeTolerance", color = "green" ];
  "PolyOracle.getCurrencyAddress" [ label = "getCurrencyAddress", color = "blue" ];
  "PolyOracle.getCurrencySymbol" [ label = "getCurrencySymbol", color = "blue" ];
  "PolyOracle.getCurrencyDenominated" [ label = "getCurrencyDenominated", color = "blue" ];
  "IOracle.getPrice" [ label = "getPrice", color = "blue" ];
  "PolyOracle.drainContract" [ label = "drainContract", color = "blue" ];
}

subgraph "clusterStableOracle" {
  graph [ label = "StableOracle", color = "lightgray", style = "filled" ];
  "StableOracle.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "StableOracle.changeOracle" [ label = "changeOracle", color = "green" ];
  "StableOracle.changeEvictPercentage" [ label = "changeEvictPercentage", color = "green" ];
  "StableOracle.getCurrencyAddress" [ label = "getCurrencyAddress", color = "blue" ];
  "StableOracle.getCurrencySymbol" [ label = "getCurrencySymbol", color = "blue" ];
  "StableOracle.getCurrencyDenominated" [ label = "getCurrencyDenominated", color = "blue" ];
  "IOracle.getPrice" [ label = "getPrice", color = "blue" ];
  "StableOracle._change" [ label = "_change" ];
  "StableOracle.setManualPrice" [ label = "setManualPrice", color = "green" ];
  "StableOracle.setManualOverride" [ label = "setManualOverride", color = "green" ];
}

subgraph "clusterModuleRegistryProxy" {
  graph [ label = "ModuleRegistryProxy", color = "lightgray", style = "filled" ];
}

subgraph "clusterOwnedProxy" {
  graph [ label = "OwnedProxy", color = "lightgray", style = "filled" ];
  "OwnedProxy.ifOwner" [ label = "ifOwner", color = "yellow" ];
  "OwnedProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OwnedProxy._owner" [ label = "_owner" ];
  "OwnedProxy._setOwner" [ label = "_setOwner" ];
  "OwnedProxy._implementation" [ label = "_implementation" ];
  "OwnedProxy.proxyOwner" [ label = "proxyOwner", color = "blue" ];
  "OwnedProxy.implementation" [ label = "implementation", color = "blue" ];
  "OwnedProxy.transferProxyOwnership" [ label = "transferProxyOwnership", color = "blue" ];
  "OwnedProxy._fallback" [ label = "_fallback" ];
}

subgraph "clusterOwnedUpgradeabilityProxy" {
  graph [ label = "OwnedUpgradeabilityProxy", color = "lightgray", style = "filled" ];
  "OwnedUpgradeabilityProxy.upgradeToAndCall" [ label = "upgradeToAndCall", color = "blue" ];
  "OwnedUpgradeabilityProxy.ifOwner" [ label = "ifOwner", color = "yellow" ];
  "OwnedUpgradeabilityProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OwnedUpgradeabilityProxy._upgradeabilityOwner" [ label = "_upgradeabilityOwner" ];
  "OwnedUpgradeabilityProxy._setUpgradeabilityOwner" [ label = "_setUpgradeabilityOwner" ];
  "OwnedUpgradeabilityProxy._implementation" [ label = "_implementation" ];
  "OwnedUpgradeabilityProxy.proxyOwner" [ label = "proxyOwner", color = "blue" ];
  "OwnedUpgradeabilityProxy.version" [ label = "version", color = "blue" ];
  "OwnedUpgradeabilityProxy.implementation" [ label = "implementation", color = "blue" ];
  "OwnedUpgradeabilityProxy.transferProxyOwnership" [ label = "transferProxyOwnership", color = "blue" ];
  "OwnedUpgradeabilityProxy.upgradeTo" [ label = "upgradeTo", color = "blue" ];
  "OwnedUpgradeabilityProxy._upgradeToAndCall" [ label = "_upgradeToAndCall" ];
  "OwnedUpgradeabilityProxy._fallback" [ label = "_fallback" ];
  "OwnedUpgradeabilityProxy._upgradeTo" [ label = "_upgradeTo" ];
}

subgraph "clusterProxy" {
  graph [ label = "Proxy", color = "lightgray", style = "filled" ];
  "Proxy._implementation" [ label = "_implementation" ];
  "Proxy._fallback" [ label = "_fallback", color = "white" ];
  "Proxy._delegate" [ label = "_delegate" ];
  "Proxy.<Fallback>" [ label = "<Fallback>", color = "blue" ];
  "Proxy.transferFrom" [ label = "transferFrom" ];
}

subgraph "clusterSecurityTokenRegistryProxy" {
  graph [ label = "SecurityTokenRegistryProxy", color = "lightgray", style = "filled" ];
}

subgraph "clusterUpgradeabilityProxy" {
  graph [ label = "UpgradeabilityProxy", color = "lightgray", style = "filled" ];
  "UpgradeabilityProxy._upgradeTo" [ label = "_upgradeTo", color = "white" ];
}

subgraph "clusterEternalStorage" {
  graph [ label = "EternalStorage", color = "lightgray", style = "filled" ];
  "EternalStorage.set" [ label = "set", color = "white" ];
  "EternalStorage.deleteArrayAddress" [ label = "deleteArrayAddress", color = "white" ];
  "EternalStorage.deleteArrayBytes32" [ label = "deleteArrayBytes32", color = "white" ];
  "EternalStorage.deleteArrayUint" [ label = "deleteArrayUint", color = "white" ];
  "EternalStorage.deleteArrayString" [ label = "deleteArrayString", color = "white" ];
  "EternalStorage.pushArray" [ label = "pushArray", color = "white" ];
  "EternalStorage.setArray" [ label = "setArray", color = "white" ];
  "EternalStorage.getArrayAddress" [ label = "getArrayAddress", color = "green" ];
  "EternalStorage.getArrayBytes32" [ label = "getArrayBytes32", color = "green" ];
  "EternalStorage.getArrayUint" [ label = "getArrayUint", color = "green" ];
  "EternalStorage.setArrayIndexValue" [ label = "setArrayIndexValue", color = "white" ];
  "EternalStorage.getUintValue" [ label = "getUintValue", color = "green" ];
  "EternalStorage.getBoolValue" [ label = "getBoolValue", color = "green" ];
  "EternalStorage.getStringValue" [ label = "getStringValue", color = "green" ];
  "EternalStorage.getAddressValue" [ label = "getAddressValue", color = "green" ];
  "EternalStorage.getBytes32Value" [ label = "getBytes32Value", color = "green" ];
  "EternalStorage.getBytesValue" [ label = "getBytesValue", color = "green" ];
}

subgraph "clusterDividendCheckpointStorage" {
  graph [ label = "DividendCheckpointStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterVotingCheckpointStorage" {
  graph [ label = "VotingCheckpointStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterModuleStorage" {
  graph [ label = "ModuleStorage", color = "lightgray", style = "filled" ];
  "ModuleStorage.<Constructor>" [ label = "<Constructor>", color = "green" ];
}

subgraph "clusterISTOStorage" {
  graph [ label = "ISTOStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterSTOStorage" {
  graph [ label = "STOStorage", color = "lightgray", style = "filled" ];
}

subgraph "clusterOZStorage" {
  graph [ label = "OZStorage", color = "lightgray", style = "filled" ];
  "OZStorage.totalSupply" [ label = "totalSupply", color = "white" ];
  "OZStorage.balanceOf" [ label = "balanceOf", color = "white" ];
}

subgraph "clusterSTFactory" {
  graph [ label = "STFactory", color = "lightgray", style = "filled" ];
  "STFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "ISTFactory.deployToken" [ label = "deployToken", color = "blue" ];
  "STFactory._deploy" [ label = "_deploy" ];
  "STFactory.setLogicContract" [ label = "setLogicContract", color = "blue" ];
  "STFactory.upgradeToken" [ label = "upgradeToken", color = "blue" ];
  "STFactory.updateDefaultTransferManager" [ label = "updateDefaultTransferManager", color = "blue" ];
  "STFactory.updateDefaultDataStore" [ label = "updateDefaultDataStore", color = "blue" ];
}

subgraph "clusterSTGetter" {
  graph [ label = "STGetter", color = "lightgray", style = "filled" ];
  "STGetter.isIssuable" [ label = "isIssuable", color = "blue" ];
  "STGetter.getCheckpointTimes" [ label = "getCheckpointTimes", color = "blue" ];
  "STGetter.getInvestorCount" [ label = "getInvestorCount", color = "blue" ];
  "STGetter.getInvestors" [ label = "getInvestors", color = "green" ];
  "STGetter.getInvestorsAt" [ label = "getInvestorsAt", color = "blue" ];
  "STGetter.getInvestorsSubsetAt" [ label = "getInvestorsSubsetAt", color = "blue" ];
  "STGetter.getModule" [ label = "getModule", color = "blue" ];
  "STGetter.getModulesByName" [ label = "getModulesByName", color = "blue" ];
  "STGetter.getModulesByType" [ label = "getModulesByType", color = "blue" ];
  "STGetter.getTreasuryWallet" [ label = "getTreasuryWallet", color = "blue" ];
  "STGetter.balanceOfAt" [ label = "balanceOfAt" ];
  "STGetter.totalSupplyAt" [ label = "totalSupplyAt", color = "blue" ];
  "STGetter.iterateInvestors" [ label = "iterateInvestors", color = "blue" ];
  "STGetter.checkPermission" [ label = "checkPermission", color = "green" ];
  "STGetter.isOperator" [ label = "isOperator", color = "blue" ];
  "STGetter.isOperatorForPartition" [ label = "isOperatorForPartition", color = "blue" ];
  "STGetter.partitionsOf" [ label = "partitionsOf", color = "blue" ];
  "STGetter._appendPartition" [ label = "_appendPartition" ];
  "STGetter.getVersion" [ label = "getVersion", color = "blue" ];
  "STGetter.getDocument" [ label = "getDocument", color = "blue" ];
  "STGetter.getAllDocuments" [ label = "getAllDocuments", color = "blue" ];
  "STGetter.balanceOf" [ label = "balanceOf" ];
}

subgraph "clusterSecurityToken" {
  graph [ label = "SecurityToken", color = "lightgray", style = "filled" ];
  "SecurityToken.initialize" [ label = "initialize", color = "green" ];
  "SecurityToken.isModule" [ label = "isModule" ];
  "SecurityToken._onlyModuleOrOwner" [ label = "_onlyModuleOrOwner", color = "white" ];
  "SecurityToken._isValidPartition" [ label = "_isValidPartition" ];
  "SecurityToken._isValidOperator" [ label = "_isValidOperator", color = "white" ];
  "SecurityToken._zeroAddressCheck" [ label = "_zeroAddressCheck" ];
  "SecurityToken._isValidTransfer" [ label = "_isValidTransfer" ];
  "SecurityToken._isValidRedeem" [ label = "_isValidRedeem" ];
  "SecurityToken._isSignedByOwner" [ label = "_isSignedByOwner" ];
  "SecurityToken._isIssuanceAllowed" [ label = "_isIssuanceAllowed" ];
  "SecurityToken._onlyController" [ label = "_onlyController", color = "white" ];
  "SecurityToken._isAuthorised" [ label = "_isAuthorised" ];
  "SecurityToken._onlyOwner" [ label = "_onlyOwner", color = "white" ];
  "SecurityToken._onlyModule" [ label = "_onlyModule", color = "white" ];
  "SecurityToken.onlyTokenFactory" [ label = "onlyTokenFactory", color = "yellow" ];
  "SecurityToken.checkGranularity" [ label = "checkGranularity", color = "yellow" ];
  "SecurityToken.addModuleWithLabel" [ label = "addModuleWithLabel", color = "green" ];
  "SecurityToken._addModuleData" [ label = "_addModuleData" ];
  "SecurityToken.addModule" [ label = "addModule", color = "blue" ];
  "SecurityToken.archiveModule" [ label = "archiveModule", color = "blue" ];
  "SecurityToken.upgradeModule" [ label = "upgradeModule", color = "blue" ];
  "SecurityToken.upgradeToken" [ label = "upgradeToken", color = "blue" ];
  "SecurityToken.unarchiveModule" [ label = "unarchiveModule", color = "blue" ];
  "SecurityToken.removeModule" [ label = "removeModule", color = "blue" ];
  "SecurityToken.withdrawERC20" [ label = "withdrawERC20", color = "blue" ];
  "SecurityToken.changeModuleBudget" [ label = "changeModuleBudget", color = "blue" ];
  "SecurityToken.updateTokenDetails" [ label = "updateTokenDetails", color = "blue" ];
  "SecurityToken.changeGranularity" [ label = "changeGranularity", color = "blue" ];
  "SecurityToken.changeDataStore" [ label = "changeDataStore", color = "blue" ];
  "SecurityToken.changeName" [ label = "changeName", color = "blue" ];
  "SecurityToken.changeTreasuryWallet" [ label = "changeTreasuryWallet", color = "blue" ];
  "SecurityToken._adjustInvestorCount" [ label = "_adjustInvestorCount", color = "white" ];
  "SecurityToken.freezeTransfers" [ label = "freezeTransfers", color = "blue" ];
  "SecurityToken.unfreezeTransfers" [ label = "unfreezeTransfers", color = "blue" ];
  "SecurityToken._adjustBalanceCheckpoints" [ label = "_adjustBalanceCheckpoints", color = "white" ];
  "SecurityToken.transfer" [ label = "transfer", color = "green" ];
  "SecurityToken.transferWithData" [ label = "transferWithData" ];
  "SecurityToken._transferWithData" [ label = "_transferWithData" ];
  "SecurityToken.transferFrom" [ label = "transferFrom", color = "green" ];
  "SecurityToken.transferFromWithData" [ label = "transferFromWithData" ];
  "SecurityToken.balanceOfByPartition" [ label = "balanceOfByPartition", color = "green" ];
  "SecurityToken._balanceOfByPartition" [ label = "_balanceOfByPartition" ];
  "SecurityToken.transferByPartition" [ label = "transferByPartition", color = "green" ];
  "SecurityToken._transferByPartition" [ label = "_transferByPartition" ];
  "SecurityToken._returnPartition" [ label = "_returnPartition" ];
  "SecurityToken.authorizeOperator" [ label = "authorizeOperator", color = "green" ];
  "SecurityToken.revokeOperator" [ label = "revokeOperator", color = "green" ];
  "SecurityToken.authorizeOperatorByPartition" [ label = "authorizeOperatorByPartition", color = "green" ];
  "SecurityToken.revokeOperatorByPartition" [ label = "revokeOperatorByPartition", color = "green" ];
  "SecurityToken.operatorTransferByPartition" [ label = "operatorTransferByPartition", color = "blue" ];
  "SecurityToken._validateOperatorAndPartition" [ label = "_validateOperatorAndPartition" ];
  "SecurityToken._updateTransfer" [ label = "_updateTransfer" ];
  "SecurityToken._executeTransfer" [ label = "_executeTransfer" ];
  "SecurityToken.freezeIssuance" [ label = "freezeIssuance", color = "blue" ];
  "SecurityToken.issue" [ label = "issue", color = "green" ];
  "SecurityToken._issue" [ label = "_issue" ];
  "SecurityToken.issueMulti" [ label = "issueMulti", color = "green" ];
  "SecurityToken.issueByPartition" [ label = "issueByPartition", color = "blue" ];
  "SecurityToken.redeem" [ label = "redeem", color = "blue" ];
  "SecurityToken._redeem" [ label = "_redeem" ];
  "SecurityToken.redeemByPartition" [ label = "redeemByPartition", color = "blue" ];
  "SecurityToken._redeemByPartition" [ label = "_redeemByPartition" ];
  "SecurityToken.operatorRedeemByPartition" [ label = "operatorRedeemByPartition", color = "blue" ];
  "SecurityToken._checkAndBurn" [ label = "_checkAndBurn" ];
  "SecurityToken.redeemFrom" [ label = "redeemFrom", color = "blue" ];
  "SecurityToken.createCheckpoint" [ label = "createCheckpoint", color = "blue" ];
  "SecurityToken.setController" [ label = "setController", color = "blue" ];
  "SecurityToken.disableController" [ label = "disableController", color = "blue" ];
  "SecurityToken.canTransfer" [ label = "canTransfer", color = "blue" ];
  "SecurityToken.canTransferFrom" [ label = "canTransferFrom", color = "blue" ];
  "SecurityToken._canTransfer" [ label = "_canTransfer" ];
  "SecurityToken.canTransferByPartition" [ label = "canTransferByPartition", color = "blue" ];
  "SecurityToken.setDocument" [ label = "setDocument", color = "blue" ];
  "SecurityToken.removeDocument" [ label = "removeDocument", color = "blue" ];
  "SecurityToken.isControllable" [ label = "isControllable" ];
  "SecurityToken.controllerTransfer" [ label = "controllerTransfer", color = "blue" ];
  "SecurityToken.controllerRedeem" [ label = "controllerRedeem", color = "blue" ];
  "Proxy._implementation" [ label = "_implementation", color = "white" ];
  "SecurityToken.updateFromRegistry" [ label = "updateFromRegistry" ];
  "SecurityToken.owner" [ label = "owner" ];
  "SecurityToken.isOwner" [ label = "isOwner" ];
  "SecurityToken.transferOwnership" [ label = "transferOwnership", color = "blue" ];
  "SecurityToken._transferOwnership" [ label = "_transferOwnership" ];
  "SecurityToken.allowance" [ label = "allowance" ];
  "SecurityToken.balanceOf" [ label = "balanceOf" ];
  "SecurityToken._transfer" [ label = "_transfer" ];
  "SecurityToken._approve" [ label = "_approve" ];
  "SecurityToken._mint" [ label = "_mint" ];
  "SecurityToken._burn" [ label = "_burn" ];
  "SecurityToken._burnFrom" [ label = "_burnFrom" ];
  "SecurityToken.totalSupply" [ label = "totalSupply" ];
}

subgraph "clusterSecurityTokenProxy" {
  graph [ label = "SecurityTokenProxy", color = "lightgray", style = "filled" ];
  "SecurityTokenProxy.call" [ label = "call" ];
  "SecurityTokenProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
}

subgraph "clusterSecurityTokenStorage" {
  graph [ label = "SecurityTokenStorage", color = "lightgray", style = "filled" ];
  "SecurityTokenStorage.Checkpoint" [ label = "Checkpoint" ];
  "SecurityTokenStorage.Document" [ label = "Document" ];
}

subgraph "clusterIERC20" {
  graph [ label = "IERC20", color = "lightgray" ];
  "IERC20.balanceOf" [ label = "balanceOf" ];
  "IERC20.transfer" [ label = "transfer" ];
  "IERC20.transferFrom" [ label = "transferFrom" ];
  "IERC20.totalSupply" [ label = "totalSupply" ];
}

subgraph "clusternow" {
  graph [ label = "now", color = "lightgray" ];
  "now.add" [ label = "add" ];
  "now.sub" [ label = "sub" ];
}

subgraph "clusterregistrationTime" {
  graph [ label = "registrationTime", color = "lightgray" ];
  "registrationTime.add" [ label = "add" ];
}

subgraph "clusterBuffer.buffer" {
  graph [ label = "Buffer.buffer", color = "lightgray" ];
  "Buffer.buffer.append" [ label = "append" ];
  "Buffer.buffer.appendInt" [ label = "appendInt" ];
  "Buffer.buffer.startArray" [ label = "startArray" ];
  "Buffer.buffer.encodeString" [ label = "encodeString" ];
  "Buffer.buffer.endSequence" [ label = "endSequence" ];
  "Buffer.buffer.encodeBytes" [ label = "encodeBytes" ];
}

subgraph "clusteroldValue" {
  graph [ label = "oldValue", color = "lightgray" ];
  "oldValue.sub" [ label = "sub" ];
}

subgraph "clustercurrentAllowance" {
  graph [ label = "currentAllowance", color = "lightgray" ];
  "currentAllowance.add" [ label = "add" ];
  "currentAllowance.sub" [ label = "sub" ];
}

subgraph "cluster_holderCount" {
  graph [ label = "_holderCount", color = "lightgray" ];
  "_holderCount.add" [ label = "add" ];
  "_holderCount.sub" [ label = "sub" ];
}

subgraph "cluster_sumOfLastPeriod" {
  graph [ label = "_sumOfLastPeriod", color = "lightgray" ];
  "_sumOfLastPeriod.add" [ label = "add" ];
}

subgraph "clustertotalSupply_" {
  graph [ label = "totalSupply_", color = "lightgray" ];
  "totalSupply_.add" [ label = "add" ];
}

subgraph "clusterbalance" {
  graph [ label = "balance", color = "lightgray" ];
  "balance.mul" [ label = "mul" ];
}

subgraph "clusterclaim" {
  graph [ label = "claim", color = "lightgray" ];
  "claim.mul" [ label = "mul" ];
  "claim.sub" [ label = "sub" ];
  "claim.add" [ label = "add" ];
}

subgraph "clusterexcludedSupply" {
  graph [ label = "excludedSupply", color = "lightgray" ];
  "excludedSupply.add" [ label = "add" ];
}

subgraph "clustercurrentSupply" {
  graph [ label = "currentSupply", color = "lightgray" ];
  "currentSupply.sub" [ label = "sub" ];
}

subgraph "cluster_payee" {
  graph [ label = "_payee", color = "lightgray" ];
  "_payee.send" [ label = "send" ];
}

subgraph "clusterwallet" {
  graph [ label = "wallet", color = "lightgray" ];
  "wallet.transfer" [ label = "transfer" ];
}

subgraph "clustercommitTimeEnd" {
  graph [ label = "commitTimeEnd", color = "lightgray" ];
  "commitTimeEnd.add" [ label = "add" ];
}

subgraph "clustersupplyAtCheckpoint" {
  graph [ label = "supplyAtCheckpoint", color = "lightgray" ];
  "supplyAtCheckpoint.mul" [ label = "mul" ];
}

subgraph "clusterperiods" {
  graph [ label = "periods", color = "lightgray" ];
  "periods.mul" [ label = "mul" ];
}

subgraph "clustertotalPeriods" {
  graph [ label = "totalPeriods", color = "lightgray" ];
  "totalPeriods.mul" [ label = "mul" ];
}

subgraph "clusterabi" {
  graph [ label = "abi", color = "lightgray" ];
  "abi.decode" [ label = "decode" ];
}

subgraph "clusterhash" {
  graph [ label = "hash", color = "lightgray" ];
  "hash.toEthSignedMessageHash" [ label = "toEthSignedMessageHash" ];
}

subgraph "clusterOwnable" {
  graph [ label = "Ownable", color = "lightgray" ];
  "Ownable.owner" [ label = "owner" ];
}

subgraph "cluster_module" {
  graph [ label = "_module", color = "lightgray" ];
  "_module.call" [ label = "call" ];
}

subgraph "clusterweiAmount" {
  graph [ label = "weiAmount", color = "lightgray" ];
  "weiAmount.sub" [ label = "sub" ];
}

subgraph "cluster_investedPOLY" {
  graph [ label = "_investedPOLY", color = "lightgray" ];
  "_investedPOLY.sub" [ label = "sub" ];
}

subgraph "cluster_investedAmount" {
  graph [ label = "_investedAmount", color = "lightgray" ];
  "_investedAmount.sub" [ label = "sub" ];
  "_investedAmount.mul" [ label = "mul" ];
}

subgraph "clustertotalTokensSold" {
  graph [ label = "totalTokensSold", color = "lightgray" ];
  "totalTokensSold.add" [ label = "add" ];
}

subgraph "clustertokens" {
  graph [ label = "tokens", color = "lightgray" ];
  "tokens.div" [ label = "div" ];
  "tokens.mul" [ label = "mul" ];
}

subgraph "clustercap" {
  graph [ label = "cap", color = "lightgray" ];
  "cap.sub" [ label = "sub" ];
}

subgraph "clusterinvestorCount" {
  graph [ label = "investorCount", color = "lightgray" ];
  "investorCount.add" [ label = "add" ];
}

subgraph "clustertempReturned" {
  graph [ label = "tempReturned", color = "lightgray" ];
  "tempReturned.add" [ label = "add" ];
  "tempReturned.div" [ label = "div" ];
  "tempReturned.mul" [ label = "mul" ];
}

subgraph "clustertempSold" {
  graph [ label = "tempSold", color = "lightgray" ];
  "tempSold.add" [ label = "add" ];
}

subgraph "clusterallowedUSD" {
  graph [ label = "allowedUSD", color = "lightgray" ];
  "allowedUSD.sub" [ label = "sub" ];
}

subgraph "clusterspentUSD" {
  graph [ label = "spentUSD", color = "lightgray" ];
  "spentUSD.add" [ label = "add" ];
}

subgraph "clusterfundsRaisedUSD" {
  graph [ label = "fundsRaisedUSD", color = "lightgray" ];
  "fundsRaisedUSD.add" [ label = "add" ];
}

subgraph "clusterinvestedUSD" {
  graph [ label = "investedUSD", color = "lightgray" ];
  "investedUSD.add" [ label = "add" ];
  "investedUSD.sub" [ label = "sub" ];
}

subgraph "clusterinvestorLimitUSD" {
  graph [ label = "investorLimitUSD", color = "lightgray" ];
  "investorLimitUSD.sub" [ label = "sub" ];
}

subgraph "cluster_tierRemaining" {
  graph [ label = "_tierRemaining", color = "lightgray" ];
  "_tierRemaining.div" [ label = "div" ];
}

subgraph "clusterpurchasedTokens" {
  graph [ label = "purchasedTokens", color = "lightgray" ];
  "purchasedTokens.div" [ label = "div" ];
  "purchasedTokens.mul" [ label = "mul" ];
}

subgraph "clustertokensMinted" {
  graph [ label = "tokensMinted", color = "lightgray" ];
  "tokensMinted.add" [ label = "add" ];
}

subgraph "clustertokensSold" {
  graph [ label = "tokensSold", color = "lightgray" ];
  "tokensSold.add" [ label = "add" ];
}

subgraph "clusterendTimeTemp" {
  graph [ label = "endTimeTemp", color = "lightgray" ];
  "endTimeTemp.add" [ label = "add" ];
}

subgraph "clusterrepeatPeriodTimeTemp" {
  graph [ label = "repeatPeriodTimeTemp", color = "lightgray" ];
  "repeatPeriodTimeTemp.mul" [ label = "mul" ];
}

subgraph "cluster_repeatPeriodTime" {
  graph [ label = "_repeatPeriodTime", color = "lightgray" ];
  "_repeatPeriodTime.mul" [ label = "mul" ];
}

subgraph "cluster_endTime" {
  graph [ label = "_endTime", color = "lightgray" ];
  "_endTime.sub" [ label = "sub" ];
}

subgraph "cluster_hash" {
  graph [ label = "_hash", color = "lightgray" ];
  "_hash.toEthSignedMessageHash" [ label = "toEthSignedMessageHash" ];
}

subgraph "clustertotalRemainingLockedAmount" {
  graph [ label = "totalRemainingLockedAmount", color = "lightgray" ];
  "totalRemainingLockedAmount.add" [ label = "add" ];
}

subgraph "clustercurrentBalance" {
  graph [ label = "currentBalance", color = "lightgray" ];
  "currentBalance.sub" [ label = "sub" ];
}

subgraph "clusterMath" {
  graph [ label = "Math", color = "lightgray" ];
  "Math.min" [ label = "min" ];
}

subgraph "clusterallowance" {
  graph [ label = "allowance", color = "lightgray" ];
  "allowance.add" [ label = "add" ];
}

subgraph "clusternewBalance" {
  graph [ label = "newBalance", color = "lightgray" ];
  "newBalance.mul" [ label = "mul" ];
}

subgraph "cluster_dailyLastTradedDayTime" {
  graph [ label = "_dailyLastTradedDayTime", color = "lightgray" ];
  "_dailyLastTradedDayTime.add" [ label = "add" ];
}

subgraph "clustercounter" {
  graph [ label = "counter", color = "lightgray" ];
  "counter.add" [ label = "add" ];
  "counter.sub" [ label = "sub" ];
}

subgraph "clustertemp" {
  graph [ label = "temp", color = "lightgray" ];
  "temp.mul" [ label = "mul" ];
}

subgraph "clustersumOfLastPeriod" {
  graph [ label = "sumOfLastPeriod", color = "lightgray" ];
  "sumOfLastPeriod.sub" [ label = "sub" ];
}

subgraph "cluster_fromTime" {
  graph [ label = "_fromTime", color = "lightgray" ];
  "_fromTime.add" [ label = "add" ];
}

subgraph "cluster_diffDays" {
  graph [ label = "_diffDays", color = "lightgray" ];
  "_diffDays.mul" [ label = "mul" ];
}

subgraph "cluster_allowedAmount" {
  graph [ label = "_allowedAmount", color = "lightgray" ];
  "_allowedAmount.sub" [ label = "sub" ];
}

subgraph "clusterunassignedTokens" {
  graph [ label = "unassignedTokens", color = "lightgray" ];
  "unassignedTokens.add" [ label = "add" ];
  "unassignedTokens.sub" [ label = "sub" ];
}

subgraph "clusternumberOfTokens" {
  graph [ label = "numberOfTokens", color = "lightgray" ];
  "numberOfTokens.sub" [ label = "sub" ];
}

subgraph "clusterreleasedTokens" {
  graph [ label = "releasedTokens", color = "lightgray" ];
  "releasedTokens.sub" [ label = "sub" ];
}

subgraph "cluster_duration" {
  graph [ label = "_duration", color = "lightgray" ];
  "_duration.div" [ label = "div" ];
}

subgraph "cluster_numberOfTokens" {
  graph [ label = "_numberOfTokens", color = "lightgray" ];
  "_numberOfTokens.div" [ label = "div" ];
}

subgraph "clusterPOLYUSD" {
  graph [ label = "POLYUSD", color = "lightgray" ];
  "POLYUSD.mul" [ label = "mul" ];
  "POLYUSD.add" [ label = "add" ];
  "POLYUSD.sub" [ label = "sub" ];
}

subgraph "cluster_newPrice" {
  graph [ label = "_newPrice", color = "lightgray" ];
  "_newPrice.sub" [ label = "sub" ];
}

subgraph "cluster_oldPrice" {
  graph [ label = "_oldPrice", color = "lightgray" ];
  "_oldPrice.sub" [ label = "sub" ];
}

subgraph "clusterdiff" {
  graph [ label = "diff", color = "lightgray" ];
  "diff.mul" [ label = "mul" ];
}

subgraph "clusterAddress" {
  graph [ label = "Address", color = "lightgray" ];
  "Address.isContract" [ label = "isContract" ];
}

subgraph "clusterERC20" {
  graph [ label = "ERC20", color = "lightgray" ];
  "ERC20.approve" [ label = "approve" ];
}

subgraph "cluster_afterBalance" {
  graph [ label = "_afterBalance", color = "lightgray" ];
  "_afterBalance.sub" [ label = "sub" ];
}

  "Migrations.upgrade";
  "Migrations.setCompleted";
  "ModuleRegistry.onlyOwner";
  "ModuleRegistry.owner";
  "ModuleRegistry.whenNotPausedOrOwner";
  "ModuleRegistry.isPaused";
  "ModuleRegistry.whenNotPaused";
  "ModuleRegistry.whenPaused";
  "ModuleRegistry.initialize";
  "ModuleRegistry.getBoolValue";
  "ModuleRegistry.set";
  "ModuleRegistry.useModule";
  "IFeatureRegistry.getFeatureStatus";
  "ModuleRegistry.getAddressValue";
  "Encoder.getKey";
  "IOwnable.owner";
  "ISecurityTokenRegistry.isSecurityToken";
  "ModuleRegistry.isCompatibleModule";
  "ModuleRegistry.pushArray";
  "ISecurityToken.getVersion";
  "IModuleFactory.lowerSTVersionBounds";
  "IModuleFactory.upperSTVersionBounds";
  "VersionUtils.lessThanOrEqual";
  "VersionUtils.greaterThanOrEqual";
  "ModuleRegistry.registerModule";
  "ModuleRegistry.getUintValue";
  "IModuleFactory.types";
  "ModuleRegistry.getArrayAddress";
  "ModuleRegistry.removeModule";
  "ModuleRegistry.setArrayIndexValue";
  "ModuleRegistry.deleteArrayAddress";
  "ModuleRegistry.setArray";
  "ModuleRegistry.verifyModule";
  "ModuleRegistry.unverifyModule";
  "ModuleRegistry.getTagsByTypeAndToken";
  "ModuleRegistry.getModulesByTypeAndToken";
  "ModuleRegistry._tagsByModules";
  "ModuleRegistry.getTagsByType";
  "ModuleRegistry.getModulesByType";
  "IModuleFactory.tags";
  "ModuleRegistry.getFactoryDetails";
  "ModuleRegistry.reclaimERC20";
  "IERC20.balanceOf";
  "IERC20.transfer";
  "ModuleRegistry.pause";
  "ModuleRegistry.unpause";
  "ModuleRegistry.updateFromRegistry";
  "IPolymathRegistry.getAddress";
  "ModuleRegistry.transferOwnership";
  "ReclaimTokens.reclaimERC20";
  "ReclaimTokens.owner";
  "STRGetter.getTickersByOwner";
  "STRGetter.getArrayBytes32";
  "STRGetter._ownerInTicker";
  "Util.bytes32ToString";
  "STRGetter.getUintValue";
  "STRGetter.getBoolValue";
  "STRGetter.getTokensByOwner";
  "STRGetter._getTokens";
  "STRGetter.getTokens";
  "STRGetter.getArrayAddress";
  "STRGetter._ownerInToken";
  "STRGetter.getAddressValue";
  "STRGetter.getTokensByDelegate";
  "STRGetter._delegateInToken";
  "ISecurityToken.getModulesByType";
  "ISecurityToken.getModule";
  "IPermissionManager.checkDelegate";
  "STRGetter.getTickerDetails";
  "Util.upper";
  "STRGetter.getTickerStatus";
  "STRGetter.getTickerOwner";
  "STRGetter.getStringValue";
  "STRGetter.getSecurityTokenAddress";
  "STRGetter.getSecurityTokenData";
  "STRGetter.getSTFactoryAddress";
  "STRGetter.getSTFactoryAddressOfVersion";
  "STRGetter.getLatestProtocolVersion";
  "VersionUtils.unpack";
  "STRGetter.getIsFeeInPoly";
  "STRGetter.getExpiryLimit";
  "SecurityTokenRegistry.onlyOwner";
  "SecurityTokenRegistry.owner";
  "SecurityTokenRegistry.whenNotPausedOrOwner";
  "SecurityTokenRegistry._whenNotPausedOrOwner";
  "SecurityTokenRegistry.isPaused";
  "SecurityTokenRegistry.whenNotPaused";
  "SecurityTokenRegistry.whenPaused";
  "SecurityTokenRegistry.initialize";
  "SecurityTokenRegistry.getBoolValue";
  "SecurityTokenRegistry.set";
  "SecurityTokenRegistry._updateFromRegistry";
  "SecurityTokenRegistry.updateFromRegistry";
  "SecurityTokenRegistry.getAddressValue";
  "SecurityTokenRegistry._takeFee";
  "SecurityTokenRegistry.getFees";
  "IERC20.transferFrom";
  "SecurityTokenRegistry.getUintValue";
  "IOracle.getPrice";
  "DecimalMath.div";
  "DecimalMath.mul";
  "SecurityTokenRegistry.getSecurityTokenLaunchFee";
  "SecurityTokenRegistry.getTickerRegistrationFee";
  "SecurityTokenRegistry.setGetterRegistry";
  "SecurityTokenRegistry._implementation";
  "SecurityTokenRegistry.registerTicker";
  "SecurityTokenRegistry._tickerAvailable";
  "SecurityTokenRegistry._tickerOwner";
  "SecurityTokenRegistry._deleteTickerOwnership";
  "SecurityTokenRegistry._addTicker";
  "now.add";
  "SecurityTokenRegistry._setTickerOwnership";
  "SecurityTokenRegistry._storeTickerDetails";
  "SecurityTokenRegistry.modifyTicker";
  "SecurityTokenRegistry._modifyTicker";
  "SecurityTokenRegistry._tickerStatus";
  "SecurityTokenRegistry.removeTicker";
  "SecurityTokenRegistry.getArrayBytes32";
  "SecurityTokenRegistry.pushArray";
  "Util.stringToBytes32";
  "SecurityTokenRegistry.transferTickerOwnership";
  "SecurityTokenRegistry.deleteArrayBytes32";
  "SecurityTokenRegistry.changeExpiryLimit";
  "SecurityTokenRegistry.generateSecurityToken";
  "SecurityTokenRegistry.generateNewSecurityToken";
  "VersionUtils.pack";
  "SecurityTokenRegistry._deployToken";
  "SecurityTokenRegistry.refreshSecurityToken";
  "ISecurityToken.transfersFrozen";
  "ISTFactory.deployToken";
  "SecurityTokenRegistry._storeSecurityTokenData";
  "SecurityTokenRegistry.modifySecurityToken";
  "registrationTime.add";
  "SecurityTokenRegistry.isSecurityToken";
  "SecurityTokenRegistry.getStringValue";
  "SecurityTokenRegistry.transferOwnership";
  "SecurityTokenRegistry.pause";
  "SecurityTokenRegistry.unpause";
  "SecurityTokenRegistry.changeTickerRegistrationFee";
  "SecurityTokenRegistry._changeTickerRegistrationFee";
  "SecurityTokenRegistry.changeSecurityLaunchFee";
  "SecurityTokenRegistry._changeSecurityLaunchFee";
  "SecurityTokenRegistry.changeFeesAmountAndCurrency";
  "SecurityTokenRegistry.reclaimERC20";
  "SecurityTokenRegistry.setProtocolFactory";
  "SecurityTokenRegistry._setProtocolFactory";
  "SecurityTokenRegistry.removeProtocolFactory";
  "SecurityTokenRegistry.setLatestVersion";
  "SecurityTokenRegistry._setLatestVersion";
  "SecurityTokenRegistry.updatePolyTokenAddress";
  "DataStore._isAuthorized";
  "ISecurityToken.checkPermission";
  "ISecurityToken.isModule";
  "DataStore.onlyOwner";
  "DataStore.setUint256";
  "DataStore._setData";
  "DataStore.setBytes32";
  "DataStore.setAddress";
  "DataStore.setBool";
  "DataStore.setString";
  "DataStore.setBytes";
  "DataStore.setUint256Array";
  "DataStore.setBytes32Array";
  "DataStore.setAddressArray";
  "DataStore.setBoolArray";
  "DataStore.insertUint256";
  "DataStore.insertBytes32";
  "DataStore.insertAddress";
  "DataStore.insertBool";
  "DataStore.deleteUint256";
  "DataStore._deleteUint";
  "DataStore.deleteBytes32";
  "DataStore._deleteBytes32";
  "DataStore.deleteAddress";
  "DataStore._deleteAddress";
  "DataStore.deleteBool";
  "DataStore._deleteBool";
  "DataStore.setUint256Multi";
  "DataStore.setBytes32Multi";
  "DataStore.setAddressMulti";
  "DataStore.setBoolMulti";
  "DataStore.insertUint256Multi";
  "DataStore.insertBytes32Multi";
  "DataStore.insertAddressMulti";
  "DataStore.insertBoolMulti";
  "Buffer.resize";
  "Buffer.init";
  "Buffer.append";
  "Buffer.max";
  "Buffer.appendInt";
  "CBOR.encodeType";
  "Buffer.buffer.append";
  "Buffer.buffer.appendInt";
  "CBOR.encodeIndefiniteLengthType";
  "CBOR.encodeUInt";
  "CBOR.encodeInt";
  "CBOR.encodeBytes";
  "CBOR.encodeString";
  "CBOR.startArray";
  "CBOR.startMap";
  "CBOR.endSequence";
  "usingOraclize.oraclizeAPI";
  "usingOraclize.getCodeSize";
  "usingOraclize.oraclize_setNetwork";
  "OraclizeAddrResolverI.getAddress";
  "usingOraclize.oraclize_randomDS_proofVerify";
  "usingOraclize.oraclize_randomDS_proofVerify__main";
  "usingOraclize.oraclize_getNetworkName";
  "usingOraclize.oraclize_setNetworkName";
  "usingOraclize.__callback";
  "usingOraclize.oraclize_getPrice";
  "OraclizeI.getPrice";
  "usingOraclize.oraclize_query";
  "usingOraclize.stra2cbor";
  "usingOraclize.ba2cbor";
  "usingOraclize.oraclize_setProof";
  "OraclizeI.setProofType";
  "usingOraclize.oraclize_cbAddress";
  "OraclizeI.cbAddress";
  "usingOraclize.oraclize_setCustomGasPrice";
  "OraclizeI.setCustomGasPrice";
  "usingOraclize.oraclize_randomDS_getSessionPubKeyHash";
  "OraclizeI.randomDS_getSessionPubKeyHash";
  "usingOraclize.strConcat";
  "usingOraclize.safeParseInt";
  "usingOraclize.parseInt";
  "usingOraclize.safeMemoryCleaner";
  "Buffer.buffer.startArray";
  "Buffer.buffer.encodeString";
  "Buffer.buffer.endSequence";
  "Buffer.buffer.encodeBytes";
  "usingOraclize.oraclize_newRandomDSQuery";
  "usingOraclize.copyBytes";
  "usingOraclize.oraclize_randomDS_setCommitment";
  "usingOraclize.verifySig";
  "usingOraclize.safer_ecrecover";
  "usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity";
  "usingOraclize.oraclize_randomDS_proofVerify__returnCode";
  "usingOraclize.matchBytes32Prefix";
  "usingOraclize.ecrecovery";
  "PolyToken.decreaseApproval";
  "oldValue.sub";
  "BokkyPooBahsDateTimeLibrary.timestampFromDate";
  "BokkyPooBahsDateTimeLibrary._daysFromDate";
  "BokkyPooBahsDateTimeLibrary.timestampFromDateTime";
  "BokkyPooBahsDateTimeLibrary.timestampToDate";
  "BokkyPooBahsDateTimeLibrary._daysToDate";
  "BokkyPooBahsDateTimeLibrary.timestampToDateTime";
  "BokkyPooBahsDateTimeLibrary.isValidDate";
  "BokkyPooBahsDateTimeLibrary._getDaysInMonth";
  "BokkyPooBahsDateTimeLibrary.isValidDateTime";
  "BokkyPooBahsDateTimeLibrary.isLeapYear";
  "BokkyPooBahsDateTimeLibrary._isLeapYear";
  "BokkyPooBahsDateTimeLibrary.isWeekDay";
  "BokkyPooBahsDateTimeLibrary.getDayOfWeek";
  "BokkyPooBahsDateTimeLibrary.isWeekEnd";
  "BokkyPooBahsDateTimeLibrary.getDaysInMonth";
  "BokkyPooBahsDateTimeLibrary.getYear";
  "BokkyPooBahsDateTimeLibrary.getMonth";
  "BokkyPooBahsDateTimeLibrary.getDay";
  "BokkyPooBahsDateTimeLibrary.addYears";
  "BokkyPooBahsDateTimeLibrary.addMonths";
  "BokkyPooBahsDateTimeLibrary.subYears";
  "BokkyPooBahsDateTimeLibrary.subMonths";
  "BokkyPooBahsDateTimeLibrary.diffYears";
  "BokkyPooBahsDateTimeLibrary.diffMonths";
  "SafeMath.add";
  "SafeMath.mul";
  "TokenLib.recoverFreezeIssuanceAckSigner";
  "TokenLib.extractSigner";
  "TokenLib.recoverDisableControllerAckSigner";
  "TokenLib.hash";
  "TokenLib.unarchiveModule";
  "IModuleRegistry.useModule";
  "TokenLib.upgradeModule";
  "UpgradableModuleFactory.upgrade";
  "TokenLib.removeModule";
  "TokenLib._removeModuleWithIndex";
  "TokenLib.changeModuleBudget";
  "IPoly.allowance";
  "IPoly.increaseApproval";
  "currentAllowance.add";
  "IPoly.decreaseApproval";
  "currentAllowance.sub";
  "TokenLib.adjustCheckpoints";
  "SecurityTokenStorage.Checkpoint";
  "TokenLib.adjustInvestorCount";
  "_holderCount.add";
  "TokenLib._isExistingInvestor";
  "IDataStore.insertAddress";
  "IDataStore.setUint256";
  "TokenLib._getKey";
  "_holderCount.sub";
  "TokenLib.setDocument";
  "SecurityTokenStorage.Document";
  "TokenLib.verifyTransfer";
  "ITransferManager.verifyTransfer";
  "IDataStore.getUint256";
  "Util.bytesToBytes32";
  "VolumeRestrictionLib.deleteHolderFromList";
  "VolumeRestrictionLib._getKey";
  "VolumeRestrictionLib.addRestrictionData";
  "VolumeRestrictionLib._isExistingInvestor";
  "VolumeRestrictionLib._isVolRestricted";
  "VolumeRestrictionLib._getTypeOfPeriod";
  "VolumeRestrictionLib.isValidAmountAfterRestrictionChanges";
  "BokkyPooBahsDateTimeLibrary.diffSeconds";
  "_sumOfLastPeriod.add";
  "VolumeRestrictionLib.getRestrictionData";
  "IDataStore.getAddressArray";
  "VolumeRestrictionLib._setValues";
  "DummySTO.generateTokens";
  "DummySTO._canBuy";
  "ISecurityToken.issue";
  "DummySTOFactory.null";
  "DummySTOFactory.deploy";
  "DummySTOFactory._initializeModule";
  "DummySTOProxy.null";
  "DummySTOProxy._upgradeTo";
  "MockBurnFactory.deploy";
  "MockBurnFactory._initializeModule";
  "MockModuleRegistry.addMoreReputation";
  "MockRedemptionManager.transferToRedeem";
  "ISecurityToken.transferFrom";
  "MockRedemptionManager.redeemTokenByOwner";
  "ISecurityToken.redeem";
  "MockRedemptionManager.redeemTokensByPartition";
  "ISecurityToken.redeemByPartition";
  "MockRedemptionManager.operatorRedeemTokensByPartition";
  "ISecurityToken.operatorRedeemByPartition";
  "MockRedemptionManager.operatorTransferToRedeem";
  "ISecurityToken.operatorTransferByPartition";
  "PolyTokenFaucet.getTokens";
  "totalSupply_.add";
  "PolyTokenFaucet.decreaseApproval";
  "SecurityTokenMock.initialize";
  "SecurityToken.initialize";
  "SecurityTokenRegistryMock.changeTheDeployedAddress";
  "DividendCheckpoint.configure";
  "DividendCheckpoint._setWallet";
  "DividendCheckpoint.changeWallet";
  "DividendCheckpoint._onlySecurityTokenOwner";
  "DividendCheckpoint.getTreasuryWallet";
  "IDataStore.getAddress";
  "DividendCheckpoint.getDataStore";
  "DividendCheckpoint.createCheckpoint";
  "ISecurityToken.createCheckpoint";
  "DividendCheckpoint.pushDividendPaymentToAddresses";
  "DividendCheckpoint._validDividendIndex";
  "DividendCheckpoint._payDividend";
  "DividendCheckpoint.pushDividendPayment";
  "ISecurityToken.getInvestorsSubsetAt";
  "DividendCheckpoint.pullDividendPayment";
  "DividendCheckpoint.calculateDividend";
  "ISecurityToken.balanceOfAt";
  "balance.mul";
  "claim.mul";
  "DividendCheckpoint.getDividendsData";
  "DividendCheckpoint.getDividendData";
  "DividendCheckpoint.getDividendProgress";
  "ISecurityToken.getInvestorsAt";
  "claim.sub";
  "DividendCheckpoint.getCheckpointData";
  "ISecurityToken.currentCheckpointId";
  "ERC20DividendCheckpoint.createDividend";
  "ERC20DividendCheckpoint.createDividendWithExclusions";
  "ERC20DividendCheckpoint.createDividendWithCheckpoint";
  "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions";
  "ERC20DividendCheckpoint.createDividendWithCheckpointAndExclusions";
  "ISecurityToken.totalSupplyAt";
  "excludedSupply.add";
  "currentSupply.sub";
  "ERC20DividendCheckpoint._emitERC20DividendDepositedEvent";
  "claim.add";
  "ERC20DividendCheckpoint.reclaimDividend";
  "ERC20DividendCheckpoint.withdrawWithholding";
  "ERC20DividendCheckpointFactory.null";
  "ERC20DividendCheckpointFactory.deploy";
  "ERC20DividendCheckpointFactory._initializeModule";
  "ERC20DividendCheckpointProxy.null";
  "ERC20DividendCheckpointProxy._upgradeTo";
  "EtherDividendCheckpoint.createDividend";
  "EtherDividendCheckpoint.createDividendWithExclusions";
  "EtherDividendCheckpoint.createDividendWithCheckpoint";
  "EtherDividendCheckpoint._createDividendWithCheckpointAndExclusions";
  "EtherDividendCheckpoint.createDividendWithCheckpointAndExclusions";
  "_payee.send";
  "EtherDividendCheckpoint.reclaimDividend";
  "wallet.transfer";
  "EtherDividendCheckpoint.withdrawWithholding";
  "EtherDividendCheckpointFactory.null";
  "EtherDividendCheckpointFactory.deploy";
  "EtherDividendCheckpointFactory._initializeModule";
  "EtherDividendCheckpointProxy.null";
  "EtherDividendCheckpointProxy._upgradeTo";
  "PLCRVotingCheckpoint.createBallot";
  "PLCRVotingCheckpoint._createBallotWithCheckpoint";
  "PLCRVotingCheckpoint.createCustomBallot";
  "PLCRVotingCheckpoint._validValueCheck";
  "PLCRVotingCheckpoint.commitVote";
  "PLCRVotingCheckpoint._validBallotId";
  "PLCRVotingCheckpoint.isVoterAllowed";
  "PLCRVotingCheckpoint.getCurrentBallotStage";
  "PLCRVotingCheckpoint.revealVote";
  "PLCRVotingCheckpoint.changeBallotExemptedVotersList";
  "PLCRVotingCheckpoint._changeBallotExemptedVotersList";
  "PLCRVotingCheckpoint.changeBallotExemptedVotersListMulti";
  "PLCRVotingCheckpoint.changeBallotStatus";
  "commitTimeEnd.add";
  "PLCRVotingCheckpoint.getBallotResults";
  "supplyAtCheckpoint.mul";
  "PLCRVotingCheckpoint.getBallotDetails";
  "PLCRVotingCheckpointFactory.null";
  "PLCRVotingCheckpointFactory.deploy";
  "PLCRVotingCheckpointFactory._initializeModule";
  "PLCRVotingCheckpointProxy.null";
  "PLCRVotingCheckpointProxy._upgradeTo";
  "WeightedVoteCheckpoint.createBallot";
  "WeightedVoteCheckpoint._createCustomBallot";
  "WeightedVoteCheckpoint.createCustomBallot";
  "WeightedVoteCheckpoint.castVote";
  "WeightedVoteCheckpoint._validBallotId";
  "WeightedVoteCheckpoint.isVoterAllowed";
  "WeightedVoteCheckpoint.changeBallotExemptedVotersList";
  "WeightedVoteCheckpoint._changeBallotExemptedVotersList";
  "WeightedVoteCheckpoint.changeBallotExemptedVotersListMulti";
  "WeightedVoteCheckpoint.getBallotResults";
  "WeightedVoteCheckpoint.getBallotDetails";
  "WeightedVoteCheckpointFactory.null";
  "WeightedVoteCheckpointFactory.deploy";
  "WeightedVoteCheckpointFactory._initializeModule";
  "WeightedVoteCheckpointProxy.null";
  "WeightedVoteCheckpointProxy._upgradeTo";
  "VotingCheckpoint.changeDefaultExemptedVotersList";
  "VotingCheckpoint._changeDefaultExemptedVotersList";
  "VotingCheckpoint.changeDefaultExemptedVotersListMulti";
  "TrackedRedemption.redeemTokens";
  "ISecurityToken.redeemFrom";
  "TrackedRedemptionFactory.null";
  "TrackedRedemptionFactory.deploy";
  "TrackedRedemptionFactory._initializeModule";
  "ScheduledCheckpoint.addSchedule";
  "ScheduledCheckpoint._onlySecurityTokenOwner";
  "ScheduledCheckpoint.removeSchedule";
  "ScheduledCheckpoint.executeTransfer";
  "ScheduledCheckpoint._updateAll";
  "ScheduledCheckpoint.update";
  "ScheduledCheckpoint._update";
  "now.sub";
  "periods.mul";
  "BokkyPooBahsDateTimeLibrary.diffDays";
  "BokkyPooBahsDateTimeLibrary.addDays";
  "totalPeriods.mul";
  "ScheduledCheckpoint.updateAll";
  "ScheduledCheckpointFactory.null";
  "ScheduledCheckpointFactory.deploy";
  "ScheduledCheckpointFactory._initializeModule";
  "KYCTransferManager.executeTransfer";
  "KYCTransferManager.checkKYC";
  "KYCTransferManager.modifyKYC";
  "KYCTransferManager._modifyKYC";
  "KYCTransferManager.getDataStore";
  "KYCTransferManager._getKYCKey";
  "IDataStore.getAddressArrayLength";
  "IDataStore.getAddressArrayElement";
  "IDataStore.deleteAddress";
  "KYCTransferManager.getKYCAddresses";
  "KYCTransferManagerFactory.null";
  "KYCTransferManagerFactory.deploy";
  "KYCTransferManagerFactory._initializeModule";
  "SignedTransferManager.checkSignatureValidity";
  "abi.decode";
  "SignedTransferManager._checkSignatureIsInvalid";
  "SignedTransferManager.checkSigner";
  "SignedTransferManager._checkSigner";
  "SignedTransferManager.executeTransfer";
  "SignedTransferManager._invalidateSignature";
  "hash.toEthSignedMessageHash";
  "SignedTransferManager.invalidateSignature";
  "SignedTransferManager.getDataStore";
  "IDataStore.getBool";
  "SignedTransferManager._checkPerm";
  "IDataStore.setBool";
  "SignedTransferManagerFactory.null";
  "SignedTransferManagerFactory.deploy";
  "SignedTransferManagerFactory._initializeModule";
  "Module.withPerm";
  "Module._checkPerm";
  "Ownable.owner";
  "ICheckPermission.checkPermission";
  "Module._onlySecurityTokenOwner";
  "Module.onlyFactoryOwner";
  "Module.onlyFactoryOrOwner";
  "Module.pause";
  "Pausable._pause";
  "Module.unpause";
  "Pausable._unpause";
  "Module.takeUsageFee";
  "IModuleFactory.usageCostInPoly";
  "Module.getDataStore";
  "ISecurityToken.dataStore";
  "Module.reclaimERC20";
  "Module.reclaimETH";
  "ModuleFactory.changeSTVersionBounds";
  "ModuleFactory.setupCostInPoly";
  "ModuleFactory._takeFee";
  "ModuleFactory._initializeModule";
  "IBoot.getInitFunction";
  "Util.getSig";
  "_module.call";
  "GeneralPermissionManager.changePermission";
  "GeneralPermissionManager._changePermission";
  "GeneralPermissionManager.changePermissionMulti";
  "GeneralPermissionManager.getAllModulesAndPermsFromTypes";
  "IModule.getPermissions";
  "GeneralPermissionManagerFactory.null";
  "GeneralPermissionManagerFactory.deploy";
  "GeneralPermissionManagerProxy.null";
  "GeneralPermissionManagerProxy._upgradeTo";
  "CappedSTO.";
  "CappedSTO.buyTokens";
  "CappedSTO.configure";
  "CappedSTO._setFundRaiseType";
  "CappedSTO.changeAllowBeneficialInvestments";
  "CappedSTO._processTx";
  "weiAmount.sub";
  "CappedSTO._forwardFunds";
  "CappedSTO.buyTokensWithPoly";
  "CappedSTO._forwardPoly";
  "_investedPOLY.sub";
  "CappedSTO._preValidatePurchase";
  "CappedSTO._getTokenAmount";
  "_investedAmount.sub";
  "totalTokensSold.add";
  "CappedSTO._processPurchase";
  "CappedSTO._canBuy";
  "CappedSTO._deliverTokens";
  "_investedAmount.mul";
  "tokens.div";
  "cap.sub";
  "ISecurityToken.granularity";
  "tokens.mul";
  "CappedSTOFactory.null";
  "CappedSTOFactory.deploy";
  "CappedSTOProxy.null";
  "CappedSTOProxy._upgradeTo";
  "PreSaleSTO.allocateTokens";
  "PreSaleSTO._canBuy";
  "investorCount.add";
  "PreSaleSTO.allocateTokensMulti";
  "PreSaleSTOFactory.null";
  "PreSaleSTOFactory.deploy";
  "PreSaleSTOProxy.null";
  "PreSaleSTOProxy._upgradeTo";
  "STO._canBuy";
  "STO._getKey";
  "USDTieredSTO.validETH";
  "USDTieredSTO._getOracle";
  "USDTieredSTO.validPOLY";
  "USDTieredSTO.configure";
  "USDTieredSTO._modifyTimes";
  "USDTieredSTO._modifyTiers";
  "USDTieredSTO._setFundRaiseType";
  "USDTieredSTO._modifyAddresses";
  "USDTieredSTO._modifyLimits";
  "USDTieredSTO.modifyFunding";
  "USDTieredSTO._isSTOStarted";
  "USDTieredSTO.modifyLimits";
  "USDTieredSTO.modifyTiers";
  "USDTieredSTO.modifyTimes";
  "USDTieredSTO.modifyAddresses";
  "USDTieredSTO._modifyUSDTokens";
  "USDTieredSTO.finalize";
  "tempReturned.add";
  "tempSold.add";
  "tempReturned.div";
  "tempReturned.mul";
  "USDTieredSTO.changeNonAccreditedLimit";
  "USDTieredSTO.getAccreditedData";
  "USDTieredSTO._getIsAccredited";
  "USDTieredSTO.changeAllowBeneficialInvestments";
  "USDTieredSTO.";
  "USDTieredSTO.buyWithETHRateLimited";
  "USDTieredSTO.buyWithETH";
  "USDTieredSTO.buyWithPOLY";
  "USDTieredSTO.buyWithPOLYRateLimited";
  "USDTieredSTO.buyWithUSD";
  "USDTieredSTO.buyWithUSDRateLimited";
  "USDTieredSTO._getSpentvalues";
  "USDTieredSTO.getTokensMinted";
  "USDTieredSTO._buyWithTokens";
  "USDTieredSTO.getRate";
  "USDTieredSTO._buyTokens";
  "USDTieredSTO._buyTokensChecks";
  "USDTieredSTO._calculateTier";
  "allowedUSD.sub";
  "spentUSD.add";
  "fundsRaisedUSD.add";
  "USDTieredSTO.isOpen";
  "investedUSD.add";
  "USDTieredSTO._isAccredited";
  "investorLimitUSD.sub";
  "USDTieredSTO._purchaseTier";
  "investedUSD.sub";
  "_tierRemaining.div";
  "purchasedTokens.div";
  "purchasedTokens.mul";
  "USDTieredSTO.capReached";
  "USDTieredSTO.convertToUSD";
  "USDTieredSTO.convertFromUSD";
  "USDTieredSTO.getTokensSold";
  "tokensMinted.add";
  "USDTieredSTO.getTokensSoldFor";
  "tokensSold.add";
  "USDTieredSTO.getTokensSoldByTier";
  "USDTieredSTO.getSTODetails";
  "ISecurityToken.polymathRegistry";
  "USDTieredSTOFactory.null";
  "USDTieredSTOFactory.deploy";
  "USDTieredSTOProxy.null";
  "USDTieredSTOProxy._upgradeTo";
  "BlacklistTransferManager.executeTransfer";
  "BlacklistTransferManager._verifyTransfer";
  "endTimeTemp.add";
  "repeatPeriodTimeTemp.mul";
  "BlacklistTransferManager.addBlacklistType";
  "BlacklistTransferManager._addBlacklistType";
  "BlacklistTransferManager._addBlacklistTypeDetails";
  "BlacklistTransferManager._validParams";
  "BlacklistTransferManager.addBlacklistTypeMulti";
  "BlacklistTransferManager.modifyBlacklistType";
  "BlacklistTransferManager._modifyBlacklistType";
  "BlacklistTransferManager.modifyBlacklistTypeMulti";
  "BlacklistTransferManager.deleteBlacklistType";
  "BlacklistTransferManager._deleteBlacklistType";
  "BlacklistTransferManager.deleteBlacklistTypeMulti";
  "BlacklistTransferManager.addInvestorToBlacklist";
  "BlacklistTransferManager._addInvestorToBlacklist";
  "BlacklistTransferManager.addInvestorToBlacklistMulti";
  "BlacklistTransferManager.addMultiInvestorToBlacklistMulti";
  "BlacklistTransferManager.addInvestorToNewBlacklist";
  "BlacklistTransferManager.deleteInvestorFromBlacklist";
  "BlacklistTransferManager._deleteInvestorFromBlacklist";
  "BlacklistTransferManager.deleteInvestorFromAllBlacklist";
  "BlacklistTransferManager._deleteInvestorFromAllBlacklist";
  "BlacklistTransferManager.deleteInvestorFromAllBlacklistMulti";
  "BlacklistTransferManager.deleteMultiInvestorsFromBlacklistMulti";
  "_repeatPeriodTime.mul";
  "_endTime.sub";
  "BlacklistTransferManager.getTokensByPartition";
  "BlacklistTransferManagerFactory.null";
  "BlacklistTransferManagerFactory.deploy";
  "BlacklistTransferManagerProxy.null";
  "BlacklistTransferManagerProxy._upgradeTo";
  "CountTransferManager.executeTransfer";
  "CountTransferManager._verifyTransfer";
  "ISecurityToken.holderCount";
  "ISecurityToken.balanceOf";
  "CountTransferManagerFactory.null";
  "CountTransferManagerFactory.deploy";
  "CountTransferManagerProxy.null";
  "CountTransferManagerProxy._upgradeTo";
  "GeneralTransferManager.executeTransfer";
  "GeneralTransferManager._processTransferSignature";
  "GeneralTransferManager._verifyTransfer";
  "GeneralTransferManager._modifyKYCDataSignedMulti";
  "GeneralTransferManager._getValuesForTransfer";
  "GeneralTransferManager._validExpiry";
  "GeneralTransferManager._adjustTimes";
  "GeneralTransferManager._validLockTime";
  "GeneralTransferManager.getAddressBytes32";
  "GeneralTransferManager.modifyTransferRequirements";
  "GeneralTransferManager._modifyTransferRequirements";
  "GeneralTransferManager.modifyTransferRequirementsMulti";
  "GeneralTransferManager.modifyKYCData";
  "GeneralTransferManager._modifyKYCData";
  "GeneralTransferManager._isExistingInvestor";
  "VersionUtils.packKYC";
  "GeneralTransferManager._getKey";
  "GeneralTransferManager.modifyKYCDataMulti";
  "GeneralTransferManager.modifyInvestorFlag";
  "GeneralTransferManager._modifyInvestorFlag";
  "GeneralTransferManager.modifyInvestorFlagMulti";
  "GeneralTransferManager.modifyKYCDataSigned";
  "GeneralTransferManager._modifyKYCDataSigned";
  "GeneralTransferManager._checkSig";
  "GeneralTransferManager.modifyKYCDataSignedMulti";
  "_hash.toEthSignedMessageHash";
  "GeneralTransferManager._getKYCValues";
  "VersionUtils.unpackKYC";
  "GeneralTransferManager.getAllInvestors";
  "GeneralTransferManager.getInvestors";
  "IDataStore.getAddressArrayElements";
  "GeneralTransferManager.getAllInvestorFlags";
  "GeneralTransferManager._getInvestorFlags";
  "GeneralTransferManager.getInvestorFlag";
  "GeneralTransferManager.getInvestorFlags";
  "GeneralTransferManager.getAllKYCData";
  "GeneralTransferManager._kycData";
  "GeneralTransferManager.getKYCData";
  "GeneralTransferManager.getTokensByPartition";
  "GeneralTransferManagerFactory.null";
  "GeneralTransferManagerFactory.deploy";
  "GeneralTransferManagerProxy.null";
  "GeneralTransferManagerProxy._upgradeTo";
  "LockUpTransferManager.executeTransfer";
  "LockUpTransferManager._verifyTransfer";
  "LockUpTransferManager._checkIfValidTransfer";
  "LockUpTransferManager.addNewLockUpType";
  "LockUpTransferManager._addNewLockUpType";
  "LockUpTransferManager.addNewLockUpTypeMulti";
  "LockUpTransferManager.addLockUpByName";
  "LockUpTransferManager._addLockUpByName";
  "LockUpTransferManager.addLockUpByNameMulti";
  "LockUpTransferManager._checkLengthOfArray";
  "LockUpTransferManager.addNewLockUpToUser";
  "LockUpTransferManager._addNewLockUpToUser";
  "LockUpTransferManager.addNewLockUpToUserMulti";
  "LockUpTransferManager.removeLockUpFromUser";
  "LockUpTransferManager._removeLockUpFromUser";
  "LockUpTransferManager.removeLockupType";
  "LockUpTransferManager._removeLockupType";
  "LockUpTransferManager.removeLockupTypeMulti";
  "LockUpTransferManager.removeLockUpFromUserMulti";
  "LockUpTransferManager.modifyLockUpType";
  "LockUpTransferManager._modifyLockUpType";
  "LockUpTransferManager.modifyLockUpTypeMulti";
  "LockUpTransferManager.getLockUp";
  "LockUpTransferManager._getUnlockedAmountForLockup";
  "LockUpTransferManager.getAllLockupData";
  "LockUpTransferManager.getListOfAddresses";
  "LockUpTransferManager._validLockUpCheck";
  "LockUpTransferManager.getLockedTokenToUser";
  "LockUpTransferManager._checkZeroAddress";
  "totalRemainingLockedAmount.add";
  "currentBalance.sub";
  "LockUpTransferManager._checkValidStartTime";
  "LockUpTransferManager._checkLockUpParams";
  "LockUpTransferManager._checkValidName";
  "LockUpTransferManager.getTokensByPartition";
  "Math.min";
  "LockUpTransferManagerFactory.null";
  "LockUpTransferManagerFactory.deploy";
  "LockUpTransferManagerProxy.null";
  "LockUpTransferManagerProxy._upgradeTo";
  "ManualApprovalTransferManager.executeTransfer";
  "ManualApprovalTransferManager._verifyTransfer";
  "ManualApprovalTransferManager.addManualApproval";
  "ManualApprovalTransferManager._addManualApproval";
  "ManualApprovalTransferManager._revokeManualApproval";
  "ManualApprovalTransferManager.addManualApprovalMulti";
  "ManualApprovalTransferManager._checkInputLengthArray";
  "ManualApprovalTransferManager.modifyManualApproval";
  "ManualApprovalTransferManager._modifyManualApproval";
  "allowance.add";
  "ManualApprovalTransferManager.modifyManualApprovalMulti";
  "ManualApprovalTransferManager.revokeManualApproval";
  "ManualApprovalTransferManager.revokeManualApprovalMulti";
  "ManualApprovalTransferManagerFactory.null";
  "ManualApprovalTransferManagerFactory.deploy";
  "ManualApprovalTransferManagerProxy.null";
  "ManualApprovalTransferManagerProxy._upgradeTo";
  "PercentageTransferManager.executeTransfer";
  "PercentageTransferManager._verifyTransfer";
  "newBalance.mul";
  "IERC20.totalSupply";
  "PercentageTransferManager.modifyWhitelistMulti";
  "PercentageTransferManager.modifyWhitelist";
  "PercentageTransferManagerFactory.null";
  "PercentageTransferManagerFactory.deploy";
  "PercentageTransferManagerProxy.null";
  "PercentageTransferManagerProxy._upgradeTo";
  "VolumeRestrictionTM.executeTransfer";
  "VolumeRestrictionTM._verifyTransfer";
  "VolumeRestrictionTM._updateStorage";
  "VolumeRestrictionTM._restrictionCheck";
  "VolumeRestrictionTM.addIndividualRestriction";
  "VolumeRestrictionTM._getValidStartTime";
  "VolumeRestrictionTM._checkInputParams";
  "VolumeRestrictionTM.removeIndividualRestriction";
  "VolumeRestrictionTM.addIndividualDailyRestriction";
  "VolumeRestrictionTM.removeIndividualDailyRestriction";
  "VolumeRestrictionTM.addIndividualDailyRestrictionMulti";
  "VolumeRestrictionTM._checkLengthOfArray";
  "VolumeRestrictionTM.addIndividualRestrictionMulti";
  "VolumeRestrictionTM.addDefaultRestriction";
  "VolumeRestrictionTM.addDefaultDailyRestriction";
  "VolumeRestrictionTM._removeIndividualRestriction";
  "VolumeRestrictionTM.removeIndividualRestrictionMulti";
  "VolumeRestrictionTM._removeIndividualDailyRestriction";
  "VolumeRestrictionTM.removeIndividualDailyRestrictionMulti";
  "VolumeRestrictionTM.modifyIndividualRestriction";
  "VolumeRestrictionTM._isAllowedToModify";
  "VolumeRestrictionTM.modifyIndividualDailyRestriction";
  "VolumeRestrictionTM.modifyIndividualDailyRestrictionMulti";
  "VolumeRestrictionTM.modifyIndividualRestrictionMulti";
  "VolumeRestrictionTM.modifyDefaultRestriction";
  "VolumeRestrictionTM.modifyDefaultDailyRestriction";
  "VolumeRestrictionTM._bucketCheck";
  "VolumeRestrictionTM._checkValidAmountToTransact";
  "VolumeRestrictionTM._dailyTxCheck";
  "VolumeRestrictionTM._validAllowedAmount";
  "VolumeRestrictionTM._isValidAmountAfterRestrictionChanges";
  "_dailyLastTradedDayTime.add";
  "counter.add";
  "counter.sub";
  "temp.mul";
  "sumOfLastPeriod.sub";
  "_fromTime.add";
  "_diffDays.mul";
  "VolumeRestrictionTM._allowedAmountToTransact";
  "_allowedAmount.sub";
  "VolumeRestrictionTM._updateStorageActual";
  "VolumeRestrictionTM.getTokensByPartition";
  "VolumeRestrictionTM.getIndividualBucketDetailsToUser";
  "VolumeRestrictionTM._getBucketDetails";
  "VolumeRestrictionTM.getDefaultBucketDetailsToUser";
  "VolumeRestrictionTM.getIndividualRestriction";
  "VolumeRestrictionTM._volumeRestrictionSplay";
  "VolumeRestrictionTM.getIndividualDailyRestriction";
  "VolumeRestrictionTM.getDefaultRestriction";
  "VolumeRestrictionTM.getDefaultDailyRestriction";
  "VolumeRestrictionTM.getRestrictionData";
  "VolumeRestrictionTMFactory.null";
  "VolumeRestrictionTMFactory.deploy";
  "VolumeRestrictionTMProxy.null";
  "VolumeRestrictionTMProxy._upgradeTo";
  "UpgradableModuleFactory.setLogicContract";
  "IModuleRegistry.unverifyModule";
  "OwnedUpgradeabilityProxy.upgradeToAndCall";
  "VestingEscrowWallet.configure";
  "VestingEscrowWallet._setWallet";
  "VestingEscrowWallet.changeTreasuryWallet";
  "VestingEscrowWallet.depositTokens";
  "VestingEscrowWallet._depositTokens";
  "unassignedTokens.add";
  "VestingEscrowWallet.sendToTreasury";
  "ISecurityToken.transfer";
  "VestingEscrowWallet.getTreasuryWallet";
  "VestingEscrowWallet.pushAvailableTokens";
  "VestingEscrowWallet._sendTokens";
  "VestingEscrowWallet.pullAvailableTokens";
  "VestingEscrowWallet.addTemplate";
  "VestingEscrowWallet._addTemplate";
  "VestingEscrowWallet._isTemplateExists";
  "VestingEscrowWallet._validateTemplate";
  "VestingEscrowWallet.removeTemplate";
  "VestingEscrowWallet.addSchedule";
  "VestingEscrowWallet._addSchedule";
  "VestingEscrowWallet._addScheduleFromTemplate";
  "VestingEscrowWallet.addScheduleFromTemplate";
  "numberOfTokens.sub";
  "unassignedTokens.sub";
  "VestingEscrowWallet.modifySchedule";
  "VestingEscrowWallet._modifySchedule";
  "VestingEscrowWallet._checkSchedule";
  "VestingEscrowWallet.revokeSchedule";
  "VestingEscrowWallet._sendTokensPerSchedule";
  "VestingEscrowWallet._getReleasedTokens";
  "VestingEscrowWallet._deleteUserToTemplates";
  "VestingEscrowWallet._deleteTemplateToUsers";
  "VestingEscrowWallet.revokeAllSchedules";
  "VestingEscrowWallet._revokeAllSchedules";
  "VestingEscrowWallet.getSchedule";
  "VestingEscrowWallet._getScheduleState";
  "VestingEscrowWallet._getAvailableTokens";
  "releasedTokens.sub";
  "VestingEscrowWallet.pushAvailableTokensMulti";
  "VestingEscrowWallet.addScheduleMulti";
  "VestingEscrowWallet.addScheduleFromTemplateMulti";
  "VestingEscrowWallet.revokeSchedulesMulti";
  "VestingEscrowWallet.modifyScheduleMulti";
  "_duration.div";
  "_numberOfTokens.div";
  "VestingEscrowWalletFactory.null";
  "VestingEscrowWalletFactory.deploy";
  "VestingEscrowWalletProxy.null";
  "VestingEscrowWalletProxy._upgradeTo";
  "IMedianizer.peek";
  "PolyOracle.isAdminOrOwner";
  "PolyOracle.null";
  "POLYUSD.mul";
  "POLYUSD.add";
  "POLYUSD.sub";
  "PolyOracle.schedulePriceUpdatesFixed";
  "PolyOracle.schedulePriceUpdatesRolling";
  "PolyOracle.setGasPrice";
  "StableOracle.getCurrencyAddress";
  "IOracle.getCurrencyAddress";
  "StableOracle.getCurrencySymbol";
  "IOracle.getCurrencySymbol";
  "StableOracle.getCurrencyDenominated";
  "IOracle.getCurrencyDenominated";
  "StableOracle._change";
  "_newPrice.sub";
  "_oldPrice.sub";
  "diff.mul";
  "OwnedProxy.ifOwner";
  "OwnedProxy._owner";
  "OwnedProxy._fallback";
  "OwnedProxy.null";
  "OwnedProxy._setOwner";
  "OwnedProxy.proxyOwner";
  "OwnedProxy.implementation";
  "OwnedProxy._implementation";
  "OwnedProxy.transferProxyOwnership";
  "OwnedUpgradeabilityProxy.ifOwner";
  "OwnedUpgradeabilityProxy._upgradeabilityOwner";
  "OwnedUpgradeabilityProxy._fallback";
  "OwnedUpgradeabilityProxy.null";
  "OwnedUpgradeabilityProxy._setUpgradeabilityOwner";
  "OwnedUpgradeabilityProxy.proxyOwner";
  "OwnedUpgradeabilityProxy.implementation";
  "OwnedUpgradeabilityProxy._implementation";
  "OwnedUpgradeabilityProxy.transferProxyOwnership";
  "OwnedUpgradeabilityProxy.upgradeTo";
  "OwnedUpgradeabilityProxy._upgradeTo";
  "OwnedUpgradeabilityProxy._upgradeToAndCall";
  "Proxy._fallback";
  "Proxy._delegate";
  "Proxy._implementation";
  "Proxy.";
  "UpgradeabilityProxy._upgradeTo";
  "Address.isContract";
  "STFactory._deploy";
  "ISecurityToken.changeDataStore";
  "DataStoreFactory.generateDataStore";
  "ISecurityToken.changeTreasuryWallet";
  "ISecurityToken.addModule";
  "IOwnable.transferOwnership";
  "SecurityTokenProxy.call";
  "STFactory.upgradeToken";
  "IModuleRegistry.isCompatibleModule";
  "STGetter.getInvestorCount";
  "STGetter.getInvestors";
  "STGetter.getInvestorsAt";
  "STGetter.balanceOfAt";
  "STGetter.getInvestorsSubsetAt";
  "STGetter.getTreasuryWallet";
  "TokenLib.getValueAt";
  "STGetter.balanceOf";
  "STGetter.iterateInvestors";
  "STGetter.checkPermission";
  "IPermissionManager.checkPermission";
  "STGetter.partitionsOf";
  "ITransferManager.getPartitions";
  "STGetter._appendPartition";
  "SecurityToken.updateFromRegistry";
  "SecurityToken._onlyModuleOrOwner";
  "SecurityToken.owner";
  "SecurityToken.isModule";
  "SecurityToken._isValidOperator";
  "SecurityToken._isAuthorised";
  "SecurityToken.allowance";
  "SecurityToken._onlyController";
  "SecurityToken.isControllable";
  "SecurityToken._onlyOwner";
  "SecurityToken.isOwner";
  "SecurityToken._onlyModule";
  "SecurityToken.addModuleWithLabel";
  "IModuleFactory.setupCostInPoly";
  "ERC20.approve";
  "IModuleFactory.deploy";
  "SecurityToken._addModuleData";
  "IModuleFactory.name";
  "SecurityToken.addModule";
  "SecurityToken.archiveModule";
  "TokenLib.archiveModule";
  "SecurityToken.upgradeModule";
  "SecurityToken.upgradeToken";
  "IUpgradableTokenFactory.upgradeToken";
  "SecurityToken.unarchiveModule";
  "SecurityToken.removeModule";
  "SecurityToken.withdrawERC20";
  "SecurityToken.changeModuleBudget";
  "SecurityToken.updateTokenDetails";
  "SecurityToken.changeGranularity";
  "SecurityToken.changeDataStore";
  "SecurityToken._zeroAddressCheck";
  "SecurityToken.changeName";
  "SecurityToken.changeTreasuryWallet";
  "IDataStore.setAddress";
  "SecurityToken._adjustInvestorCount";
  "SecurityToken.balanceOf";
  "SecurityToken.freezeTransfers";
  "SecurityToken.unfreezeTransfers";
  "SecurityToken._adjustBalanceCheckpoints";
  "SecurityToken.transfer";
  "SecurityToken.transferWithData";
  "SecurityToken._transferWithData";
  "SecurityToken._isValidTransfer";
  "SecurityToken._updateTransfer";
  "SecurityToken._transfer";
  "SecurityToken.transferFrom";
  "SecurityToken.transferFromWithData";
  "Proxy.transferFrom";
  "SecurityToken.balanceOfByPartition";
  "SecurityToken._balanceOfByPartition";
  "ITransferManager.getTokensByPartition";
  "SecurityToken.transferByPartition";
  "SecurityToken._transferByPartition";
  "SecurityToken._isValidPartition";
  "SecurityToken._returnPartition";
  "_afterBalance.sub";
  "SecurityToken.authorizeOperator";
  "SecurityToken._approve";
  "SecurityToken.revokeOperator";
  "SecurityToken.authorizeOperatorByPartition";
  "SecurityToken.revokeOperatorByPartition";
  "SecurityToken.operatorTransferByPartition";
  "SecurityToken._validateOperatorAndPartition";
  "SecurityToken._executeTransfer";
  "ITransferManager.executeTransfer";
  "SecurityToken.freezeIssuance";
  "SecurityToken._isIssuanceAllowed";
  "SecurityToken._isSignedByOwner";
  "SecurityToken.issue";
  "SecurityToken._issue";
  "SecurityToken._mint";
  "SecurityToken.issueMulti";
  "SecurityToken.issueByPartition";
  "SecurityToken.redeem";
  "SecurityToken._redeem";
  "SecurityToken._isValidRedeem";
  "SecurityToken._checkAndBurn";
  "SecurityToken.redeemByPartition";
  "SecurityToken._redeemByPartition";
  "SecurityToken.operatorRedeemByPartition";
  "SecurityToken._burn";
  "SecurityToken.redeemFrom";
  "SecurityToken._burnFrom";
  "SecurityToken.createCheckpoint";
  "SecurityToken.totalSupply";
  "SecurityToken.setController";
  "SecurityToken.disableController";
  "SecurityToken.canTransfer";
  "SecurityToken._canTransfer";
  "SecurityToken.canTransferFrom";
  "TokenLib.canTransfer";
  "SecurityToken.canTransferByPartition";
  "SecurityToken.setDocument";
  "SecurityToken.removeDocument";
  "TokenLib.removeDocument";
  "SecurityToken.controllerTransfer";
  "SecurityToken.controllerRedeem";
  "PolymathRegistry.getAddress";
  "SecurityToken.transferOwnership";
  "SecurityToken._transferOwnership";
  "Migrations.upgrade" -> "Migrations.setCompleted" [ color = "orange" ];
  "ModuleRegistry.onlyOwner" -> "ModuleRegistry.owner" [ color = "green" ];
  "ModuleRegistry.whenNotPausedOrOwner" -> "ModuleRegistry.owner" [ color = "green" ];
  "ModuleRegistry.whenNotPausedOrOwner" -> "ModuleRegistry.isPaused" [ color = "green" ];
  "ModuleRegistry.whenNotPaused" -> "ModuleRegistry.isPaused" [ color = "green" ];
  "ModuleRegistry.whenPaused" -> "ModuleRegistry.isPaused" [ color = "green" ];
  "ModuleRegistry.initialize" -> "ModuleRegistry.getBoolValue" [ color = "green" ];
  "ModuleRegistry.initialize" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.initialize" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.initialize" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.initialize" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.useModule" -> "IFeatureRegistry.getFeatureStatus" [ color = "orange" ];
  "ModuleRegistry.useModule" -> "ModuleRegistry.getAddressValue" [ color = "green" ];
  "ModuleRegistry.useModule" -> "ModuleRegistry.getBoolValue" [ color = "green" ];
  "ModuleRegistry.useModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.useModule" -> "IOwnable.owner" [ color = "orange" ];
  "ModuleRegistry.useModule" -> "IOwnable.owner" [ color = "orange" ];
  "ModuleRegistry.useModule" -> "ModuleRegistry.getBoolValue" [ color = "green" ];
  "ModuleRegistry.useModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.useModule" -> "ISecurityTokenRegistry.isSecurityToken" [ color = "orange" ];
  "ModuleRegistry.useModule" -> "ModuleRegistry.getAddressValue" [ color = "green" ];
  "ModuleRegistry.useModule" -> "ModuleRegistry.isCompatibleModule" [ color = "green" ];
  "ModuleRegistry.useModule" -> "ModuleRegistry.pushArray" [ color = "green" ];
  "ModuleRegistry.useModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.isCompatibleModule" -> "ISecurityToken.getVersion" [ color = "orange" ];
  "ModuleRegistry.isCompatibleModule" -> "IModuleFactory.lowerSTVersionBounds" [ color = "orange" ];
  "ModuleRegistry.isCompatibleModule" -> "IModuleFactory.upperSTVersionBounds" [ color = "orange" ];
  "ModuleRegistry.isCompatibleModule" -> "VersionUtils.lessThanOrEqual" [ color = "orange" ];
  "ModuleRegistry.isCompatibleModule" -> "VersionUtils.greaterThanOrEqual" [ color = "orange" ];
  "ModuleRegistry.registerModule" -> "IFeatureRegistry.getFeatureStatus" [ color = "orange" ];
  "ModuleRegistry.registerModule" -> "ModuleRegistry.getAddressValue" [ color = "green" ];
  "ModuleRegistry.registerModule" -> "IOwnable.owner" [ color = "orange" ];
  "ModuleRegistry.registerModule" -> "ModuleRegistry.owner" [ color = "green" ];
  "ModuleRegistry.registerModule" -> "ModuleRegistry.owner" [ color = "green" ];
  "ModuleRegistry.registerModule" -> "ModuleRegistry.getUintValue" [ color = "green" ];
  "ModuleRegistry.registerModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.registerModule" -> "IModuleFactory.types" [ color = "orange" ];
  "ModuleRegistry.registerModule" -> "IModuleFactory.types" [ color = "orange" ];
  "ModuleRegistry.registerModule" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.registerModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.registerModule" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.registerModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.registerModule" -> "ModuleRegistry.getArrayAddress" [ color = "green" ];
  "ModuleRegistry.registerModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.registerModule" -> "ModuleRegistry.pushArray" [ color = "green" ];
  "ModuleRegistry.registerModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.registerModule" -> "IOwnable.owner" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.getUintValue" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "IOwnable.owner" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.owner" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.getUintValue" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.getArrayAddress" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.getArrayAddress" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.setArrayIndexValue" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.deleteArrayAddress" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.setArray" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.removeModule" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.removeModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.verifyModule" -> "ModuleRegistry.getUintValue" [ color = "green" ];
  "ModuleRegistry.verifyModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.verifyModule" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.verifyModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.unverifyModule" -> "ModuleRegistry.owner" [ color = "green" ];
  "ModuleRegistry.unverifyModule" -> "IOwnable.owner" [ color = "orange" ];
  "ModuleRegistry.unverifyModule" -> "ModuleRegistry.getUintValue" [ color = "green" ];
  "ModuleRegistry.unverifyModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.unverifyModule" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.unverifyModule" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.getTagsByTypeAndToken" -> "ModuleRegistry.getModulesByTypeAndToken" [ color = "green" ];
  "ModuleRegistry.getTagsByTypeAndToken" -> "ModuleRegistry._tagsByModules" [ color = "green" ];
  "ModuleRegistry.getTagsByType" -> "ModuleRegistry.getModulesByType" [ color = "green" ];
  "ModuleRegistry.getTagsByType" -> "ModuleRegistry._tagsByModules" [ color = "green" ];
  "ModuleRegistry._tagsByModules" -> "IModuleFactory.tags" [ color = "orange" ];
  "ModuleRegistry._tagsByModules" -> "IModuleFactory.tags" [ color = "orange" ];
  "ModuleRegistry.getFactoryDetails" -> "ModuleRegistry.getBoolValue" [ color = "green" ];
  "ModuleRegistry.getFactoryDetails" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.getFactoryDetails" -> "ModuleRegistry.getArrayAddress" [ color = "green" ];
  "ModuleRegistry.getFactoryDetails" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.getModulesByType" -> "ModuleRegistry.getArrayAddress" [ color = "green" ];
  "ModuleRegistry.getModulesByType" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "ModuleRegistry.getArrayAddress" [ color = "green" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "IFeatureRegistry.getFeatureStatus" [ color = "orange" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "ModuleRegistry.getAddressValue" [ color = "green" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "IOwnable.owner" [ color = "orange" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "IOwnable.owner" [ color = "orange" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "ModuleRegistry.getBoolValue" [ color = "green" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "ModuleRegistry.isCompatibleModule" [ color = "green" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "ModuleRegistry.getBoolValue" [ color = "green" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "ModuleRegistry.isCompatibleModule" [ color = "green" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "IOwnable.owner" [ color = "orange" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "IOwnable.owner" [ color = "orange" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "ModuleRegistry.getBoolValue" [ color = "green" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "ModuleRegistry.isCompatibleModule" [ color = "green" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "ModuleRegistry.getBoolValue" [ color = "green" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "Encoder.getKey" [ color = "orange" ];
  "ModuleRegistry.getModulesByTypeAndToken" -> "ModuleRegistry.isCompatibleModule" [ color = "green" ];
  "ModuleRegistry.reclaimERC20" -> "IERC20.balanceOf" [ color = "orange" ];
  "ModuleRegistry.reclaimERC20" -> "IERC20.transfer" [ color = "orange" ];
  "ModuleRegistry.reclaimERC20" -> "ModuleRegistry.owner" [ color = "green" ];
  "ModuleRegistry.pause" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.unpause" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.updateFromRegistry" -> "ModuleRegistry.getAddressValue" [ color = "green" ];
  "ModuleRegistry.updateFromRegistry" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.updateFromRegistry" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "ModuleRegistry.updateFromRegistry" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.updateFromRegistry" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "ModuleRegistry.updateFromRegistry" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.updateFromRegistry" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "ModuleRegistry.transferOwnership" -> "ModuleRegistry.owner" [ color = "green" ];
  "ModuleRegistry.transferOwnership" -> "ModuleRegistry.set" [ color = "green" ];
  "ModuleRegistry.owner" -> "ModuleRegistry.getAddressValue" [ color = "green" ];
  "ModuleRegistry.isPaused" -> "ModuleRegistry.getBoolValue" [ color = "green" ];
  "ReclaimTokens.reclaimERC20" -> "IERC20.balanceOf" [ color = "orange" ];
  "ReclaimTokens.reclaimERC20" -> "IERC20.transfer" [ color = "orange" ];
  "ReclaimTokens.reclaimERC20" -> "ReclaimTokens.owner" [ color = "green" ];
  "STRGetter.getTickersByOwner" -> "STRGetter.getArrayBytes32" [ color = "green" ];
  "STRGetter.getTickersByOwner" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getTickersByOwner" -> "STRGetter._ownerInTicker" [ color = "green" ];
  "STRGetter.getTickersByOwner" -> "STRGetter._ownerInTicker" [ color = "green" ];
  "STRGetter._ownerInTicker" -> "Util.bytes32ToString" [ color = "orange" ];
  "STRGetter._ownerInTicker" -> "STRGetter.getUintValue" [ color = "green" ];
  "STRGetter._ownerInTicker" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter._ownerInTicker" -> "STRGetter.getBoolValue" [ color = "green" ];
  "STRGetter._ownerInTicker" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getTokensByOwner" -> "STRGetter._getTokens" [ color = "green" ];
  "STRGetter.getTokens" -> "STRGetter._getTokens" [ color = "green" ];
  "STRGetter._getTokens" -> "STRGetter.getArrayAddress" [ color = "green" ];
  "STRGetter._getTokens" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter._getTokens" -> "STRGetter.getArrayBytes32" [ color = "green" ];
  "STRGetter._getTokens" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter._getTokens" -> "STRGetter._ownerInToken" [ color = "green" ];
  "STRGetter._getTokens" -> "STRGetter.getArrayBytes32" [ color = "green" ];
  "STRGetter._getTokens" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter._getTokens" -> "STRGetter._ownerInToken" [ color = "green" ];
  "STRGetter._ownerInToken" -> "STRGetter.getAddressValue" [ color = "green" ];
  "STRGetter._ownerInToken" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter._ownerInToken" -> "Util.bytes32ToString" [ color = "orange" ];
  "STRGetter._ownerInToken" -> "IOwnable.owner" [ color = "orange" ];
  "STRGetter.getTokensByDelegate" -> "STRGetter.getTokens" [ color = "green" ];
  "STRGetter.getTokensByDelegate" -> "STRGetter._delegateInToken" [ color = "green" ];
  "STRGetter.getTokensByDelegate" -> "STRGetter._delegateInToken" [ color = "green" ];
  "STRGetter._delegateInToken" -> "ISecurityToken.getModulesByType" [ color = "orange" ];
  "STRGetter._delegateInToken" -> "ISecurityToken.getModule" [ color = "orange" ];
  "STRGetter._delegateInToken" -> "IPermissionManager.checkDelegate" [ color = "orange" ];
  "STRGetter.getTickerDetails" -> "Util.upper" [ color = "orange" ];
  "STRGetter.getTickerDetails" -> "STRGetter.getTickerStatus" [ color = "green" ];
  "STRGetter.getTickerDetails" -> "STRGetter.getUintValue" [ color = "green" ];
  "STRGetter.getTickerDetails" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getTickerDetails" -> "STRGetter.getTickerOwner" [ color = "green" ];
  "STRGetter.getTickerDetails" -> "STRGetter.getUintValue" [ color = "green" ];
  "STRGetter.getTickerDetails" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getTickerDetails" -> "STRGetter.getStringValue" [ color = "green" ];
  "STRGetter.getTickerDetails" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getSecurityTokenAddress" -> "Util.upper" [ color = "orange" ];
  "STRGetter.getSecurityTokenAddress" -> "STRGetter.getAddressValue" [ color = "green" ];
  "STRGetter.getSecurityTokenAddress" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getSecurityTokenData" -> "STRGetter.getStringValue" [ color = "green" ];
  "STRGetter.getSecurityTokenData" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getSecurityTokenData" -> "IOwnable.owner" [ color = "orange" ];
  "STRGetter.getSecurityTokenData" -> "STRGetter.getStringValue" [ color = "green" ];
  "STRGetter.getSecurityTokenData" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getSecurityTokenData" -> "STRGetter.getUintValue" [ color = "green" ];
  "STRGetter.getSecurityTokenData" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getSTFactoryAddress" -> "STRGetter.getAddressValue" [ color = "green" ];
  "STRGetter.getSTFactoryAddress" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getSTFactoryAddress" -> "STRGetter.getUintValue" [ color = "green" ];
  "STRGetter.getSTFactoryAddress" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getSTFactoryAddressOfVersion" -> "STRGetter.getAddressValue" [ color = "green" ];
  "STRGetter.getSTFactoryAddressOfVersion" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getLatestProtocolVersion" -> "VersionUtils.unpack" [ color = "orange" ];
  "STRGetter.getLatestProtocolVersion" -> "STRGetter.getUintValue" [ color = "green" ];
  "STRGetter.getLatestProtocolVersion" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getIsFeeInPoly" -> "STRGetter.getBoolValue" [ color = "green" ];
  "STRGetter.getExpiryLimit" -> "STRGetter.getUintValue" [ color = "green" ];
  "STRGetter.getTickerStatus" -> "STRGetter.getBoolValue" [ color = "green" ];
  "STRGetter.getTickerStatus" -> "Encoder.getKey" [ color = "orange" ];
  "STRGetter.getTickerOwner" -> "STRGetter.getAddressValue" [ color = "green" ];
  "STRGetter.getTickerOwner" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.onlyOwner" -> "SecurityTokenRegistry.owner" [ color = "green" ];
  "SecurityTokenRegistry.whenNotPausedOrOwner" -> "SecurityTokenRegistry._whenNotPausedOrOwner" [ color = "green" ];
  "SecurityTokenRegistry._whenNotPausedOrOwner" -> "SecurityTokenRegistry.owner" [ color = "green" ];
  "SecurityTokenRegistry._whenNotPausedOrOwner" -> "SecurityTokenRegistry.isPaused" [ color = "green" ];
  "SecurityTokenRegistry.whenNotPaused" -> "SecurityTokenRegistry.isPaused" [ color = "green" ];
  "SecurityTokenRegistry.whenPaused" -> "SecurityTokenRegistry.isPaused" [ color = "green" ];
  "SecurityTokenRegistry.initialize" -> "SecurityTokenRegistry.getBoolValue" [ color = "green" ];
  "SecurityTokenRegistry.initialize" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.initialize" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.initialize" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.initialize" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.initialize" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.initialize" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.initialize" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.initialize" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.initialize" -> "SecurityTokenRegistry._updateFromRegistry" [ color = "green" ];
  "SecurityTokenRegistry.updateFromRegistry" -> "SecurityTokenRegistry._updateFromRegistry" [ color = "green" ];
  "SecurityTokenRegistry._updateFromRegistry" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry._updateFromRegistry" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._updateFromRegistry" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "SecurityTokenRegistry._takeFee" -> "SecurityTokenRegistry.getFees" [ color = "green" ];
  "SecurityTokenRegistry._takeFee" -> "IERC20.transferFrom" [ color = "orange" ];
  "SecurityTokenRegistry._takeFee" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry.getFees" -> "SecurityTokenRegistry.getBoolValue" [ color = "green" ];
  "SecurityTokenRegistry.getFees" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.getFees" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry.getFees" -> "IOracle.getPrice" [ color = "orange" ];
  "SecurityTokenRegistry.getFees" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "SecurityTokenRegistry.getFees" -> "DecimalMath.div" [ color = "orange" ];
  "SecurityTokenRegistry.getFees" -> "DecimalMath.mul" [ color = "orange" ];
  "SecurityTokenRegistry.getSecurityTokenLaunchFee" -> "SecurityTokenRegistry.getFees" [ color = "green" ];
  "SecurityTokenRegistry.getTickerRegistrationFee" -> "SecurityTokenRegistry.getFees" [ color = "green" ];
  "SecurityTokenRegistry.setGetterRegistry" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._implementation" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry.registerTicker" -> "SecurityTokenRegistry._takeFee" [ color = "green" ];
  "SecurityTokenRegistry.registerTicker" -> "Util.upper" [ color = "orange" ];
  "SecurityTokenRegistry.registerTicker" -> "SecurityTokenRegistry._tickerAvailable" [ color = "green" ];
  "SecurityTokenRegistry.registerTicker" -> "SecurityTokenRegistry._tickerOwner" [ color = "green" ];
  "SecurityTokenRegistry.registerTicker" -> "SecurityTokenRegistry._deleteTickerOwnership" [ color = "green" ];
  "SecurityTokenRegistry.registerTicker" -> "SecurityTokenRegistry._addTicker" [ color = "green" ];
  "SecurityTokenRegistry.registerTicker" -> "now.add" [ color = "orange" ];
  "SecurityTokenRegistry.registerTicker" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry._addTicker" -> "SecurityTokenRegistry._setTickerOwnership" [ color = "green" ];
  "SecurityTokenRegistry._addTicker" -> "SecurityTokenRegistry._storeTickerDetails" [ color = "green" ];
  "SecurityTokenRegistry.modifyTicker" -> "Util.upper" [ color = "orange" ];
  "SecurityTokenRegistry.modifyTicker" -> "SecurityTokenRegistry._modifyTicker" [ color = "green" ];
  "SecurityTokenRegistry._modifyTicker" -> "SecurityTokenRegistry._tickerOwner" [ color = "green" ];
  "SecurityTokenRegistry._modifyTicker" -> "SecurityTokenRegistry._deleteTickerOwnership" [ color = "green" ];
  "SecurityTokenRegistry._modifyTicker" -> "SecurityTokenRegistry._tickerStatus" [ color = "green" ];
  "SecurityTokenRegistry._modifyTicker" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._modifyTicker" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._modifyTicker" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry._modifyTicker" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._modifyTicker" -> "SecurityTokenRegistry._addTicker" [ color = "green" ];
  "SecurityTokenRegistry._tickerOwner" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry._tickerOwner" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.removeTicker" -> "Util.upper" [ color = "orange" ];
  "SecurityTokenRegistry.removeTicker" -> "SecurityTokenRegistry._tickerOwner" [ color = "green" ];
  "SecurityTokenRegistry.removeTicker" -> "SecurityTokenRegistry._deleteTickerOwnership" [ color = "green" ];
  "SecurityTokenRegistry.removeTicker" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.removeTicker" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.removeTicker" -> "SecurityTokenRegistry._storeTickerDetails" [ color = "green" ];
  "SecurityTokenRegistry._tickerAvailable" -> "SecurityTokenRegistry._tickerOwner" [ color = "green" ];
  "SecurityTokenRegistry._tickerAvailable" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry._tickerAvailable" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._tickerAvailable" -> "SecurityTokenRegistry._tickerStatus" [ color = "green" ];
  "SecurityTokenRegistry._tickerStatus" -> "SecurityTokenRegistry.getBoolValue" [ color = "green" ];
  "SecurityTokenRegistry._tickerStatus" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._setTickerOwnership" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._setTickerOwnership" -> "SecurityTokenRegistry.getArrayBytes32" [ color = "green" ];
  "SecurityTokenRegistry._setTickerOwnership" -> "SecurityTokenRegistry.pushArray" [ color = "green" ];
  "SecurityTokenRegistry._setTickerOwnership" -> "Util.stringToBytes32" [ color = "orange" ];
  "SecurityTokenRegistry._setTickerOwnership" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._setTickerOwnership" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._setTickerOwnership" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._setTickerOwnership" -> "SecurityTokenRegistry.getBoolValue" [ color = "green" ];
  "SecurityTokenRegistry._setTickerOwnership" -> "SecurityTokenRegistry.pushArray" [ color = "green" ];
  "SecurityTokenRegistry._setTickerOwnership" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._storeTickerDetails" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._storeTickerDetails" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._storeTickerDetails" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._storeTickerDetails" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._storeTickerDetails" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._storeTickerDetails" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._storeTickerDetails" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._storeTickerDetails" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._storeTickerDetails" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._storeTickerDetails" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.transferTickerOwnership" -> "Util.upper" [ color = "orange" ];
  "SecurityTokenRegistry.transferTickerOwnership" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.transferTickerOwnership" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry.transferTickerOwnership" -> "SecurityTokenRegistry._tickerStatus" [ color = "green" ];
  "SecurityTokenRegistry.transferTickerOwnership" -> "IOwnable.owner" [ color = "orange" ];
  "SecurityTokenRegistry.transferTickerOwnership" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry.transferTickerOwnership" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.transferTickerOwnership" -> "SecurityTokenRegistry._deleteTickerOwnership" [ color = "green" ];
  "SecurityTokenRegistry.transferTickerOwnership" -> "SecurityTokenRegistry._setTickerOwnership" [ color = "green" ];
  "SecurityTokenRegistry.transferTickerOwnership" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._deleteTickerOwnership" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry._deleteTickerOwnership" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._deleteTickerOwnership" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._deleteTickerOwnership" -> "SecurityTokenRegistry.getArrayBytes32" [ color = "green" ];
  "SecurityTokenRegistry._deleteTickerOwnership" -> "SecurityTokenRegistry._tickerOwner" [ color = "green" ];
  "SecurityTokenRegistry._deleteTickerOwnership" -> "SecurityTokenRegistry.deleteArrayBytes32" [ color = "green" ];
  "SecurityTokenRegistry._deleteTickerOwnership" -> "SecurityTokenRegistry.getArrayBytes32" [ color = "green" ];
  "SecurityTokenRegistry._deleteTickerOwnership" -> "SecurityTokenRegistry.getArrayBytes32" [ color = "green" ];
  "SecurityTokenRegistry._deleteTickerOwnership" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._deleteTickerOwnership" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._deleteTickerOwnership" -> "Util.bytes32ToString" [ color = "orange" ];
  "SecurityTokenRegistry.changeExpiryLimit" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.changeExpiryLimit" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.generateSecurityToken" -> "SecurityTokenRegistry.generateNewSecurityToken" [ color = "green" ];
  "SecurityTokenRegistry.generateSecurityToken" -> "VersionUtils.pack" [ color = "orange" ];
  "SecurityTokenRegistry.generateNewSecurityToken" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.generateNewSecurityToken" -> "Util.upper" [ color = "orange" ];
  "SecurityTokenRegistry.generateNewSecurityToken" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.generateNewSecurityToken" -> "SecurityTokenRegistry.getBoolValue" [ color = "green" ];
  "SecurityTokenRegistry.generateNewSecurityToken" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.generateNewSecurityToken" -> "SecurityTokenRegistry._tickerOwner" [ color = "green" ];
  "SecurityTokenRegistry.generateNewSecurityToken" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.generateNewSecurityToken" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.generateNewSecurityToken" -> "SecurityTokenRegistry._takeFee" [ color = "green" ];
  "SecurityTokenRegistry.generateNewSecurityToken" -> "SecurityTokenRegistry._deployToken" [ color = "green" ];
  "SecurityTokenRegistry.generateNewSecurityToken" -> "VersionUtils.pack" [ color = "orange" ];
  "SecurityTokenRegistry.refreshSecurityToken" -> "Util.upper" [ color = "orange" ];
  "SecurityTokenRegistry.refreshSecurityToken" -> "SecurityTokenRegistry._tickerStatus" [ color = "green" ];
  "SecurityTokenRegistry.refreshSecurityToken" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry.refreshSecurityToken" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.refreshSecurityToken" -> "IOwnable.owner" [ color = "orange" ];
  "SecurityTokenRegistry.refreshSecurityToken" -> "ISecurityToken.transfersFrozen" [ color = "orange" ];
  "SecurityTokenRegistry.refreshSecurityToken" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.refreshSecurityToken" -> "SecurityTokenRegistry._deployToken" [ color = "green" ];
  "SecurityTokenRegistry._deployToken" -> "ISTFactory.deployToken" [ color = "orange" ];
  "SecurityTokenRegistry._deployToken" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry._deployToken" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._deployToken" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry._deployToken" -> "SecurityTokenRegistry._storeSecurityTokenData" [ color = "green" ];
  "SecurityTokenRegistry._deployToken" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._deployToken" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.modifySecurityToken" -> "Util.upper" [ color = "orange" ];
  "SecurityTokenRegistry.modifySecurityToken" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.modifySecurityToken" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.modifySecurityToken" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.modifySecurityToken" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.modifySecurityToken" -> "registrationTime.add" [ color = "orange" ];
  "SecurityTokenRegistry.modifySecurityToken" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.modifySecurityToken" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.modifySecurityToken" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.modifySecurityToken" -> "SecurityTokenRegistry._modifyTicker" [ color = "green" ];
  "SecurityTokenRegistry.modifySecurityToken" -> "SecurityTokenRegistry._storeSecurityTokenData" [ color = "green" ];
  "SecurityTokenRegistry._storeSecurityTokenData" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._storeSecurityTokenData" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._storeSecurityTokenData" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._storeSecurityTokenData" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._storeSecurityTokenData" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._storeSecurityTokenData" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.isSecurityToken" -> "SecurityTokenRegistry.getStringValue" [ color = "green" ];
  "SecurityTokenRegistry.isSecurityToken" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.transferOwnership" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry.transferOwnership" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.pause" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.unpause" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.changeTickerRegistrationFee" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.changeTickerRegistrationFee" -> "SecurityTokenRegistry._changeTickerRegistrationFee" [ color = "green" ];
  "SecurityTokenRegistry._changeTickerRegistrationFee" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.changeSecurityLaunchFee" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.changeSecurityLaunchFee" -> "SecurityTokenRegistry._changeSecurityLaunchFee" [ color = "green" ];
  "SecurityTokenRegistry._changeSecurityLaunchFee" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.changeFeesAmountAndCurrency" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.changeFeesAmountAndCurrency" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.changeFeesAmountAndCurrency" -> "SecurityTokenRegistry.getBoolValue" [ color = "green" ];
  "SecurityTokenRegistry.changeFeesAmountAndCurrency" -> "SecurityTokenRegistry._changeTickerRegistrationFee" [ color = "green" ];
  "SecurityTokenRegistry.changeFeesAmountAndCurrency" -> "SecurityTokenRegistry._changeSecurityLaunchFee" [ color = "green" ];
  "SecurityTokenRegistry.changeFeesAmountAndCurrency" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.reclaimERC20" -> "IERC20.balanceOf" [ color = "orange" ];
  "SecurityTokenRegistry.reclaimERC20" -> "IERC20.transfer" [ color = "orange" ];
  "SecurityTokenRegistry.reclaimERC20" -> "SecurityTokenRegistry.owner" [ color = "green" ];
  "SecurityTokenRegistry.setProtocolFactory" -> "SecurityTokenRegistry._setProtocolFactory" [ color = "green" ];
  "SecurityTokenRegistry._setProtocolFactory" -> "VersionUtils.pack" [ color = "orange" ];
  "SecurityTokenRegistry._setProtocolFactory" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry._setProtocolFactory" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.removeProtocolFactory" -> "VersionUtils.pack" [ color = "orange" ];
  "SecurityTokenRegistry.removeProtocolFactory" -> "SecurityTokenRegistry.getUintValue" [ color = "green" ];
  "SecurityTokenRegistry.removeProtocolFactory" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry.removeProtocolFactory" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.removeProtocolFactory" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.removeProtocolFactory" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry.setLatestVersion" -> "SecurityTokenRegistry._setLatestVersion" [ color = "green" ];
  "SecurityTokenRegistry._setLatestVersion" -> "VersionUtils.pack" [ color = "orange" ];
  "SecurityTokenRegistry._setLatestVersion" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "SecurityTokenRegistry._setLatestVersion" -> "Encoder.getKey" [ color = "orange" ];
  "SecurityTokenRegistry._setLatestVersion" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.updatePolyTokenAddress" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistry.isPaused" -> "SecurityTokenRegistry.getBoolValue" [ color = "green" ];
  "SecurityTokenRegistry.owner" -> "SecurityTokenRegistry.getAddressValue" [ color = "green" ];
  "DataStore._isAuthorized" -> "IOwnable.owner" [ color = "orange" ];
  "DataStore._isAuthorized" -> "ISecurityToken.checkPermission" [ color = "orange" ];
  "DataStore._isAuthorized" -> "ISecurityToken.isModule" [ color = "orange" ];
  "DataStore.onlyOwner" -> "IOwnable.owner" [ color = "orange" ];
  "DataStore.setUint256" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setUint256" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setBytes32" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setBytes32" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setAddress" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setAddress" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setBool" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setBool" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setString" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setString" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setBytes" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setBytes" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setUint256Array" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setUint256Array" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setBytes32Array" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setBytes32Array" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setAddressArray" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setAddressArray" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setBoolArray" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setBoolArray" -> "DataStore._setData" [ color = "green" ];
  "DataStore.insertUint256" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.insertUint256" -> "DataStore._setData" [ color = "green" ];
  "DataStore.insertBytes32" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.insertBytes32" -> "DataStore._setData" [ color = "green" ];
  "DataStore.insertAddress" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.insertAddress" -> "DataStore._setData" [ color = "green" ];
  "DataStore.insertBool" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.insertBool" -> "DataStore._setData" [ color = "green" ];
  "DataStore.deleteUint256" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.deleteUint256" -> "DataStore._deleteUint" [ color = "green" ];
  "DataStore.deleteBytes32" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.deleteBytes32" -> "DataStore._deleteBytes32" [ color = "green" ];
  "DataStore.deleteAddress" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.deleteAddress" -> "DataStore._deleteAddress" [ color = "green" ];
  "DataStore.deleteBool" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.deleteBool" -> "DataStore._deleteBool" [ color = "green" ];
  "DataStore.setUint256Multi" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setUint256Multi" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setBytes32Multi" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setBytes32Multi" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setAddressMulti" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setAddressMulti" -> "DataStore._setData" [ color = "green" ];
  "DataStore.setBoolMulti" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.setBoolMulti" -> "DataStore._setData" [ color = "green" ];
  "DataStore.insertUint256Multi" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.insertUint256Multi" -> "DataStore._setData" [ color = "green" ];
  "DataStore.insertBytes32Multi" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.insertBytes32Multi" -> "DataStore._setData" [ color = "green" ];
  "DataStore.insertAddressMulti" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.insertAddressMulti" -> "DataStore._setData" [ color = "green" ];
  "DataStore.insertBoolMulti" -> "DataStore._isAuthorized" [ color = "green" ];
  "DataStore.insertBoolMulti" -> "DataStore._setData" [ color = "green" ];
  "Buffer.resize" -> "Buffer.init" [ color = "green" ];
  "Buffer.resize" -> "Buffer.append" [ color = "green" ];
  "Buffer.append" -> "Buffer.resize" [ color = "green" ];
  "Buffer.append" -> "Buffer.max" [ color = "green" ];
  "Buffer.append" -> "Buffer.resize" [ color = "green" ];
  "Buffer.appendInt" -> "Buffer.resize" [ color = "green" ];
  "Buffer.appendInt" -> "Buffer.max" [ color = "green" ];
  "CBOR.encodeType" -> "Buffer.buffer.append" [ color = "orange" ];
  "CBOR.encodeType" -> "Buffer.buffer.append" [ color = "orange" ];
  "CBOR.encodeType" -> "Buffer.buffer.appendInt" [ color = "orange" ];
  "CBOR.encodeType" -> "Buffer.buffer.append" [ color = "orange" ];
  "CBOR.encodeType" -> "Buffer.buffer.appendInt" [ color = "orange" ];
  "CBOR.encodeType" -> "Buffer.buffer.append" [ color = "orange" ];
  "CBOR.encodeType" -> "Buffer.buffer.appendInt" [ color = "orange" ];
  "CBOR.encodeType" -> "Buffer.buffer.append" [ color = "orange" ];
  "CBOR.encodeType" -> "Buffer.buffer.appendInt" [ color = "orange" ];
  "CBOR.encodeIndefiniteLengthType" -> "Buffer.buffer.append" [ color = "orange" ];
  "CBOR.encodeUInt" -> "CBOR.encodeType" [ color = "green" ];
  "CBOR.encodeInt" -> "CBOR.encodeType" [ color = "green" ];
  "CBOR.encodeInt" -> "CBOR.encodeType" [ color = "green" ];
  "CBOR.encodeBytes" -> "CBOR.encodeType" [ color = "green" ];
  "CBOR.encodeBytes" -> "Buffer.buffer.append" [ color = "orange" ];
  "CBOR.encodeString" -> "CBOR.encodeType" [ color = "green" ];
  "CBOR.encodeString" -> "Buffer.buffer.append" [ color = "orange" ];
  "CBOR.startArray" -> "CBOR.encodeIndefiniteLengthType" [ color = "green" ];
  "CBOR.startMap" -> "CBOR.encodeIndefiniteLengthType" [ color = "green" ];
  "CBOR.endSequence" -> "CBOR.encodeIndefiniteLengthType" [ color = "green" ];
  "usingOraclize.oraclizeAPI" -> "usingOraclize.getCodeSize" [ color = "green" ];
  "usingOraclize.oraclizeAPI" -> "usingOraclize.oraclize_setNetwork" [ color = "green" ];
  "usingOraclize.oraclizeAPI" -> "OraclizeAddrResolverI.getAddress" [ color = "orange" ];
  "usingOraclize.oraclizeAPI" -> "OraclizeAddrResolverI.getAddress" [ color = "orange" ];
  "usingOraclize.oraclize_randomDS_proofVerify" -> "usingOraclize.oraclize_randomDS_proofVerify__main" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify" -> "usingOraclize.oraclize_getNetworkName" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.oraclize_setNetwork" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.getCodeSize" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.oraclize_setNetworkName" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.getCodeSize" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.oraclize_setNetworkName" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.getCodeSize" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.oraclize_setNetworkName" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.getCodeSize" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.oraclize_setNetworkName" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.getCodeSize" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.getCodeSize" [ color = "green" ];
  "usingOraclize.oraclize_setNetwork" -> "usingOraclize.getCodeSize" [ color = "green" ];
  "usingOraclize.__callback" -> "usingOraclize.__callback" [ color = "green" ];
  "usingOraclize.oraclize_getPrice" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_getPrice" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.stra2cbor" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.stra2cbor" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.stra2cbor" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.stra2cbor" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.ba2cbor" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.ba2cbor" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.ba2cbor" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "OraclizeI.getPrice" [ color = "orange" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.ba2cbor" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_query" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_setProof" -> "OraclizeI.setProofType" [ color = "orange" ];
  "usingOraclize.oraclize_cbAddress" -> "OraclizeI.cbAddress" [ color = "orange" ];
  "usingOraclize.oraclize_setCustomGasPrice" -> "OraclizeI.setCustomGasPrice" [ color = "orange" ];
  "usingOraclize.oraclize_randomDS_getSessionPubKeyHash" -> "OraclizeI.randomDS_getSessionPubKeyHash" [ color = "orange" ];
  "usingOraclize.strConcat" -> "usingOraclize.strConcat" [ color = "green" ];
  "usingOraclize.strConcat" -> "usingOraclize.strConcat" [ color = "green" ];
  "usingOraclize.strConcat" -> "usingOraclize.strConcat" [ color = "green" ];
  "usingOraclize.safeParseInt" -> "usingOraclize.safeParseInt" [ color = "green" ];
  "usingOraclize.parseInt" -> "usingOraclize.parseInt" [ color = "green" ];
  "usingOraclize.stra2cbor" -> "usingOraclize.safeMemoryCleaner" [ color = "green" ];
  "usingOraclize.stra2cbor" -> "Buffer.init" [ color = "orange" ];
  "usingOraclize.stra2cbor" -> "Buffer.buffer.startArray" [ color = "orange" ];
  "usingOraclize.stra2cbor" -> "Buffer.buffer.encodeString" [ color = "orange" ];
  "usingOraclize.stra2cbor" -> "Buffer.buffer.endSequence" [ color = "orange" ];
  "usingOraclize.ba2cbor" -> "usingOraclize.safeMemoryCleaner" [ color = "green" ];
  "usingOraclize.ba2cbor" -> "Buffer.init" [ color = "orange" ];
  "usingOraclize.ba2cbor" -> "Buffer.buffer.startArray" [ color = "orange" ];
  "usingOraclize.ba2cbor" -> "Buffer.buffer.encodeBytes" [ color = "orange" ];
  "usingOraclize.ba2cbor" -> "Buffer.buffer.endSequence" [ color = "orange" ];
  "usingOraclize.oraclize_newRandomDSQuery" -> "usingOraclize.oraclize_randomDS_getSessionPubKeyHash" [ color = "green" ];
  "usingOraclize.oraclize_newRandomDSQuery" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_newRandomDSQuery" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "usingOraclize.oraclize_newRandomDSQuery" -> "usingOraclize.oraclize_randomDS_setCommitment" [ color = "green" ];
  "usingOraclize.verifySig" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.verifySig" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.verifySig" -> "usingOraclize.safer_ecrecover" [ color = "green" ];
  "usingOraclize.verifySig" -> "usingOraclize.safer_ecrecover" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity" -> "usingOraclize.verifySig" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity" -> "usingOraclize.verifySig" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__returnCode" -> "usingOraclize.oraclize_randomDS_proofVerify__main" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__returnCode" -> "usingOraclize.oraclize_getNetworkName" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__main" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__main" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__main" -> "usingOraclize.matchBytes32Prefix" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__main" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__main" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__main" -> "usingOraclize.copyBytes" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__main" -> "usingOraclize.verifySig" [ color = "green" ];
  "usingOraclize.oraclize_randomDS_proofVerify__main" -> "usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity" [ color = "green" ];
  "usingOraclize.ecrecovery" -> "usingOraclize.safer_ecrecover" [ color = "green" ];
  "PolyToken.decreaseApproval" -> "oldValue.sub" [ color = "orange" ];
  "BokkyPooBahsDateTimeLibrary.timestampFromDate" -> "BokkyPooBahsDateTimeLibrary._daysFromDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.timestampFromDateTime" -> "BokkyPooBahsDateTimeLibrary._daysFromDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.timestampToDate" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.timestampToDateTime" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.isValidDate" -> "BokkyPooBahsDateTimeLibrary._getDaysInMonth" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.isValidDateTime" -> "BokkyPooBahsDateTimeLibrary.isValidDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.isLeapYear" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.isLeapYear" -> "BokkyPooBahsDateTimeLibrary._isLeapYear" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.isWeekDay" -> "BokkyPooBahsDateTimeLibrary.getDayOfWeek" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.isWeekEnd" -> "BokkyPooBahsDateTimeLibrary.getDayOfWeek" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.getDaysInMonth" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.getDaysInMonth" -> "BokkyPooBahsDateTimeLibrary._getDaysInMonth" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary._getDaysInMonth" -> "BokkyPooBahsDateTimeLibrary._isLeapYear" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.getYear" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.getMonth" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.getDay" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.addYears" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.addYears" -> "BokkyPooBahsDateTimeLibrary._getDaysInMonth" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.addYears" -> "BokkyPooBahsDateTimeLibrary._daysFromDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.addMonths" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.addMonths" -> "BokkyPooBahsDateTimeLibrary._getDaysInMonth" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.addMonths" -> "BokkyPooBahsDateTimeLibrary._daysFromDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.subYears" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.subYears" -> "BokkyPooBahsDateTimeLibrary._getDaysInMonth" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.subYears" -> "BokkyPooBahsDateTimeLibrary._daysFromDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.subMonths" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.subMonths" -> "BokkyPooBahsDateTimeLibrary._getDaysInMonth" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.subMonths" -> "BokkyPooBahsDateTimeLibrary._daysFromDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.diffYears" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.diffYears" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.diffMonths" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "BokkyPooBahsDateTimeLibrary.diffMonths" -> "BokkyPooBahsDateTimeLibrary._daysToDate" [ color = "green" ];
  "DecimalMath.mul" -> "SafeMath.add" [ color = "orange" ];
  "DecimalMath.mul" -> "SafeMath.mul" [ color = "orange" ];
  "DecimalMath.div" -> "SafeMath.add" [ color = "orange" ];
  "DecimalMath.div" -> "SafeMath.mul" [ color = "orange" ];
  "TokenLib.recoverFreezeIssuanceAckSigner" -> "TokenLib.extractSigner" [ color = "green" ];
  "TokenLib.recoverDisableControllerAckSigner" -> "TokenLib.extractSigner" [ color = "green" ];
  "TokenLib.extractSigner" -> "TokenLib.hash" [ color = "green" ];
  "TokenLib.extractSigner" -> "TokenLib.hash" [ color = "green" ];
  "TokenLib.unarchiveModule" -> "IModuleRegistry.useModule" [ color = "orange" ];
  "TokenLib.upgradeModule" -> "IModuleRegistry.useModule" [ color = "orange" ];
  "TokenLib.upgradeModule" -> "UpgradableModuleFactory.upgrade" [ color = "orange" ];
  "TokenLib.removeModule" -> "TokenLib._removeModuleWithIndex" [ color = "green" ];
  "TokenLib.changeModuleBudget" -> "IPoly.allowance" [ color = "orange" ];
  "TokenLib.changeModuleBudget" -> "IPoly.increaseApproval" [ color = "orange" ];
  "TokenLib.changeModuleBudget" -> "currentAllowance.add" [ color = "orange" ];
  "TokenLib.changeModuleBudget" -> "IPoly.decreaseApproval" [ color = "orange" ];
  "TokenLib.changeModuleBudget" -> "currentAllowance.sub" [ color = "orange" ];
  "TokenLib.adjustCheckpoints" -> "SecurityTokenStorage.Checkpoint" [ color = "orange" ];
  "TokenLib.adjustInvestorCount" -> "_holderCount.add" [ color = "orange" ];
  "TokenLib.adjustInvestorCount" -> "TokenLib._isExistingInvestor" [ color = "green" ];
  "TokenLib.adjustInvestorCount" -> "IDataStore.insertAddress" [ color = "orange" ];
  "TokenLib.adjustInvestorCount" -> "IDataStore.setUint256" [ color = "orange" ];
  "TokenLib.adjustInvestorCount" -> "TokenLib._getKey" [ color = "green" ];
  "TokenLib.adjustInvestorCount" -> "_holderCount.sub" [ color = "orange" ];
  "TokenLib.setDocument" -> "SecurityTokenStorage.Document" [ color = "orange" ];
  "TokenLib.verifyTransfer" -> "ITransferManager.verifyTransfer" [ color = "orange" ];
  "TokenLib._isExistingInvestor" -> "IDataStore.getUint256" [ color = "orange" ];
  "TokenLib._isExistingInvestor" -> "TokenLib._getKey" [ color = "green" ];
  "Util.stringToBytes32" -> "Util.bytesToBytes32" [ color = "green" ];
  "VolumeRestrictionLib.deleteHolderFromList" -> "IDataStore.getUint256" [ color = "orange" ];
  "VolumeRestrictionLib.deleteHolderFromList" -> "VolumeRestrictionLib._getKey" [ color = "green" ];
  "VolumeRestrictionLib.deleteHolderFromList" -> "IDataStore.setUint256" [ color = "orange" ];
  "VolumeRestrictionLib.deleteHolderFromList" -> "VolumeRestrictionLib._getKey" [ color = "green" ];
  "VolumeRestrictionLib.addRestrictionData" -> "IDataStore.getUint256" [ color = "orange" ];
  "VolumeRestrictionLib.addRestrictionData" -> "VolumeRestrictionLib._getKey" [ color = "green" ];
  "VolumeRestrictionLib.addRestrictionData" -> "VolumeRestrictionLib._isExistingInvestor" [ color = "green" ];
  "VolumeRestrictionLib.addRestrictionData" -> "IDataStore.insertAddress" [ color = "orange" ];
  "VolumeRestrictionLib.addRestrictionData" -> "IDataStore.setUint256" [ color = "orange" ];
  "VolumeRestrictionLib.addRestrictionData" -> "VolumeRestrictionLib._getKey" [ color = "green" ];
  "VolumeRestrictionLib.addRestrictionData" -> "VolumeRestrictionLib._isVolRestricted" [ color = "green" ];
  "VolumeRestrictionLib.addRestrictionData" -> "IDataStore.setUint256" [ color = "orange" ];
  "VolumeRestrictionLib.addRestrictionData" -> "VolumeRestrictionLib._getKey" [ color = "green" ];
  "VolumeRestrictionLib.addRestrictionData" -> "VolumeRestrictionLib._getTypeOfPeriod" [ color = "green" ];
  "VolumeRestrictionLib.isValidAmountAfterRestrictionChanges" -> "BokkyPooBahsDateTimeLibrary.diffSeconds" [ color = "orange" ];
  "VolumeRestrictionLib.isValidAmountAfterRestrictionChanges" -> "BokkyPooBahsDateTimeLibrary.timestampToDate" [ color = "orange" ];
  "VolumeRestrictionLib.isValidAmountAfterRestrictionChanges" -> "BokkyPooBahsDateTimeLibrary.timestampToDate" [ color = "orange" ];
  "VolumeRestrictionLib.isValidAmountAfterRestrictionChanges" -> "_sumOfLastPeriod.add" [ color = "orange" ];
  "VolumeRestrictionLib.getRestrictionData" -> "IDataStore.getAddressArray" [ color = "orange" ];
  "VolumeRestrictionLib.getRestrictionData" -> "VolumeRestrictionLib._isVolRestricted" [ color = "green" ];
  "VolumeRestrictionLib.getRestrictionData" -> "IDataStore.getUint256" [ color = "orange" ];
  "VolumeRestrictionLib.getRestrictionData" -> "VolumeRestrictionLib._getKey" [ color = "green" ];
  "VolumeRestrictionLib.getRestrictionData" -> "VolumeRestrictionLib._isVolRestricted" [ color = "green" ];
  "VolumeRestrictionLib.getRestrictionData" -> "IDataStore.getUint256" [ color = "orange" ];
  "VolumeRestrictionLib.getRestrictionData" -> "VolumeRestrictionLib._getKey" [ color = "green" ];
  "VolumeRestrictionLib.getRestrictionData" -> "VolumeRestrictionLib._setValues" [ color = "green" ];
  "VolumeRestrictionLib.getRestrictionData" -> "VolumeRestrictionLib._setValues" [ color = "green" ];
  "VolumeRestrictionLib.getRestrictionData" -> "VolumeRestrictionLib._setValues" [ color = "green" ];
  "VolumeRestrictionLib.getRestrictionData" -> "VolumeRestrictionLib._setValues" [ color = "green" ];
  "VolumeRestrictionLib._isExistingInvestor" -> "IDataStore.getUint256" [ color = "orange" ];
  "VolumeRestrictionLib._isExistingInvestor" -> "VolumeRestrictionLib._getKey" [ color = "green" ];
  "DummySTO.generateTokens" -> "DummySTO._canBuy" [ color = "green" ];
  "DummySTO.generateTokens" -> "ISecurityToken.issue" [ color = "orange" ];
  "DummySTOFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "DummySTOFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "DummySTOFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "DummySTOFactory.deploy" -> "DummySTOFactory._initializeModule" [ color = "green" ];
  "DummySTOProxy.null" -> "DummySTOProxy._upgradeTo" [ color = "green" ];
  "MockBurnFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "MockBurnFactory.deploy" -> "MockBurnFactory._initializeModule" [ color = "green" ];
  "MockModuleRegistry.addMoreReputation" -> "ModuleRegistry.pushArray" [ color = "green" ];
  "MockModuleRegistry.addMoreReputation" -> "Encoder.getKey" [ color = "orange" ];
  "MockRedemptionManager.transferToRedeem" -> "ISecurityToken.transferFrom" [ color = "orange" ];
  "MockRedemptionManager.redeemTokenByOwner" -> "ISecurityToken.redeem" [ color = "orange" ];
  "MockRedemptionManager.redeemTokensByPartition" -> "ISecurityToken.redeemByPartition" [ color = "orange" ];
  "MockRedemptionManager.operatorRedeemTokensByPartition" -> "ISecurityToken.operatorRedeemByPartition" [ color = "orange" ];
  "MockRedemptionManager.operatorTransferToRedeem" -> "ISecurityToken.operatorTransferByPartition" [ color = "orange" ];
  "PolyTokenFaucet.getTokens" -> "totalSupply_.add" [ color = "orange" ];
  "PolyTokenFaucet.decreaseApproval" -> "oldValue.sub" [ color = "orange" ];
  "SecurityTokenMock.initialize" -> "SecurityToken.initialize" [ color = "orange" ];
  "SecurityTokenRegistryMock.changeTheDeployedAddress" -> "SecurityTokenRegistry.set" [ color = "green" ];
  "SecurityTokenRegistryMock.changeTheDeployedAddress" -> "Encoder.getKey" [ color = "orange" ];
  "DummySTOFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "DummySTOFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "DividendCheckpoint.configure" -> "DividendCheckpoint._setWallet" [ color = "green" ];
  "DividendCheckpoint.changeWallet" -> "DividendCheckpoint._onlySecurityTokenOwner" [ color = "green" ];
  "DividendCheckpoint.changeWallet" -> "DividendCheckpoint._setWallet" [ color = "green" ];
  "DividendCheckpoint.getTreasuryWallet" -> "IDataStore.getAddress" [ color = "orange" ];
  "DividendCheckpoint.getTreasuryWallet" -> "DividendCheckpoint.getDataStore" [ color = "green" ];
  "DividendCheckpoint.createCheckpoint" -> "ISecurityToken.createCheckpoint" [ color = "orange" ];
  "DividendCheckpoint.pushDividendPaymentToAddresses" -> "DividendCheckpoint._validDividendIndex" [ color = "green" ];
  "DividendCheckpoint.pushDividendPaymentToAddresses" -> "DividendCheckpoint._payDividend" [ color = "green" ];
  "DividendCheckpoint.pushDividendPayment" -> "DividendCheckpoint._validDividendIndex" [ color = "green" ];
  "DividendCheckpoint.pushDividendPayment" -> "ISecurityToken.getInvestorsSubsetAt" [ color = "orange" ];
  "DividendCheckpoint.pushDividendPayment" -> "DividendCheckpoint._payDividend" [ color = "green" ];
  "DividendCheckpoint.pullDividendPayment" -> "DividendCheckpoint._validDividendIndex" [ color = "green" ];
  "DividendCheckpoint.pullDividendPayment" -> "DividendCheckpoint._payDividend" [ color = "green" ];
  "DividendCheckpoint.calculateDividend" -> "ISecurityToken.balanceOfAt" [ color = "orange" ];
  "DividendCheckpoint.calculateDividend" -> "balance.mul" [ color = "orange" ];
  "DividendCheckpoint.calculateDividend" -> "claim.mul" [ color = "orange" ];
  "DividendCheckpoint.getDividendsData" -> "DividendCheckpoint.getDividendData" [ color = "green" ];
  "DividendCheckpoint.getDividendProgress" -> "ISecurityToken.getInvestorsAt" [ color = "orange" ];
  "DividendCheckpoint.getDividendProgress" -> "ISecurityToken.balanceOfAt" [ color = "orange" ];
  "DividendCheckpoint.getDividendProgress" -> "DividendCheckpoint.calculateDividend" [ color = "green" ];
  "DividendCheckpoint.getDividendProgress" -> "claim.sub" [ color = "orange" ];
  "DividendCheckpoint.getCheckpointData" -> "ISecurityToken.currentCheckpointId" [ color = "orange" ];
  "DividendCheckpoint.getCheckpointData" -> "ISecurityToken.getInvestorsAt" [ color = "orange" ];
  "DividendCheckpoint.getCheckpointData" -> "ISecurityToken.balanceOfAt" [ color = "orange" ];
  "ERC20DividendCheckpoint.createDividend" -> "ERC20DividendCheckpoint.createDividendWithExclusions" [ color = "green" ];
  "ERC20DividendCheckpoint.createDividendWithCheckpoint" -> "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions" [ color = "green" ];
  "ERC20DividendCheckpoint.createDividendWithExclusions" -> "ISecurityToken.createCheckpoint" [ color = "orange" ];
  "ERC20DividendCheckpoint.createDividendWithExclusions" -> "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions" [ color = "green" ];
  "ERC20DividendCheckpoint.createDividendWithCheckpointAndExclusions" -> "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions" [ color = "green" ];
  "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "ISecurityToken.currentCheckpointId" [ color = "orange" ];
  "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "IERC20.transferFrom" [ color = "orange" ];
  "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "ISecurityToken.totalSupplyAt" [ color = "orange" ];
  "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "excludedSupply.add" [ color = "orange" ];
  "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "ISecurityToken.balanceOfAt" [ color = "orange" ];
  "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "currentSupply.sub" [ color = "orange" ];
  "ERC20DividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "ERC20DividendCheckpoint._emitERC20DividendDepositedEvent" [ color = "green" ];
  "DividendCheckpoint._payDividend" -> "DividendCheckpoint.calculateDividend" [ color = "green" ];
  "DividendCheckpoint._payDividend" -> "claim.add" [ color = "orange" ];
  "DividendCheckpoint._payDividend" -> "claim.sub" [ color = "orange" ];
  "DividendCheckpoint._payDividend" -> "IERC20.transfer" [ color = "orange" ];
  "ERC20DividendCheckpoint.reclaimDividend" -> "IERC20.transfer" [ color = "orange" ];
  "ERC20DividendCheckpoint.reclaimDividend" -> "DividendCheckpoint.getTreasuryWallet" [ color = "green" ];
  "ERC20DividendCheckpoint.withdrawWithholding" -> "IERC20.transfer" [ color = "orange" ];
  "ERC20DividendCheckpoint.withdrawWithholding" -> "DividendCheckpoint.getTreasuryWallet" [ color = "green" ];
  "ERC20DividendCheckpointFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "ERC20DividendCheckpointFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "ERC20DividendCheckpointFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "ERC20DividendCheckpointFactory.deploy" -> "ERC20DividendCheckpointFactory._initializeModule" [ color = "green" ];
  "ERC20DividendCheckpointProxy.null" -> "ERC20DividendCheckpointProxy._upgradeTo" [ color = "green" ];
  "EtherDividendCheckpoint.createDividend" -> "EtherDividendCheckpoint.createDividendWithExclusions" [ color = "green" ];
  "EtherDividendCheckpoint.createDividendWithCheckpoint" -> "EtherDividendCheckpoint._createDividendWithCheckpointAndExclusions" [ color = "green" ];
  "EtherDividendCheckpoint.createDividendWithExclusions" -> "ISecurityToken.createCheckpoint" [ color = "orange" ];
  "EtherDividendCheckpoint.createDividendWithExclusions" -> "EtherDividendCheckpoint._createDividendWithCheckpointAndExclusions" [ color = "green" ];
  "EtherDividendCheckpoint.createDividendWithCheckpointAndExclusions" -> "EtherDividendCheckpoint._createDividendWithCheckpointAndExclusions" [ color = "green" ];
  "EtherDividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "ISecurityToken.currentCheckpointId" [ color = "orange" ];
  "EtherDividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "ISecurityToken.totalSupplyAt" [ color = "orange" ];
  "EtherDividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "excludedSupply.add" [ color = "orange" ];
  "EtherDividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "ISecurityToken.balanceOfAt" [ color = "orange" ];
  "EtherDividendCheckpoint._createDividendWithCheckpointAndExclusions" -> "currentSupply.sub" [ color = "orange" ];
  "DividendCheckpoint._payDividend" -> "DividendCheckpoint.calculateDividend" [ color = "green" ];
  "DividendCheckpoint._payDividend" -> "claim.sub" [ color = "orange" ];
  "DividendCheckpoint._payDividend" -> "_payee.send" [ color = "orange" ];
  "EtherDividendCheckpoint.reclaimDividend" -> "DividendCheckpoint.getTreasuryWallet" [ color = "green" ];
  "EtherDividendCheckpoint.reclaimDividend" -> "wallet.transfer" [ color = "orange" ];
  "EtherDividendCheckpoint.withdrawWithholding" -> "DividendCheckpoint.getTreasuryWallet" [ color = "green" ];
  "EtherDividendCheckpoint.withdrawWithholding" -> "wallet.transfer" [ color = "orange" ];
  "EtherDividendCheckpointFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "EtherDividendCheckpointFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "EtherDividendCheckpointFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "EtherDividendCheckpointFactory.deploy" -> "EtherDividendCheckpointFactory._initializeModule" [ color = "green" ];
  "EtherDividendCheckpointProxy.null" -> "EtherDividendCheckpointProxy._upgradeTo" [ color = "green" ];
  "PLCRVotingCheckpoint.createBallot" -> "ISecurityToken.createCheckpoint" [ color = "orange" ];
  "PLCRVotingCheckpoint.createBallot" -> "PLCRVotingCheckpoint._createBallotWithCheckpoint" [ color = "green" ];
  "PLCRVotingCheckpoint.createCustomBallot" -> "ISecurityToken.currentCheckpointId" [ color = "orange" ];
  "PLCRVotingCheckpoint.createCustomBallot" -> "PLCRVotingCheckpoint._createBallotWithCheckpoint" [ color = "green" ];
  "PLCRVotingCheckpoint._createBallotWithCheckpoint" -> "PLCRVotingCheckpoint._validValueCheck" [ color = "green" ];
  "PLCRVotingCheckpoint._createBallotWithCheckpoint" -> "PLCRVotingCheckpoint._validValueCheck" [ color = "green" ];
  "PLCRVotingCheckpoint._createBallotWithCheckpoint" -> "PLCRVotingCheckpoint._validValueCheck" [ color = "green" ];
  "PLCRVotingCheckpoint.commitVote" -> "PLCRVotingCheckpoint._validBallotId" [ color = "green" ];
  "PLCRVotingCheckpoint.commitVote" -> "PLCRVotingCheckpoint.isVoterAllowed" [ color = "green" ];
  "PLCRVotingCheckpoint.commitVote" -> "PLCRVotingCheckpoint.getCurrentBallotStage" [ color = "green" ];
  "PLCRVotingCheckpoint.commitVote" -> "ISecurityToken.balanceOfAt" [ color = "orange" ];
  "PLCRVotingCheckpoint.revealVote" -> "PLCRVotingCheckpoint._validBallotId" [ color = "green" ];
  "PLCRVotingCheckpoint.revealVote" -> "PLCRVotingCheckpoint.getCurrentBallotStage" [ color = "green" ];
  "PLCRVotingCheckpoint.revealVote" -> "ISecurityToken.balanceOfAt" [ color = "orange" ];
  "PLCRVotingCheckpoint.changeBallotExemptedVotersList" -> "PLCRVotingCheckpoint._changeBallotExemptedVotersList" [ color = "green" ];
  "PLCRVotingCheckpoint.changeBallotExemptedVotersListMulti" -> "PLCRVotingCheckpoint._changeBallotExemptedVotersList" [ color = "green" ];
  "PLCRVotingCheckpoint._changeBallotExemptedVotersList" -> "PLCRVotingCheckpoint._validBallotId" [ color = "green" ];
  "PLCRVotingCheckpoint.changeBallotStatus" -> "PLCRVotingCheckpoint._validBallotId" [ color = "green" ];
  "PLCRVotingCheckpoint.getCurrentBallotStage" -> "commitTimeEnd.add" [ color = "orange" ];
  "PLCRVotingCheckpoint.getBallotResults" -> "ISecurityToken.totalSupplyAt" [ color = "orange" ];
  "PLCRVotingCheckpoint.getBallotResults" -> "supplyAtCheckpoint.mul" [ color = "orange" ];
  "PLCRVotingCheckpoint.getBallotDetails" -> "ISecurityToken.totalSupplyAt" [ color = "orange" ];
  "PLCRVotingCheckpointFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "PLCRVotingCheckpointFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "PLCRVotingCheckpointFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "PLCRVotingCheckpointFactory.deploy" -> "PLCRVotingCheckpointFactory._initializeModule" [ color = "green" ];
  "PLCRVotingCheckpointProxy.null" -> "PLCRVotingCheckpointProxy._upgradeTo" [ color = "green" ];
  "WeightedVoteCheckpoint.createBallot" -> "ISecurityToken.createCheckpoint" [ color = "orange" ];
  "WeightedVoteCheckpoint.createBallot" -> "now.add" [ color = "orange" ];
  "WeightedVoteCheckpoint.createBallot" -> "WeightedVoteCheckpoint._createCustomBallot" [ color = "green" ];
  "WeightedVoteCheckpoint.createCustomBallot" -> "ISecurityToken.currentCheckpointId" [ color = "orange" ];
  "WeightedVoteCheckpoint.createCustomBallot" -> "WeightedVoteCheckpoint._createCustomBallot" [ color = "green" ];
  "WeightedVoteCheckpoint.castVote" -> "WeightedVoteCheckpoint._validBallotId" [ color = "green" ];
  "WeightedVoteCheckpoint.castVote" -> "WeightedVoteCheckpoint.isVoterAllowed" [ color = "green" ];
  "WeightedVoteCheckpoint.castVote" -> "ISecurityToken.balanceOfAt" [ color = "orange" ];
  "WeightedVoteCheckpoint.changeBallotExemptedVotersList" -> "WeightedVoteCheckpoint._changeBallotExemptedVotersList" [ color = "green" ];
  "WeightedVoteCheckpoint.changeBallotExemptedVotersListMulti" -> "WeightedVoteCheckpoint._changeBallotExemptedVotersList" [ color = "green" ];
  "WeightedVoteCheckpoint._changeBallotExemptedVotersList" -> "WeightedVoteCheckpoint._validBallotId" [ color = "green" ];
  "WeightedVoteCheckpoint.getBallotResults" -> "ISecurityToken.totalSupplyAt" [ color = "orange" ];
  "WeightedVoteCheckpoint.getBallotResults" -> "supplyAtCheckpoint.mul" [ color = "orange" ];
  "WeightedVoteCheckpoint.getBallotDetails" -> "ISecurityToken.totalSupplyAt" [ color = "orange" ];
  "WeightedVoteCheckpointFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "WeightedVoteCheckpointFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "WeightedVoteCheckpointFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "WeightedVoteCheckpointFactory.deploy" -> "WeightedVoteCheckpointFactory._initializeModule" [ color = "green" ];
  "WeightedVoteCheckpointProxy.null" -> "WeightedVoteCheckpointProxy._upgradeTo" [ color = "green" ];
  "VotingCheckpoint.changeDefaultExemptedVotersList" -> "VotingCheckpoint._changeDefaultExemptedVotersList" [ color = "green" ];
  "VotingCheckpoint.changeDefaultExemptedVotersListMulti" -> "VotingCheckpoint._changeDefaultExemptedVotersList" [ color = "green" ];
  "TrackedRedemption.redeemTokens" -> "ISecurityToken.redeemFrom" [ color = "orange" ];
  "TrackedRedemptionFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "TrackedRedemptionFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "TrackedRedemptionFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "TrackedRedemptionFactory.deploy" -> "TrackedRedemptionFactory._initializeModule" [ color = "green" ];
  "ScheduledCheckpoint.addSchedule" -> "ScheduledCheckpoint._onlySecurityTokenOwner" [ color = "green" ];
  "ScheduledCheckpoint.removeSchedule" -> "ScheduledCheckpoint._onlySecurityTokenOwner" [ color = "green" ];
  "ScheduledCheckpoint.executeTransfer" -> "ScheduledCheckpoint._updateAll" [ color = "green" ];
  "ScheduledCheckpoint.update" -> "ScheduledCheckpoint._onlySecurityTokenOwner" [ color = "green" ];
  "ScheduledCheckpoint.update" -> "ScheduledCheckpoint._update" [ color = "green" ];
  "ScheduledCheckpoint._update" -> "ISecurityToken.createCheckpoint" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "now.sub" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "periods.mul" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "BokkyPooBahsDateTimeLibrary.diffDays" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "BokkyPooBahsDateTimeLibrary.addDays" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "periods.mul" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "BokkyPooBahsDateTimeLibrary.diffDays" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "BokkyPooBahsDateTimeLibrary.addDays" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "periods.mul" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "BokkyPooBahsDateTimeLibrary.diffMonths" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "BokkyPooBahsDateTimeLibrary.addMonths" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "totalPeriods.mul" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "BokkyPooBahsDateTimeLibrary.diffYears" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "BokkyPooBahsDateTimeLibrary.addYears" [ color = "orange" ];
  "ScheduledCheckpoint._update" -> "periods.mul" [ color = "orange" ];
  "ScheduledCheckpoint.updateAll" -> "ScheduledCheckpoint._onlySecurityTokenOwner" [ color = "green" ];
  "ScheduledCheckpoint.updateAll" -> "ScheduledCheckpoint._updateAll" [ color = "green" ];
  "ScheduledCheckpoint._updateAll" -> "ScheduledCheckpoint._update" [ color = "green" ];
  "ScheduledCheckpointFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "ScheduledCheckpointFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "ScheduledCheckpointFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "ScheduledCheckpointFactory.deploy" -> "ScheduledCheckpointFactory._initializeModule" [ color = "green" ];
  "KYCTransferManager.executeTransfer" -> "ITransferManager.verifyTransfer" [ color = "green" ];
  "ITransferManager.verifyTransfer" -> "KYCTransferManager.checkKYC" [ color = "green" ];
  "KYCTransferManager.modifyKYC" -> "KYCTransferManager._modifyKYC" [ color = "green" ];
  "KYCTransferManager._modifyKYC" -> "KYCTransferManager.getDataStore" [ color = "green" ];
  "KYCTransferManager._modifyKYC" -> "KYCTransferManager._getKYCKey" [ color = "green" ];
  "KYCTransferManager._modifyKYC" -> "IDataStore.getUint256" [ color = "orange" ];
  "KYCTransferManager._modifyKYC" -> "IDataStore.getAddressArrayLength" [ color = "orange" ];
  "KYCTransferManager._modifyKYC" -> "IDataStore.setUint256" [ color = "orange" ];
  "KYCTransferManager._modifyKYC" -> "IDataStore.insertAddress" [ color = "orange" ];
  "KYCTransferManager._modifyKYC" -> "IDataStore.getAddressArrayElement" [ color = "orange" ];
  "KYCTransferManager._modifyKYC" -> "IDataStore.deleteAddress" [ color = "orange" ];
  "KYCTransferManager._modifyKYC" -> "IDataStore.setUint256" [ color = "orange" ];
  "KYCTransferManager._modifyKYC" -> "KYCTransferManager._getKYCKey" [ color = "green" ];
  "KYCTransferManager.getKYCAddresses" -> "KYCTransferManager.getDataStore" [ color = "green" ];
  "KYCTransferManager.getKYCAddresses" -> "IDataStore.getAddressArray" [ color = "orange" ];
  "KYCTransferManager.checkKYC" -> "KYCTransferManager._getKYCKey" [ color = "green" ];
  "KYCTransferManager.checkKYC" -> "KYCTransferManager.getDataStore" [ color = "green" ];
  "KYCTransferManager.checkKYC" -> "IDataStore.getUint256" [ color = "orange" ];
  "KYCTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "KYCTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "KYCTransferManagerFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "KYCTransferManagerFactory.deploy" -> "KYCTransferManagerFactory._initializeModule" [ color = "green" ];
  "SignedTransferManager.checkSignatureValidity" -> "abi.decode" [ color = "orange" ];
  "SignedTransferManager.checkSignatureValidity" -> "SignedTransferManager._checkSignatureIsInvalid" [ color = "green" ];
  "SignedTransferManager.checkSigner" -> "SignedTransferManager._checkSigner" [ color = "green" ];
  "SignedTransferManager.executeTransfer" -> "ITransferManager.verifyTransfer" [ color = "green" ];
  "SignedTransferManager.executeTransfer" -> "abi.decode" [ color = "orange" ];
  "SignedTransferManager.executeTransfer" -> "SignedTransferManager._invalidateSignature" [ color = "green" ];
  "ITransferManager.verifyTransfer" -> "abi.decode" [ color = "orange" ];
  "ITransferManager.verifyTransfer" -> "SignedTransferManager._checkSignatureIsInvalid" [ color = "green" ];
  "ITransferManager.verifyTransfer" -> "hash.toEthSignedMessageHash" [ color = "orange" ];
  "ITransferManager.verifyTransfer" -> "SignedTransferManager._checkSigner" [ color = "green" ];
  "SignedTransferManager.invalidateSignature" -> "SignedTransferManager._checkSigner" [ color = "green" ];
  "SignedTransferManager.invalidateSignature" -> "abi.decode" [ color = "orange" ];
  "SignedTransferManager.invalidateSignature" -> "SignedTransferManager._checkSignatureIsInvalid" [ color = "green" ];
  "SignedTransferManager.invalidateSignature" -> "hash.toEthSignedMessageHash" [ color = "orange" ];
  "SignedTransferManager.invalidateSignature" -> "SignedTransferManager._invalidateSignature" [ color = "green" ];
  "SignedTransferManager._checkSignatureIsInvalid" -> "SignedTransferManager.getDataStore" [ color = "green" ];
  "SignedTransferManager._checkSignatureIsInvalid" -> "IDataStore.getBool" [ color = "orange" ];
  "SignedTransferManager._checkSigner" -> "SignedTransferManager._checkPerm" [ color = "green" ];
  "SignedTransferManager._invalidateSignature" -> "SignedTransferManager.getDataStore" [ color = "green" ];
  "SignedTransferManager._invalidateSignature" -> "IDataStore.setBool" [ color = "orange" ];
  "SignedTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "SignedTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "SignedTransferManagerFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "SignedTransferManagerFactory.deploy" -> "SignedTransferManagerFactory._initializeModule" [ color = "green" ];
  "Module.withPerm" -> "Module._checkPerm" [ color = "green" ];
  "Module._checkPerm" -> "Ownable.owner" [ color = "orange" ];
  "Module._checkPerm" -> "ICheckPermission.checkPermission" [ color = "orange" ];
  "Module._onlySecurityTokenOwner" -> "Ownable.owner" [ color = "orange" ];
  "Module.onlyFactoryOwner" -> "Ownable.owner" [ color = "orange" ];
  "Module.onlyFactoryOrOwner" -> "Ownable.owner" [ color = "orange" ];
  "Module.pause" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "Module.pause" -> "Pausable._pause" [ color = "orange" ];
  "Module.unpause" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "Module.unpause" -> "Pausable._unpause" [ color = "orange" ];
  "Module.takeUsageFee" -> "IERC20.transferFrom" [ color = "orange" ];
  "Module.takeUsageFee" -> "Ownable.owner" [ color = "orange" ];
  "Module.takeUsageFee" -> "IModuleFactory.usageCostInPoly" [ color = "orange" ];
  "Module.getDataStore" -> "ISecurityToken.dataStore" [ color = "orange" ];
  "Module.reclaimERC20" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "Module.reclaimERC20" -> "IERC20.balanceOf" [ color = "orange" ];
  "Module.reclaimERC20" -> "IERC20.transfer" [ color = "orange" ];
  "Module.reclaimETH" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "ModuleFactory.changeSTVersionBounds" -> "VersionUtils.unpack" [ color = "orange" ];
  "ModuleFactory.changeSTVersionBounds" -> "VersionUtils.lessThanOrEqual" [ color = "orange" ];
  "ModuleFactory.changeSTVersionBounds" -> "VersionUtils.greaterThanOrEqual" [ color = "orange" ];
  "ModuleFactory.changeSTVersionBounds" -> "VersionUtils.pack" [ color = "orange" ];
  "IModuleFactory.lowerSTVersionBounds" -> "VersionUtils.unpack" [ color = "orange" ];
  "IModuleFactory.upperSTVersionBounds" -> "VersionUtils.unpack" [ color = "orange" ];
  "ModuleFactory.setupCostInPoly" -> "IOracle.getPrice" [ color = "orange" ];
  "ModuleFactory.setupCostInPoly" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "ModuleFactory.setupCostInPoly" -> "DecimalMath.div" [ color = "orange" ];
  "IModuleFactory.usageCostInPoly" -> "IOracle.getPrice" [ color = "orange" ];
  "IModuleFactory.usageCostInPoly" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "IModuleFactory.usageCostInPoly" -> "DecimalMath.div" [ color = "orange" ];
  "ModuleFactory._takeFee" -> "ModuleFactory.setupCostInPoly" [ color = "green" ];
  "ModuleFactory._takeFee" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "ModuleFactory._takeFee" -> "IERC20.transferFrom" [ color = "orange" ];
  "ModuleFactory._takeFee" -> "Ownable.owner" [ color = "green" ];
  "ModuleFactory._initializeModule" -> "ModuleFactory._takeFee" [ color = "green" ];
  "ModuleFactory._initializeModule" -> "IBoot.getInitFunction" [ color = "orange" ];
  "ModuleFactory._initializeModule" -> "Util.getSig" [ color = "orange" ];
  "ModuleFactory._initializeModule" -> "_module.call" [ color = "orange" ];
  "GeneralPermissionManager.changePermission" -> "GeneralPermissionManager._changePermission" [ color = "green" ];
  "GeneralPermissionManager.changePermissionMulti" -> "GeneralPermissionManager._changePermission" [ color = "green" ];
  "GeneralPermissionManager.getAllModulesAndPermsFromTypes" -> "ISecurityToken.getModulesByType" [ color = "orange" ];
  "GeneralPermissionManager.getAllModulesAndPermsFromTypes" -> "IModule.getPermissions" [ color = "orange" ];
  "GeneralPermissionManager.getAllModulesAndPermsFromTypes" -> "ISecurityToken.getModulesByType" [ color = "orange" ];
  "GeneralPermissionManager.getAllModulesAndPermsFromTypes" -> "IModule.getPermissions" [ color = "orange" ];
  "GeneralPermissionManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "GeneralPermissionManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "GeneralPermissionManagerFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "GeneralPermissionManagerFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "GeneralPermissionManagerProxy.null" -> "GeneralPermissionManagerProxy._upgradeTo" [ color = "green" ];
  "CappedSTO." -> "CappedSTO.buyTokens" [ color = "green" ];
  "CappedSTO.configure" -> "CappedSTO._setFundRaiseType" [ color = "green" ];
  "CappedSTO.changeAllowBeneficialInvestments" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "CappedSTO.buyTokens" -> "CappedSTO._processTx" [ color = "green" ];
  "CappedSTO.buyTokens" -> "weiAmount.sub" [ color = "orange" ];
  "CappedSTO.buyTokens" -> "CappedSTO._forwardFunds" [ color = "green" ];
  "CappedSTO.buyTokensWithPoly" -> "CappedSTO._processTx" [ color = "green" ];
  "CappedSTO.buyTokensWithPoly" -> "CappedSTO._forwardPoly" [ color = "green" ];
  "CappedSTO.buyTokensWithPoly" -> "_investedPOLY.sub" [ color = "orange" ];
  "CappedSTO._processTx" -> "CappedSTO._preValidatePurchase" [ color = "green" ];
  "CappedSTO._processTx" -> "CappedSTO._getTokenAmount" [ color = "green" ];
  "CappedSTO._processTx" -> "_investedAmount.sub" [ color = "orange" ];
  "CappedSTO._processTx" -> "totalTokensSold.add" [ color = "orange" ];
  "CappedSTO._processTx" -> "CappedSTO._processPurchase" [ color = "green" ];
  "CappedSTO._preValidatePurchase" -> "CappedSTO._canBuy" [ color = "green" ];
  "CappedSTO._deliverTokens" -> "ISecurityToken.issue" [ color = "orange" ];
  "CappedSTO._processPurchase" -> "CappedSTO._deliverTokens" [ color = "green" ];
  "CappedSTO._getTokenAmount" -> "_investedAmount.mul" [ color = "orange" ];
  "CappedSTO._getTokenAmount" -> "tokens.div" [ color = "orange" ];
  "CappedSTO._getTokenAmount" -> "totalTokensSold.add" [ color = "orange" ];
  "CappedSTO._getTokenAmount" -> "cap.sub" [ color = "orange" ];
  "CappedSTO._getTokenAmount" -> "ISecurityToken.granularity" [ color = "orange" ];
  "CappedSTO._getTokenAmount" -> "tokens.div" [ color = "orange" ];
  "CappedSTO._getTokenAmount" -> "tokens.mul" [ color = "orange" ];
  "CappedSTO._getTokenAmount" -> "_investedAmount.sub" [ color = "orange" ];
  "CappedSTO._getTokenAmount" -> "tokens.mul" [ color = "orange" ];
  "CappedSTO._forwardFunds" -> "wallet.transfer" [ color = "orange" ];
  "CappedSTO._forwardPoly" -> "IERC20.transferFrom" [ color = "orange" ];
  "CappedSTOFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "CappedSTOFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "CappedSTOFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "CappedSTOFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "CappedSTOProxy.null" -> "CappedSTOProxy._upgradeTo" [ color = "green" ];
  "PreSaleSTO.allocateTokens" -> "PreSaleSTO._canBuy" [ color = "green" ];
  "PreSaleSTO.allocateTokens" -> "ISecurityToken.issue" [ color = "orange" ];
  "PreSaleSTO.allocateTokens" -> "investorCount.add" [ color = "orange" ];
  "PreSaleSTO.allocateTokens" -> "totalTokensSold.add" [ color = "orange" ];
  "PreSaleSTO.allocateTokensMulti" -> "PreSaleSTO.allocateTokens" [ color = "green" ];
  "PreSaleSTOFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "PreSaleSTOFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "PreSaleSTOFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "PreSaleSTOFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "PreSaleSTOProxy.null" -> "PreSaleSTOProxy._upgradeTo" [ color = "green" ];
  "Module.pause" -> "Module.pause" [ color = "orange" ];
  "STO._canBuy" -> "Module.getDataStore" [ color = "green" ];
  "STO._canBuy" -> "IDataStore.getUint256" [ color = "orange" ];
  "STO._canBuy" -> "STO._getKey" [ color = "green" ];
  "USDTieredSTO.validETH" -> "USDTieredSTO._getOracle" [ color = "green" ];
  "USDTieredSTO.validPOLY" -> "USDTieredSTO._getOracle" [ color = "green" ];
  "USDTieredSTO.configure" -> "USDTieredSTO._modifyTimes" [ color = "green" ];
  "USDTieredSTO.configure" -> "USDTieredSTO._modifyTiers" [ color = "green" ];
  "USDTieredSTO.configure" -> "USDTieredSTO._setFundRaiseType" [ color = "green" ];
  "USDTieredSTO.configure" -> "USDTieredSTO._modifyAddresses" [ color = "green" ];
  "USDTieredSTO.configure" -> "USDTieredSTO._modifyLimits" [ color = "green" ];
  "USDTieredSTO.modifyFunding" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "USDTieredSTO.modifyFunding" -> "USDTieredSTO._isSTOStarted" [ color = "green" ];
  "USDTieredSTO.modifyFunding" -> "USDTieredSTO._setFundRaiseType" [ color = "green" ];
  "USDTieredSTO.modifyLimits" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "USDTieredSTO.modifyLimits" -> "USDTieredSTO._isSTOStarted" [ color = "green" ];
  "USDTieredSTO.modifyLimits" -> "USDTieredSTO._modifyLimits" [ color = "green" ];
  "USDTieredSTO.modifyTiers" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "USDTieredSTO.modifyTiers" -> "USDTieredSTO._isSTOStarted" [ color = "green" ];
  "USDTieredSTO.modifyTiers" -> "USDTieredSTO._modifyTiers" [ color = "green" ];
  "USDTieredSTO.modifyTimes" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "USDTieredSTO.modifyTimes" -> "USDTieredSTO._isSTOStarted" [ color = "green" ];
  "USDTieredSTO.modifyTimes" -> "USDTieredSTO._modifyTimes" [ color = "green" ];
  "USDTieredSTO.modifyAddresses" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "USDTieredSTO.modifyAddresses" -> "USDTieredSTO._modifyAddresses" [ color = "green" ];
  "USDTieredSTO._modifyAddresses" -> "USDTieredSTO._modifyUSDTokens" [ color = "green" ];
  "USDTieredSTO.finalize" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "USDTieredSTO.finalize" -> "tempReturned.add" [ color = "orange" ];
  "USDTieredSTO.finalize" -> "tempSold.add" [ color = "orange" ];
  "USDTieredSTO.finalize" -> "IDataStore.getAddress" [ color = "orange" ];
  "USDTieredSTO.finalize" -> "Module.getDataStore" [ color = "green" ];
  "USDTieredSTO.finalize" -> "ISecurityToken.granularity" [ color = "orange" ];
  "USDTieredSTO.finalize" -> "tempReturned.div" [ color = "orange" ];
  "USDTieredSTO.finalize" -> "tempReturned.mul" [ color = "orange" ];
  "USDTieredSTO.finalize" -> "ISecurityToken.issue" [ color = "orange" ];
  "USDTieredSTO.changeNonAccreditedLimit" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "USDTieredSTO.getAccreditedData" -> "Module.getDataStore" [ color = "green" ];
  "USDTieredSTO.getAccreditedData" -> "IDataStore.getAddressArray" [ color = "orange" ];
  "USDTieredSTO.getAccreditedData" -> "USDTieredSTO._getIsAccredited" [ color = "green" ];
  "USDTieredSTO.changeAllowBeneficialInvestments" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "USDTieredSTO." -> "USDTieredSTO.buyWithETHRateLimited" [ color = "green" ];
  "USDTieredSTO.buyWithETH" -> "USDTieredSTO.buyWithETHRateLimited" [ color = "green" ];
  "USDTieredSTO.buyWithPOLY" -> "USDTieredSTO.buyWithPOLYRateLimited" [ color = "green" ];
  "USDTieredSTO.buyWithUSD" -> "USDTieredSTO.buyWithUSDRateLimited" [ color = "green" ];
  "USDTieredSTO.buyWithETHRateLimited" -> "USDTieredSTO._getSpentvalues" [ color = "green" ];
  "USDTieredSTO.buyWithETHRateLimited" -> "wallet.transfer" [ color = "orange" ];
  "USDTieredSTO.buyWithETHRateLimited" -> "USDTieredSTO.getTokensMinted" [ color = "green" ];
  "USDTieredSTO.buyWithPOLYRateLimited" -> "USDTieredSTO._buyWithTokens" [ color = "green" ];
  "USDTieredSTO.buyWithUSDRateLimited" -> "USDTieredSTO._buyWithTokens" [ color = "green" ];
  "USDTieredSTO._buyWithTokens" -> "USDTieredSTO._getSpentvalues" [ color = "green" ];
  "USDTieredSTO._buyWithTokens" -> "IERC20.transferFrom" [ color = "orange" ];
  "USDTieredSTO._buyWithTokens" -> "USDTieredSTO.getTokensMinted" [ color = "green" ];
  "USDTieredSTO._getSpentvalues" -> "USDTieredSTO.getTokensMinted" [ color = "green" ];
  "USDTieredSTO._getSpentvalues" -> "USDTieredSTO.getRate" [ color = "green" ];
  "USDTieredSTO._getSpentvalues" -> "USDTieredSTO._buyTokens" [ color = "green" ];
  "USDTieredSTO._getSpentvalues" -> "USDTieredSTO.getTokensMinted" [ color = "green" ];
  "USDTieredSTO._buyTokens" -> "STO._canBuy" [ color = "green" ];
  "USDTieredSTO._buyTokens" -> "DecimalMath.mul" [ color = "orange" ];
  "USDTieredSTO._buyTokens" -> "USDTieredSTO._buyTokensChecks" [ color = "green" ];
  "USDTieredSTO._buyTokens" -> "USDTieredSTO._calculateTier" [ color = "green" ];
  "USDTieredSTO._buyTokens" -> "allowedUSD.sub" [ color = "orange" ];
  "USDTieredSTO._buyTokens" -> "spentUSD.add" [ color = "orange" ];
  "USDTieredSTO._buyTokens" -> "fundsRaisedUSD.add" [ color = "orange" ];
  "USDTieredSTO._buyTokens" -> "DecimalMath.div" [ color = "orange" ];
  "USDTieredSTO._buyTokensChecks" -> "USDTieredSTO.isOpen" [ color = "green" ];
  "USDTieredSTO._buyTokensChecks" -> "investedUSD.add" [ color = "orange" ];
  "USDTieredSTO._buyTokensChecks" -> "USDTieredSTO._isAccredited" [ color = "green" ];
  "USDTieredSTO._buyTokensChecks" -> "investedUSD.add" [ color = "orange" ];
  "USDTieredSTO._buyTokensChecks" -> "investorLimitUSD.sub" [ color = "orange" ];
  "USDTieredSTO._calculateTier" -> "USDTieredSTO._purchaseTier" [ color = "green" ];
  "USDTieredSTO._calculateTier" -> "USDTieredSTO._purchaseTier" [ color = "green" ];
  "USDTieredSTO._calculateTier" -> "investedUSD.sub" [ color = "orange" ];
  "USDTieredSTO._calculateTier" -> "USDTieredSTO._purchaseTier" [ color = "green" ];
  "USDTieredSTO._calculateTier" -> "spentUSD.add" [ color = "orange" ];
  "USDTieredSTO._purchaseTier" -> "DecimalMath.div" [ color = "orange" ];
  "USDTieredSTO._purchaseTier" -> "ISecurityToken.granularity" [ color = "orange" ];
  "USDTieredSTO._purchaseTier" -> "_tierRemaining.div" [ color = "orange" ];
  "USDTieredSTO._purchaseTier" -> "purchasedTokens.div" [ color = "orange" ];
  "USDTieredSTO._purchaseTier" -> "purchasedTokens.mul" [ color = "orange" ];
  "USDTieredSTO._purchaseTier" -> "DecimalMath.mul" [ color = "orange" ];
  "USDTieredSTO._purchaseTier" -> "ISecurityToken.issue" [ color = "orange" ];
  "USDTieredSTO._isAccredited" -> "Module.getDataStore" [ color = "green" ];
  "USDTieredSTO._isAccredited" -> "USDTieredSTO._getIsAccredited" [ color = "green" ];
  "USDTieredSTO._getIsAccredited" -> "IDataStore.getUint256" [ color = "orange" ];
  "USDTieredSTO._getIsAccredited" -> "STO._getKey" [ color = "green" ];
  "USDTieredSTO.isOpen" -> "USDTieredSTO.capReached" [ color = "green" ];
  "USDTieredSTO.getRate" -> "IOracle.getPrice" [ color = "orange" ];
  "USDTieredSTO.getRate" -> "USDTieredSTO._getOracle" [ color = "green" ];
  "USDTieredSTO.getRate" -> "IOracle.getPrice" [ color = "orange" ];
  "USDTieredSTO.getRate" -> "USDTieredSTO._getOracle" [ color = "green" ];
  "USDTieredSTO.convertToUSD" -> "DecimalMath.mul" [ color = "orange" ];
  "USDTieredSTO.convertToUSD" -> "USDTieredSTO.getRate" [ color = "green" ];
  "USDTieredSTO.convertFromUSD" -> "DecimalMath.div" [ color = "orange" ];
  "USDTieredSTO.convertFromUSD" -> "USDTieredSTO.getRate" [ color = "green" ];
  "USDTieredSTO.getTokensSold" -> "USDTieredSTO.getTokensMinted" [ color = "green" ];
  "USDTieredSTO.getTokensMinted" -> "tokensMinted.add" [ color = "orange" ];
  "USDTieredSTO.getTokensSoldFor" -> "tokensSold.add" [ color = "orange" ];
  "USDTieredSTO.getTokensSoldByTier" -> "tokensSold.add" [ color = "orange" ];
  "USDTieredSTO.getTokensSoldByTier" -> "tokensSold.add" [ color = "orange" ];
  "USDTieredSTO.getTokensSoldByTier" -> "tokensSold.add" [ color = "orange" ];
  "USDTieredSTO.getSTODetails" -> "USDTieredSTO.getTokensSold" [ color = "green" ];
  "USDTieredSTO._getOracle" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "USDTieredSTO._getOracle" -> "ISecurityToken.polymathRegistry" [ color = "orange" ];
  "USDTieredSTOFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "USDTieredSTOFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "USDTieredSTOFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "USDTieredSTOFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "USDTieredSTOProxy.null" -> "USDTieredSTOProxy._upgradeTo" [ color = "green" ];
  "BlacklistTransferManager.executeTransfer" -> "BlacklistTransferManager._verifyTransfer" [ color = "green" ];
  "ITransferManager.verifyTransfer" -> "BlacklistTransferManager._verifyTransfer" [ color = "green" ];
  "BlacklistTransferManager._verifyTransfer" -> "now.sub" [ color = "orange" ];
  "BlacklistTransferManager._verifyTransfer" -> "endTimeTemp.add" [ color = "orange" ];
  "BlacklistTransferManager._verifyTransfer" -> "repeatPeriodTimeTemp.mul" [ color = "orange" ];
  "BlacklistTransferManager.addBlacklistType" -> "BlacklistTransferManager._addBlacklistType" [ color = "green" ];
  "BlacklistTransferManager._addBlacklistType" -> "BlacklistTransferManager._addBlacklistTypeDetails" [ color = "green" ];
  "BlacklistTransferManager._addBlacklistTypeDetails" -> "BlacklistTransferManager._validParams" [ color = "green" ];
  "BlacklistTransferManager.addBlacklistTypeMulti" -> "BlacklistTransferManager._addBlacklistType" [ color = "green" ];
  "BlacklistTransferManager.modifyBlacklistType" -> "BlacklistTransferManager._modifyBlacklistType" [ color = "green" ];
  "BlacklistTransferManager._modifyBlacklistType" -> "BlacklistTransferManager._addBlacklistTypeDetails" [ color = "green" ];
  "BlacklistTransferManager.modifyBlacklistTypeMulti" -> "BlacklistTransferManager._modifyBlacklistType" [ color = "green" ];
  "BlacklistTransferManager.deleteBlacklistType" -> "BlacklistTransferManager._deleteBlacklistType" [ color = "green" ];
  "BlacklistTransferManager.deleteBlacklistTypeMulti" -> "BlacklistTransferManager._deleteBlacklistType" [ color = "green" ];
  "BlacklistTransferManager.addInvestorToBlacklist" -> "BlacklistTransferManager._addInvestorToBlacklist" [ color = "green" ];
  "BlacklistTransferManager.addInvestorToBlacklistMulti" -> "BlacklistTransferManager._addInvestorToBlacklist" [ color = "green" ];
  "BlacklistTransferManager.addMultiInvestorToBlacklistMulti" -> "BlacklistTransferManager._addInvestorToBlacklist" [ color = "green" ];
  "BlacklistTransferManager.addInvestorToNewBlacklist" -> "BlacklistTransferManager._addBlacklistType" [ color = "green" ];
  "BlacklistTransferManager.addInvestorToNewBlacklist" -> "BlacklistTransferManager._addInvestorToBlacklist" [ color = "green" ];
  "BlacklistTransferManager.deleteInvestorFromBlacklist" -> "BlacklistTransferManager._deleteInvestorFromBlacklist" [ color = "green" ];
  "BlacklistTransferManager.deleteInvestorFromAllBlacklist" -> "BlacklistTransferManager._deleteInvestorFromAllBlacklist" [ color = "green" ];
  "BlacklistTransferManager._deleteInvestorFromAllBlacklist" -> "BlacklistTransferManager._deleteInvestorFromBlacklist" [ color = "green" ];
  "BlacklistTransferManager.deleteInvestorFromAllBlacklistMulti" -> "BlacklistTransferManager._deleteInvestorFromAllBlacklist" [ color = "green" ];
  "BlacklistTransferManager.deleteMultiInvestorsFromBlacklistMulti" -> "BlacklistTransferManager._deleteInvestorFromBlacklist" [ color = "green" ];
  "BlacklistTransferManager._validParams" -> "_repeatPeriodTime.mul" [ color = "orange" ];
  "BlacklistTransferManager._validParams" -> "_endTime.sub" [ color = "orange" ];
  "BlacklistTransferManager.getTokensByPartition" -> "IERC20.balanceOf" [ color = "orange" ];
  "BlacklistTransferManager.getTokensByPartition" -> "IERC20.balanceOf" [ color = "orange" ];
  "BlacklistTransferManager.getTokensByPartition" -> "ITransferManager.verifyTransfer" [ color = "green" ];
  "BlacklistTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "BlacklistTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "BlacklistTransferManagerFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "BlacklistTransferManagerFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "BlacklistTransferManagerProxy.null" -> "BlacklistTransferManagerProxy._upgradeTo" [ color = "green" ];
  "CountTransferManager.executeTransfer" -> "CountTransferManager._verifyTransfer" [ color = "green" ];
  "ITransferManager.verifyTransfer" -> "CountTransferManager._verifyTransfer" [ color = "green" ];
  "CountTransferManager._verifyTransfer" -> "ISecurityToken.holderCount" [ color = "orange" ];
  "CountTransferManager._verifyTransfer" -> "ISecurityToken.balanceOf" [ color = "orange" ];
  "CountTransferManager._verifyTransfer" -> "ISecurityToken.balanceOf" [ color = "orange" ];
  "CountTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "CountTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "CountTransferManagerFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "CountTransferManagerFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "CountTransferManagerProxy.null" -> "CountTransferManagerProxy._upgradeTo" [ color = "green" ];
  "GeneralTransferManager.executeTransfer" -> "abi.decode" [ color = "orange" ];
  "GeneralTransferManager.executeTransfer" -> "GeneralTransferManager._processTransferSignature" [ color = "green" ];
  "GeneralTransferManager.executeTransfer" -> "GeneralTransferManager._verifyTransfer" [ color = "green" ];
  "GeneralTransferManager._processTransferSignature" -> "abi.decode" [ color = "orange" ];
  "GeneralTransferManager._processTransferSignature" -> "GeneralTransferManager._modifyKYCDataSignedMulti" [ color = "green" ];
  "ITransferManager.verifyTransfer" -> "GeneralTransferManager._verifyTransfer" [ color = "green" ];
  "GeneralTransferManager._verifyTransfer" -> "GeneralTransferManager._getValuesForTransfer" [ color = "green" ];
  "GeneralTransferManager._verifyTransfer" -> "GeneralTransferManager._validExpiry" [ color = "green" ];
  "GeneralTransferManager._verifyTransfer" -> "GeneralTransferManager._validExpiry" [ color = "green" ];
  "GeneralTransferManager._verifyTransfer" -> "GeneralTransferManager._adjustTimes" [ color = "green" ];
  "GeneralTransferManager._verifyTransfer" -> "GeneralTransferManager._validLockTime" [ color = "green" ];
  "GeneralTransferManager._verifyTransfer" -> "GeneralTransferManager._validLockTime" [ color = "green" ];
  "GeneralTransferManager._verifyTransfer" -> "GeneralTransferManager.getAddressBytes32" [ color = "green" ];
  "GeneralTransferManager.modifyTransferRequirements" -> "GeneralTransferManager._modifyTransferRequirements" [ color = "green" ];
  "GeneralTransferManager.modifyTransferRequirementsMulti" -> "GeneralTransferManager._modifyTransferRequirements" [ color = "green" ];
  "GeneralTransferManager.modifyKYCData" -> "GeneralTransferManager._modifyKYCData" [ color = "green" ];
  "GeneralTransferManager._modifyKYCData" -> "Module.getDataStore" [ color = "green" ];
  "GeneralTransferManager._modifyKYCData" -> "GeneralTransferManager._isExistingInvestor" [ color = "green" ];
  "GeneralTransferManager._modifyKYCData" -> "IDataStore.insertAddress" [ color = "orange" ];
  "GeneralTransferManager._modifyKYCData" -> "VersionUtils.packKYC" [ color = "orange" ];
  "GeneralTransferManager._modifyKYCData" -> "IDataStore.setUint256" [ color = "orange" ];
  "GeneralTransferManager._modifyKYCData" -> "GeneralTransferManager._getKey" [ color = "green" ];
  "GeneralTransferManager.modifyKYCDataMulti" -> "GeneralTransferManager._modifyKYCData" [ color = "green" ];
  "GeneralTransferManager.modifyInvestorFlag" -> "GeneralTransferManager._modifyInvestorFlag" [ color = "green" ];
  "GeneralTransferManager._modifyInvestorFlag" -> "Module.getDataStore" [ color = "green" ];
  "GeneralTransferManager._modifyInvestorFlag" -> "GeneralTransferManager._isExistingInvestor" [ color = "green" ];
  "GeneralTransferManager._modifyInvestorFlag" -> "IDataStore.insertAddress" [ color = "orange" ];
  "GeneralTransferManager._modifyInvestorFlag" -> "IDataStore.setUint256" [ color = "orange" ];
  "GeneralTransferManager._modifyInvestorFlag" -> "GeneralTransferManager._getKey" [ color = "green" ];
  "GeneralTransferManager._modifyInvestorFlag" -> "IDataStore.getUint256" [ color = "orange" ];
  "GeneralTransferManager._modifyInvestorFlag" -> "GeneralTransferManager._getKey" [ color = "green" ];
  "GeneralTransferManager._modifyInvestorFlag" -> "IDataStore.setUint256" [ color = "orange" ];
  "GeneralTransferManager._modifyInvestorFlag" -> "GeneralTransferManager._getKey" [ color = "green" ];
  "GeneralTransferManager.modifyInvestorFlagMulti" -> "GeneralTransferManager._modifyInvestorFlag" [ color = "green" ];
  "GeneralTransferManager.modifyKYCDataSigned" -> "GeneralTransferManager._modifyKYCDataSigned" [ color = "green" ];
  "GeneralTransferManager._modifyKYCDataSigned" -> "GeneralTransferManager._checkSig" [ color = "green" ];
  "GeneralTransferManager._modifyKYCDataSigned" -> "GeneralTransferManager._modifyKYCData" [ color = "green" ];
  "GeneralTransferManager.modifyKYCDataSignedMulti" -> "GeneralTransferManager._modifyKYCDataSignedMulti" [ color = "green" ];
  "GeneralTransferManager._modifyKYCDataSignedMulti" -> "GeneralTransferManager._checkSig" [ color = "green" ];
  "GeneralTransferManager._modifyKYCDataSignedMulti" -> "GeneralTransferManager._modifyKYCData" [ color = "green" ];
  "GeneralTransferManager._checkSig" -> "_hash.toEthSignedMessageHash" [ color = "orange" ];
  "GeneralTransferManager._checkSig" -> "Module._checkPerm" [ color = "green" ];
  "GeneralTransferManager._getKYCValues" -> "IDataStore.getUint256" [ color = "orange" ];
  "GeneralTransferManager._getKYCValues" -> "GeneralTransferManager._getKey" [ color = "green" ];
  "GeneralTransferManager._getKYCValues" -> "VersionUtils.unpackKYC" [ color = "orange" ];
  "GeneralTransferManager._isExistingInvestor" -> "IDataStore.getUint256" [ color = "orange" ];
  "GeneralTransferManager._isExistingInvestor" -> "GeneralTransferManager._getKey" [ color = "green" ];
  "GeneralTransferManager._getValuesForTransfer" -> "Module.getDataStore" [ color = "green" ];
  "GeneralTransferManager._getValuesForTransfer" -> "GeneralTransferManager._getKYCValues" [ color = "green" ];
  "GeneralTransferManager._getValuesForTransfer" -> "GeneralTransferManager._getKYCValues" [ color = "green" ];
  "GeneralTransferManager.getAllInvestors" -> "Module.getDataStore" [ color = "green" ];
  "GeneralTransferManager.getAllInvestors" -> "IDataStore.getAddressArray" [ color = "orange" ];
  "GeneralTransferManager.getInvestors" -> "Module.getDataStore" [ color = "green" ];
  "GeneralTransferManager.getInvestors" -> "IDataStore.getAddressArrayElements" [ color = "orange" ];
  "GeneralTransferManager.getAllInvestorFlags" -> "GeneralTransferManager.getAllInvestors" [ color = "green" ];
  "GeneralTransferManager.getAllInvestorFlags" -> "GeneralTransferManager._getInvestorFlags" [ color = "green" ];
  "GeneralTransferManager.getInvestorFlag" -> "GeneralTransferManager._getInvestorFlags" [ color = "green" ];
  "GeneralTransferManager.getInvestorFlags" -> "GeneralTransferManager._getInvestorFlags" [ color = "green" ];
  "GeneralTransferManager._getInvestorFlags" -> "Module.getDataStore" [ color = "green" ];
  "GeneralTransferManager._getInvestorFlags" -> "IDataStore.getUint256" [ color = "orange" ];
  "GeneralTransferManager._getInvestorFlags" -> "GeneralTransferManager._getKey" [ color = "green" ];
  "GeneralTransferManager.getAllKYCData" -> "GeneralTransferManager.getAllInvestors" [ color = "green" ];
  "GeneralTransferManager.getAllKYCData" -> "GeneralTransferManager._kycData" [ color = "green" ];
  "GeneralTransferManager.getKYCData" -> "GeneralTransferManager._kycData" [ color = "green" ];
  "GeneralTransferManager._kycData" -> "GeneralTransferManager._getKYCValues" [ color = "green" ];
  "GeneralTransferManager._kycData" -> "Module.getDataStore" [ color = "green" ];
  "GeneralTransferManager.getTokensByPartition" -> "IERC20.balanceOf" [ color = "orange" ];
  "GeneralTransferManager.getTokensByPartition" -> "IERC20.balanceOf" [ color = "orange" ];
  "GeneralTransferManager.getTokensByPartition" -> "GeneralTransferManager._getKYCValues" [ color = "green" ];
  "GeneralTransferManager.getTokensByPartition" -> "Module.getDataStore" [ color = "green" ];
  "GeneralTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "GeneralTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "GeneralTransferManagerFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "GeneralTransferManagerFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "GeneralTransferManagerProxy.null" -> "GeneralTransferManagerProxy._upgradeTo" [ color = "green" ];
  "LockUpTransferManager.executeTransfer" -> "LockUpTransferManager._verifyTransfer" [ color = "green" ];
  "ITransferManager.verifyTransfer" -> "LockUpTransferManager._verifyTransfer" [ color = "green" ];
  "LockUpTransferManager._verifyTransfer" -> "LockUpTransferManager._checkIfValidTransfer" [ color = "green" ];
  "LockUpTransferManager.addNewLockUpType" -> "LockUpTransferManager._addNewLockUpType" [ color = "green" ];
  "LockUpTransferManager.addNewLockUpTypeMulti" -> "LockUpTransferManager._addNewLockUpType" [ color = "green" ];
  "LockUpTransferManager.addLockUpByName" -> "LockUpTransferManager._addLockUpByName" [ color = "green" ];
  "LockUpTransferManager.addLockUpByNameMulti" -> "LockUpTransferManager._checkLengthOfArray" [ color = "green" ];
  "LockUpTransferManager.addLockUpByNameMulti" -> "LockUpTransferManager._addLockUpByName" [ color = "green" ];
  "LockUpTransferManager.addNewLockUpToUser" -> "LockUpTransferManager._addNewLockUpToUser" [ color = "green" ];
  "LockUpTransferManager.addNewLockUpToUserMulti" -> "LockUpTransferManager._addNewLockUpToUser" [ color = "green" ];
  "LockUpTransferManager.removeLockUpFromUser" -> "LockUpTransferManager._removeLockUpFromUser" [ color = "green" ];
  "LockUpTransferManager.removeLockupType" -> "LockUpTransferManager._removeLockupType" [ color = "green" ];
  "LockUpTransferManager.removeLockupTypeMulti" -> "LockUpTransferManager._removeLockupType" [ color = "green" ];
  "LockUpTransferManager.removeLockUpFromUserMulti" -> "LockUpTransferManager._checkLengthOfArray" [ color = "green" ];
  "LockUpTransferManager.removeLockUpFromUserMulti" -> "LockUpTransferManager._removeLockUpFromUser" [ color = "green" ];
  "LockUpTransferManager.modifyLockUpType" -> "LockUpTransferManager._modifyLockUpType" [ color = "green" ];
  "LockUpTransferManager.modifyLockUpTypeMulti" -> "LockUpTransferManager._modifyLockUpType" [ color = "green" ];
  "LockUpTransferManager.getLockUp" -> "LockUpTransferManager._getUnlockedAmountForLockup" [ color = "green" ];
  "LockUpTransferManager.getAllLockupData" -> "LockUpTransferManager.getLockUp" [ color = "green" ];
  "LockUpTransferManager.getListOfAddresses" -> "LockUpTransferManager._validLockUpCheck" [ color = "green" ];
  "LockUpTransferManager.getLockedTokenToUser" -> "LockUpTransferManager._checkZeroAddress" [ color = "green" ];
  "LockUpTransferManager.getLockedTokenToUser" -> "LockUpTransferManager._getUnlockedAmountForLockup" [ color = "green" ];
  "LockUpTransferManager.getLockedTokenToUser" -> "totalRemainingLockedAmount.add" [ color = "orange" ];
  "LockUpTransferManager._checkIfValidTransfer" -> "LockUpTransferManager.getLockedTokenToUser" [ color = "green" ];
  "LockUpTransferManager._checkIfValidTransfer" -> "IERC20.balanceOf" [ color = "orange" ];
  "LockUpTransferManager._checkIfValidTransfer" -> "currentBalance.sub" [ color = "orange" ];
  "LockUpTransferManager._getUnlockedAmountForLockup" -> "now.sub" [ color = "orange" ];
  "LockUpTransferManager._removeLockupType" -> "LockUpTransferManager._validLockUpCheck" [ color = "green" ];
  "LockUpTransferManager._modifyLockUpType" -> "LockUpTransferManager._checkValidStartTime" [ color = "green" ];
  "LockUpTransferManager._modifyLockUpType" -> "LockUpTransferManager._validLockUpCheck" [ color = "green" ];
  "LockUpTransferManager._modifyLockUpType" -> "LockUpTransferManager._checkLockUpParams" [ color = "green" ];
  "LockUpTransferManager._removeLockUpFromUser" -> "LockUpTransferManager._checkZeroAddress" [ color = "green" ];
  "LockUpTransferManager._removeLockUpFromUser" -> "LockUpTransferManager._checkValidName" [ color = "green" ];
  "LockUpTransferManager._addNewLockUpToUser" -> "LockUpTransferManager._checkZeroAddress" [ color = "green" ];
  "LockUpTransferManager._addNewLockUpToUser" -> "LockUpTransferManager._addNewLockUpType" [ color = "green" ];
  "LockUpTransferManager._addNewLockUpToUser" -> "LockUpTransferManager._addLockUpByName" [ color = "green" ];
  "LockUpTransferManager._addLockUpByName" -> "LockUpTransferManager._checkZeroAddress" [ color = "green" ];
  "LockUpTransferManager._addLockUpByName" -> "LockUpTransferManager._checkValidStartTime" [ color = "green" ];
  "LockUpTransferManager._addNewLockUpType" -> "LockUpTransferManager._checkValidName" [ color = "green" ];
  "LockUpTransferManager._addNewLockUpType" -> "LockUpTransferManager._checkValidStartTime" [ color = "green" ];
  "LockUpTransferManager._addNewLockUpType" -> "LockUpTransferManager._checkLockUpParams" [ color = "green" ];
  "LockUpTransferManager.getTokensByPartition" -> "IERC20.balanceOf" [ color = "orange" ];
  "LockUpTransferManager.getTokensByPartition" -> "IERC20.balanceOf" [ color = "orange" ];
  "LockUpTransferManager.getTokensByPartition" -> "Math.min" [ color = "orange" ];
  "LockUpTransferManager.getTokensByPartition" -> "LockUpTransferManager.getLockedTokenToUser" [ color = "green" ];
  "LockUpTransferManager.getTokensByPartition" -> "currentBalance.sub" [ color = "orange" ];
  "LockUpTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "LockUpTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "LockUpTransferManagerFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "LockUpTransferManagerFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "LockUpTransferManagerProxy.null" -> "LockUpTransferManagerProxy._upgradeTo" [ color = "green" ];
  "ManualApprovalTransferManager.executeTransfer" -> "ManualApprovalTransferManager._verifyTransfer" [ color = "green" ];
  "ITransferManager.verifyTransfer" -> "ManualApprovalTransferManager._verifyTransfer" [ color = "green" ];
  "ManualApprovalTransferManager.addManualApproval" -> "ManualApprovalTransferManager._addManualApproval" [ color = "green" ];
  "ManualApprovalTransferManager._addManualApproval" -> "ManualApprovalTransferManager._revokeManualApproval" [ color = "green" ];
  "ManualApprovalTransferManager.addManualApprovalMulti" -> "ManualApprovalTransferManager._checkInputLengthArray" [ color = "green" ];
  "ManualApprovalTransferManager.addManualApprovalMulti" -> "ManualApprovalTransferManager._addManualApproval" [ color = "green" ];
  "ManualApprovalTransferManager.modifyManualApproval" -> "ManualApprovalTransferManager._modifyManualApproval" [ color = "green" ];
  "ManualApprovalTransferManager._modifyManualApproval" -> "allowance.add" [ color = "orange" ];
  "ManualApprovalTransferManager.modifyManualApprovalMulti" -> "ManualApprovalTransferManager._checkInputLengthArray" [ color = "green" ];
  "ManualApprovalTransferManager.modifyManualApprovalMulti" -> "ManualApprovalTransferManager._modifyManualApproval" [ color = "green" ];
  "ManualApprovalTransferManager.revokeManualApproval" -> "ManualApprovalTransferManager._revokeManualApproval" [ color = "green" ];
  "ManualApprovalTransferManager.revokeManualApprovalMulti" -> "ManualApprovalTransferManager._revokeManualApproval" [ color = "green" ];
  "ManualApprovalTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "ManualApprovalTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "ManualApprovalTransferManagerFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "ManualApprovalTransferManagerFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "ManualApprovalTransferManagerProxy.null" -> "ManualApprovalTransferManagerProxy._upgradeTo" [ color = "green" ];
  "PercentageTransferManager.executeTransfer" -> "PercentageTransferManager._verifyTransfer" [ color = "green" ];
  "ITransferManager.verifyTransfer" -> "PercentageTransferManager._verifyTransfer" [ color = "green" ];
  "PercentageTransferManager._verifyTransfer" -> "IERC20.balanceOf" [ color = "orange" ];
  "PercentageTransferManager._verifyTransfer" -> "newBalance.mul" [ color = "orange" ];
  "PercentageTransferManager._verifyTransfer" -> "IERC20.totalSupply" [ color = "orange" ];
  "PercentageTransferManager.modifyWhitelistMulti" -> "PercentageTransferManager.modifyWhitelist" [ color = "green" ];
  "PercentageTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "PercentageTransferManagerFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "PercentageTransferManagerFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "PercentageTransferManagerFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "PercentageTransferManagerProxy.null" -> "PercentageTransferManagerProxy._upgradeTo" [ color = "green" ];
  "Module.unpause" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "Module.unpause" -> "Pausable._unpause" [ color = "orange" ];
  "Module.pause" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "Module.pause" -> "Pausable._pause" [ color = "orange" ];
  "VolumeRestrictionTM.executeTransfer" -> "VolumeRestrictionTM._verifyTransfer" [ color = "green" ];
  "VolumeRestrictionTM.executeTransfer" -> "VolumeRestrictionTM._updateStorage" [ color = "green" ];
  "ITransferManager.verifyTransfer" -> "VolumeRestrictionTM._verifyTransfer" [ color = "green" ];
  "VolumeRestrictionTM._verifyTransfer" -> "VolumeRestrictionTM._restrictionCheck" [ color = "green" ];
  "VolumeRestrictionTM._verifyTransfer" -> "VolumeRestrictionTM._restrictionCheck" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualRestriction" -> "VolumeRestrictionTM._getValidStartTime" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualRestriction" -> "VolumeRestrictionTM._checkInputParams" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualRestriction" -> "VolumeRestrictionTM.removeIndividualRestriction" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualRestriction" -> "VolumeRestrictionLib.addRestrictionData" [ color = "orange" ];
  "VolumeRestrictionTM.addIndividualRestriction" -> "Module.getDataStore" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualDailyRestriction" -> "VolumeRestrictionTM._getValidStartTime" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualDailyRestriction" -> "VolumeRestrictionTM._checkInputParams" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualDailyRestriction" -> "VolumeRestrictionTM.removeIndividualDailyRestriction" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualDailyRestriction" -> "VolumeRestrictionLib.addRestrictionData" [ color = "orange" ];
  "VolumeRestrictionTM.addIndividualDailyRestriction" -> "Module.getDataStore" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualDailyRestrictionMulti" -> "VolumeRestrictionTM._checkLengthOfArray" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualDailyRestrictionMulti" -> "VolumeRestrictionTM.addIndividualDailyRestriction" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualRestrictionMulti" -> "VolumeRestrictionTM._checkLengthOfArray" [ color = "green" ];
  "VolumeRestrictionTM.addIndividualRestrictionMulti" -> "VolumeRestrictionTM.addIndividualRestriction" [ color = "green" ];
  "VolumeRestrictionTM.addDefaultRestriction" -> "VolumeRestrictionTM._getValidStartTime" [ color = "green" ];
  "VolumeRestrictionTM.addDefaultRestriction" -> "VolumeRestrictionTM._checkInputParams" [ color = "green" ];
  "VolumeRestrictionTM.addDefaultDailyRestriction" -> "VolumeRestrictionTM._getValidStartTime" [ color = "green" ];
  "VolumeRestrictionTM.addDefaultDailyRestriction" -> "VolumeRestrictionTM._checkInputParams" [ color = "green" ];
  "VolumeRestrictionTM.removeIndividualRestriction" -> "VolumeRestrictionTM._removeIndividualRestriction" [ color = "green" ];
  "VolumeRestrictionTM._removeIndividualRestriction" -> "VolumeRestrictionLib.deleteHolderFromList" [ color = "orange" ];
  "VolumeRestrictionTM._removeIndividualRestriction" -> "Module.getDataStore" [ color = "green" ];
  "VolumeRestrictionTM.removeIndividualRestrictionMulti" -> "VolumeRestrictionTM._removeIndividualRestriction" [ color = "green" ];
  "VolumeRestrictionTM.removeIndividualDailyRestriction" -> "VolumeRestrictionTM._removeIndividualDailyRestriction" [ color = "green" ];
  "VolumeRestrictionTM._removeIndividualDailyRestriction" -> "VolumeRestrictionLib.deleteHolderFromList" [ color = "orange" ];
  "VolumeRestrictionTM._removeIndividualDailyRestriction" -> "Module.getDataStore" [ color = "green" ];
  "VolumeRestrictionTM.removeIndividualDailyRestrictionMulti" -> "VolumeRestrictionTM._removeIndividualDailyRestriction" [ color = "green" ];
  "VolumeRestrictionTM.modifyIndividualRestriction" -> "VolumeRestrictionTM._isAllowedToModify" [ color = "green" ];
  "VolumeRestrictionTM.modifyIndividualRestriction" -> "VolumeRestrictionTM._getValidStartTime" [ color = "green" ];
  "VolumeRestrictionTM.modifyIndividualRestriction" -> "VolumeRestrictionTM._checkInputParams" [ color = "green" ];
  "VolumeRestrictionTM.modifyIndividualDailyRestriction" -> "VolumeRestrictionTM._getValidStartTime" [ color = "green" ];
  "VolumeRestrictionTM.modifyIndividualDailyRestriction" -> "VolumeRestrictionTM._checkInputParams" [ color = "green" ];
  "VolumeRestrictionTM.modifyIndividualDailyRestrictionMulti" -> "VolumeRestrictionTM._checkLengthOfArray" [ color = "green" ];
  "VolumeRestrictionTM.modifyIndividualDailyRestrictionMulti" -> "VolumeRestrictionTM.modifyIndividualDailyRestriction" [ color = "green" ];
  "VolumeRestrictionTM.modifyIndividualRestrictionMulti" -> "VolumeRestrictionTM._checkLengthOfArray" [ color = "green" ];
  "VolumeRestrictionTM.modifyIndividualRestrictionMulti" -> "VolumeRestrictionTM.modifyIndividualRestriction" [ color = "green" ];
  "VolumeRestrictionTM.modifyDefaultRestriction" -> "VolumeRestrictionTM._isAllowedToModify" [ color = "green" ];
  "VolumeRestrictionTM.modifyDefaultRestriction" -> "VolumeRestrictionTM._getValidStartTime" [ color = "green" ];
  "VolumeRestrictionTM.modifyDefaultRestriction" -> "VolumeRestrictionTM._checkInputParams" [ color = "green" ];
  "VolumeRestrictionTM.modifyDefaultDailyRestriction" -> "VolumeRestrictionTM._getValidStartTime" [ color = "green" ];
  "VolumeRestrictionTM.modifyDefaultDailyRestriction" -> "VolumeRestrictionTM._checkInputParams" [ color = "green" ];
  "VolumeRestrictionTM._restrictionCheck" -> "VolumeRestrictionTM._bucketCheck" [ color = "green" ];
  "VolumeRestrictionTM._restrictionCheck" -> "BokkyPooBahsDateTimeLibrary.diffDays" [ color = "orange" ];
  "VolumeRestrictionTM._restrictionCheck" -> "VolumeRestrictionTM._checkValidAmountToTransact" [ color = "green" ];
  "VolumeRestrictionTM._restrictionCheck" -> "VolumeRestrictionTM._dailyTxCheck" [ color = "green" ];
  "VolumeRestrictionTM._restrictionCheck" -> "VolumeRestrictionTM._validAllowedAmount" [ color = "green" ];
  "VolumeRestrictionTM._validAllowedAmount" -> "Math.min" [ color = "orange" ];
  "VolumeRestrictionTM._isValidAmountAfterRestrictionChanges" -> "VolumeRestrictionLib.isValidAmountAfterRestrictionChanges" [ color = "orange" ];
  "VolumeRestrictionTM._dailyTxCheck" -> "BokkyPooBahsDateTimeLibrary.diffDays" [ color = "orange" ];
  "VolumeRestrictionTM._dailyTxCheck" -> "now.sub" [ color = "orange" ];
  "VolumeRestrictionTM._dailyTxCheck" -> "_dailyLastTradedDayTime.add" [ color = "orange" ];
  "VolumeRestrictionTM._dailyTxCheck" -> "BokkyPooBahsDateTimeLibrary.diffDays" [ color = "orange" ];
  "VolumeRestrictionTM._dailyTxCheck" -> "VolumeRestrictionTM._checkValidAmountToTransact" [ color = "green" ];
  "VolumeRestrictionTM._bucketCheck" -> "counter.add" [ color = "orange" ];
  "VolumeRestrictionTM._bucketCheck" -> "counter.sub" [ color = "orange" ];
  "VolumeRestrictionTM._bucketCheck" -> "temp.mul" [ color = "orange" ];
  "VolumeRestrictionTM._bucketCheck" -> "sumOfLastPeriod.sub" [ color = "orange" ];
  "VolumeRestrictionTM._bucketCheck" -> "sumOfLastPeriod.sub" [ color = "orange" ];
  "VolumeRestrictionTM._bucketCheck" -> "_fromTime.add" [ color = "orange" ];
  "VolumeRestrictionTM._bucketCheck" -> "_diffDays.mul" [ color = "orange" ];
  "VolumeRestrictionTM._checkValidAmountToTransact" -> "VolumeRestrictionTM._allowedAmountToTransact" [ color = "green" ];
  "VolumeRestrictionTM._checkValidAmountToTransact" -> "VolumeRestrictionTM._isValidAmountAfterRestrictionChanges" [ color = "green" ];
  "VolumeRestrictionTM._allowedAmountToTransact" -> "IERC20.totalSupply" [ color = "orange" ];
  "VolumeRestrictionTM._allowedAmountToTransact" -> "_allowedAmount.sub" [ color = "orange" ];
  "VolumeRestrictionTM._updateStorage" -> "VolumeRestrictionTM._updateStorageActual" [ color = "green" ];
  "VolumeRestrictionTM._updateStorage" -> "VolumeRestrictionTM._updateStorageActual" [ color = "green" ];
  "VolumeRestrictionTM._updateStorageActual" -> "_sumOfLastPeriod.add" [ color = "orange" ];
  "VolumeRestrictionTM._checkInputParams" -> "BokkyPooBahsDateTimeLibrary.diffDays" [ color = "orange" ];
  "VolumeRestrictionTM.getTokensByPartition" -> "IERC20.balanceOf" [ color = "orange" ];
  "VolumeRestrictionTM.getTokensByPartition" -> "IERC20.balanceOf" [ color = "orange" ];
  "VolumeRestrictionTM.getTokensByPartition" -> "VolumeRestrictionTM._verifyTransfer" [ color = "green" ];
  "VolumeRestrictionTM.getTokensByPartition" -> "currentBalance.sub" [ color = "orange" ];
  "VolumeRestrictionTM.getIndividualBucketDetailsToUser" -> "VolumeRestrictionTM._getBucketDetails" [ color = "green" ];
  "VolumeRestrictionTM.getDefaultBucketDetailsToUser" -> "VolumeRestrictionTM._getBucketDetails" [ color = "green" ];
  "VolumeRestrictionTM.getIndividualRestriction" -> "VolumeRestrictionTM._volumeRestrictionSplay" [ color = "green" ];
  "VolumeRestrictionTM.getIndividualDailyRestriction" -> "VolumeRestrictionTM._volumeRestrictionSplay" [ color = "green" ];
  "VolumeRestrictionTM.getDefaultRestriction" -> "VolumeRestrictionTM._volumeRestrictionSplay" [ color = "green" ];
  "VolumeRestrictionTM.getDefaultDailyRestriction" -> "VolumeRestrictionTM._volumeRestrictionSplay" [ color = "green" ];
  "VolumeRestrictionTM.getRestrictionData" -> "VolumeRestrictionLib.getRestrictionData" [ color = "orange" ];
  "VolumeRestrictionTM.getRestrictionData" -> "Module.getDataStore" [ color = "green" ];
  "VolumeRestrictionTMFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "VolumeRestrictionTMFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "VolumeRestrictionTMFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "VolumeRestrictionTMFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "VolumeRestrictionTMProxy.null" -> "VolumeRestrictionTMProxy._upgradeTo" [ color = "green" ];
  "UpgradableModuleFactory.setLogicContract" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "UpgradableModuleFactory.setLogicContract" -> "IModuleRegistry.unverifyModule" [ color = "orange" ];
  "UpgradableModuleFactory.upgrade" -> "OwnedUpgradeabilityProxy.upgradeToAndCall" [ color = "orange" ];
  "ModuleFactory._initializeModule" -> "ModuleFactory._initializeModule" [ color = "orange" ];
  "VestingEscrowWallet.configure" -> "VestingEscrowWallet._setWallet" [ color = "green" ];
  "VestingEscrowWallet.changeTreasuryWallet" -> "Module._onlySecurityTokenOwner" [ color = "green" ];
  "VestingEscrowWallet.changeTreasuryWallet" -> "VestingEscrowWallet._setWallet" [ color = "green" ];
  "VestingEscrowWallet.depositTokens" -> "VestingEscrowWallet._depositTokens" [ color = "green" ];
  "VestingEscrowWallet._depositTokens" -> "ISecurityToken.transferFrom" [ color = "orange" ];
  "VestingEscrowWallet._depositTokens" -> "unassignedTokens.add" [ color = "orange" ];
  "VestingEscrowWallet.sendToTreasury" -> "ISecurityToken.transfer" [ color = "orange" ];
  "VestingEscrowWallet.sendToTreasury" -> "VestingEscrowWallet.getTreasuryWallet" [ color = "green" ];
  "VestingEscrowWallet.getTreasuryWallet" -> "IDataStore.getAddress" [ color = "orange" ];
  "VestingEscrowWallet.getTreasuryWallet" -> "Module.getDataStore" [ color = "green" ];
  "VestingEscrowWallet.pushAvailableTokens" -> "VestingEscrowWallet._sendTokens" [ color = "green" ];
  "VestingEscrowWallet.pullAvailableTokens" -> "VestingEscrowWallet._sendTokens" [ color = "green" ];
  "VestingEscrowWallet.addTemplate" -> "VestingEscrowWallet._addTemplate" [ color = "green" ];
  "VestingEscrowWallet._addTemplate" -> "VestingEscrowWallet._isTemplateExists" [ color = "green" ];
  "VestingEscrowWallet._addTemplate" -> "VestingEscrowWallet._validateTemplate" [ color = "green" ];
  "VestingEscrowWallet.removeTemplate" -> "VestingEscrowWallet._isTemplateExists" [ color = "green" ];
  "VestingEscrowWallet.addSchedule" -> "VestingEscrowWallet._addSchedule" [ color = "green" ];
  "VestingEscrowWallet._addSchedule" -> "VestingEscrowWallet._addTemplate" [ color = "green" ];
  "VestingEscrowWallet._addSchedule" -> "VestingEscrowWallet._addScheduleFromTemplate" [ color = "green" ];
  "VestingEscrowWallet.addScheduleFromTemplate" -> "VestingEscrowWallet._addScheduleFromTemplate" [ color = "green" ];
  "VestingEscrowWallet._addScheduleFromTemplate" -> "VestingEscrowWallet._isTemplateExists" [ color = "green" ];
  "VestingEscrowWallet._addScheduleFromTemplate" -> "VestingEscrowWallet._depositTokens" [ color = "green" ];
  "VestingEscrowWallet._addScheduleFromTemplate" -> "numberOfTokens.sub" [ color = "orange" ];
  "VestingEscrowWallet._addScheduleFromTemplate" -> "unassignedTokens.sub" [ color = "orange" ];
  "VestingEscrowWallet.modifySchedule" -> "VestingEscrowWallet._modifySchedule" [ color = "green" ];
  "VestingEscrowWallet._modifySchedule" -> "VestingEscrowWallet._checkSchedule" [ color = "green" ];
  "VestingEscrowWallet.revokeSchedule" -> "VestingEscrowWallet._checkSchedule" [ color = "green" ];
  "VestingEscrowWallet.revokeSchedule" -> "VestingEscrowWallet._sendTokensPerSchedule" [ color = "green" ];
  "VestingEscrowWallet.revokeSchedule" -> "VestingEscrowWallet._getReleasedTokens" [ color = "green" ];
  "VestingEscrowWallet.revokeSchedule" -> "unassignedTokens.add" [ color = "orange" ];
  "VestingEscrowWallet.revokeSchedule" -> "VestingEscrowWallet._deleteUserToTemplates" [ color = "green" ];
  "VestingEscrowWallet.revokeSchedule" -> "VestingEscrowWallet._deleteTemplateToUsers" [ color = "green" ];
  "VestingEscrowWallet.revokeAllSchedules" -> "VestingEscrowWallet._revokeAllSchedules" [ color = "green" ];
  "VestingEscrowWallet._revokeAllSchedules" -> "VestingEscrowWallet._sendTokens" [ color = "green" ];
  "VestingEscrowWallet._revokeAllSchedules" -> "VestingEscrowWallet._getReleasedTokens" [ color = "green" ];
  "VestingEscrowWallet._revokeAllSchedules" -> "unassignedTokens.add" [ color = "orange" ];
  "VestingEscrowWallet._revokeAllSchedules" -> "VestingEscrowWallet._deleteTemplateToUsers" [ color = "green" ];
  "VestingEscrowWallet.getSchedule" -> "VestingEscrowWallet._checkSchedule" [ color = "green" ];
  "VestingEscrowWallet.getSchedule" -> "VestingEscrowWallet._getScheduleState" [ color = "green" ];
  "VestingEscrowWallet._getScheduleState" -> "VestingEscrowWallet._checkSchedule" [ color = "green" ];
  "VestingEscrowWallet._getAvailableTokens" -> "VestingEscrowWallet._getReleasedTokens" [ color = "green" ];
  "VestingEscrowWallet._getAvailableTokens" -> "releasedTokens.sub" [ color = "orange" ];
  "VestingEscrowWallet._getReleasedTokens" -> "now.sub" [ color = "orange" ];
  "VestingEscrowWallet.pushAvailableTokensMulti" -> "VestingEscrowWallet.pushAvailableTokens" [ color = "green" ];
  "VestingEscrowWallet.addScheduleMulti" -> "VestingEscrowWallet._addSchedule" [ color = "green" ];
  "VestingEscrowWallet.addScheduleFromTemplateMulti" -> "VestingEscrowWallet._addScheduleFromTemplate" [ color = "green" ];
  "VestingEscrowWallet.revokeSchedulesMulti" -> "VestingEscrowWallet._revokeAllSchedules" [ color = "green" ];
  "VestingEscrowWallet.modifyScheduleMulti" -> "VestingEscrowWallet._modifySchedule" [ color = "green" ];
  "VestingEscrowWallet._validateTemplate" -> "_duration.div" [ color = "orange" ];
  "VestingEscrowWallet._validateTemplate" -> "_numberOfTokens.div" [ color = "orange" ];
  "VestingEscrowWallet._validateTemplate" -> "ISecurityToken.granularity" [ color = "orange" ];
  "VestingEscrowWallet._sendTokens" -> "VestingEscrowWallet._sendTokensPerSchedule" [ color = "green" ];
  "VestingEscrowWallet._sendTokensPerSchedule" -> "VestingEscrowWallet._getAvailableTokens" [ color = "green" ];
  "VestingEscrowWallet._sendTokensPerSchedule" -> "ISecurityToken.transfer" [ color = "orange" ];
  "VestingEscrowWalletFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "VestingEscrowWalletFactory.null" -> "VersionUtils.pack" [ color = "orange" ];
  "VestingEscrowWalletFactory.deploy" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "VestingEscrowWalletFactory.deploy" -> "ModuleFactory._initializeModule" [ color = "green" ];
  "VestingEscrowWalletProxy.null" -> "VestingEscrowWalletProxy._upgradeTo" [ color = "green" ];
  "IOracle.getPrice" -> "IMedianizer.peek" [ color = "orange" ];
  "PolyOracle.isAdminOrOwner" -> "Ownable.owner" [ color = "green" ];
  "PolyOracle.null" -> "usingOraclize.oraclize_setCustomGasPrice" [ color = "green" ];
  "usingOraclize.__callback" -> "usingOraclize.oraclize_cbAddress" [ color = "green" ];
  "usingOraclize.__callback" -> "usingOraclize.parseInt" [ color = "green" ];
  "usingOraclize.__callback" -> "POLYUSD.mul" [ color = "orange" ];
  "usingOraclize.__callback" -> "POLYUSD.add" [ color = "orange" ];
  "usingOraclize.__callback" -> "POLYUSD.sub" [ color = "orange" ];
  "PolyOracle.schedulePriceUpdatesFixed" -> "usingOraclize.oraclize_getPrice" [ color = "green" ];
  "PolyOracle.schedulePriceUpdatesFixed" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "PolyOracle.schedulePriceUpdatesFixed" -> "usingOraclize.oraclize_getPrice" [ color = "green" ];
  "PolyOracle.schedulePriceUpdatesFixed" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "PolyOracle.schedulePriceUpdatesRolling" -> "usingOraclize.oraclize_getPrice" [ color = "green" ];
  "PolyOracle.schedulePriceUpdatesRolling" -> "usingOraclize.oraclize_query" [ color = "green" ];
  "PolyOracle.setGasPrice" -> "usingOraclize.oraclize_setCustomGasPrice" [ color = "green" ];
  "StableOracle.getCurrencyAddress" -> "IOracle.getCurrencyAddress" [ color = "orange" ];
  "StableOracle.getCurrencySymbol" -> "IOracle.getCurrencySymbol" [ color = "orange" ];
  "StableOracle.getCurrencyDenominated" -> "IOracle.getCurrencyDenominated" [ color = "orange" ];
  "IOracle.getPrice" -> "IOracle.getPrice" [ color = "orange" ];
  "IOracle.getPrice" -> "StableOracle._change" [ color = "green" ];
  "StableOracle._change" -> "_newPrice.sub" [ color = "orange" ];
  "StableOracle._change" -> "_oldPrice.sub" [ color = "orange" ];
  "StableOracle._change" -> "diff.mul" [ color = "orange" ];
  "OwnedProxy.ifOwner" -> "OwnedProxy._owner" [ color = "green" ];
  "OwnedProxy.ifOwner" -> "OwnedProxy._fallback" [ color = "green" ];
  "OwnedProxy.null" -> "OwnedProxy._setOwner" [ color = "green" ];
  "OwnedProxy.proxyOwner" -> "OwnedProxy._owner" [ color = "green" ];
  "OwnedProxy.implementation" -> "OwnedProxy._implementation" [ color = "green" ];
  "OwnedProxy.transferProxyOwnership" -> "OwnedProxy._owner" [ color = "green" ];
  "OwnedProxy.transferProxyOwnership" -> "OwnedProxy._setOwner" [ color = "green" ];
  "OwnedUpgradeabilityProxy.ifOwner" -> "OwnedUpgradeabilityProxy._upgradeabilityOwner" [ color = "green" ];
  "OwnedUpgradeabilityProxy.ifOwner" -> "OwnedUpgradeabilityProxy._fallback" [ color = "green" ];
  "OwnedUpgradeabilityProxy.null" -> "OwnedUpgradeabilityProxy._setUpgradeabilityOwner" [ color = "green" ];
  "OwnedUpgradeabilityProxy.proxyOwner" -> "OwnedUpgradeabilityProxy._upgradeabilityOwner" [ color = "green" ];
  "OwnedUpgradeabilityProxy.implementation" -> "OwnedUpgradeabilityProxy._implementation" [ color = "green" ];
  "OwnedUpgradeabilityProxy.transferProxyOwnership" -> "OwnedUpgradeabilityProxy._upgradeabilityOwner" [ color = "green" ];
  "OwnedUpgradeabilityProxy.transferProxyOwnership" -> "OwnedUpgradeabilityProxy._setUpgradeabilityOwner" [ color = "green" ];
  "OwnedUpgradeabilityProxy.upgradeTo" -> "OwnedUpgradeabilityProxy._upgradeTo" [ color = "green" ];
  "OwnedUpgradeabilityProxy.upgradeToAndCall" -> "OwnedUpgradeabilityProxy._upgradeToAndCall" [ color = "green" ];
  "OwnedUpgradeabilityProxy._upgradeToAndCall" -> "OwnedUpgradeabilityProxy._upgradeTo" [ color = "green" ];
  "Proxy._fallback" -> "Proxy._delegate" [ color = "green" ];
  "Proxy._fallback" -> "Proxy._implementation" [ color = "green" ];
  "Proxy." -> "Proxy._fallback" [ color = "green" ];
  "UpgradeabilityProxy._upgradeTo" -> "Address.isContract" [ color = "orange" ];
  "ISTFactory.deployToken" -> "STFactory._deploy" [ color = "green" ];
  "ISTFactory.deployToken" -> "ISecurityToken.changeDataStore" [ color = "orange" ];
  "ISTFactory.deployToken" -> "DataStoreFactory.generateDataStore" [ color = "orange" ];
  "ISTFactory.deployToken" -> "ISecurityToken.changeTreasuryWallet" [ color = "orange" ];
  "ISTFactory.deployToken" -> "ISecurityToken.addModule" [ color = "orange" ];
  "ISTFactory.deployToken" -> "IOwnable.transferOwnership" [ color = "orange" ];
  "STFactory._deploy" -> "OwnedUpgradeabilityProxy.upgradeTo" [ color = "orange" ];
  "STFactory._deploy" -> "SecurityTokenProxy.call" [ color = "orange" ];
  "STFactory.upgradeToken" -> "OwnedUpgradeabilityProxy.upgradeToAndCall" [ color = "orange" ];
  "STFactory.upgradeToken" -> "IPolymathRegistry.getAddress" [ color = "orange" ];
  "STFactory.upgradeToken" -> "ISecurityToken.getModulesByType" [ color = "orange" ];
  "STFactory.upgradeToken" -> "ISecurityToken.getModule" [ color = "orange" ];
  "STFactory.upgradeToken" -> "IModuleRegistry.isCompatibleModule" [ color = "orange" ];
  "STGetter.getInvestorCount" -> "IDataStore.getAddressArrayLength" [ color = "orange" ];
  "STGetter.getInvestors" -> "IDataStore.getAddressArray" [ color = "orange" ];
  "STGetter.getInvestorsAt" -> "IDataStore.getAddressArray" [ color = "orange" ];
  "STGetter.getInvestorsAt" -> "STGetter.balanceOfAt" [ color = "green" ];
  "STGetter.getInvestorsSubsetAt" -> "IDataStore.getAddressArrayElements" [ color = "orange" ];
  "STGetter.getInvestorsSubsetAt" -> "STGetter.balanceOfAt" [ color = "green" ];
  "STGetter.getTreasuryWallet" -> "IDataStore.getAddress" [ color = "orange" ];
  "STGetter.balanceOfAt" -> "TokenLib.getValueAt" [ color = "orange" ];
  "STGetter.balanceOfAt" -> "STGetter.balanceOf" [ color = "green" ];
  "STGetter.iterateInvestors" -> "IDataStore.getAddressArrayElements" [ color = "orange" ];
  "STGetter.checkPermission" -> "IPermissionManager.checkPermission" [ color = "orange" ];
  "STGetter.partitionsOf" -> "ITransferManager.getPartitions" [ color = "orange" ];
  "STGetter.partitionsOf" -> "STGetter._appendPartition" [ color = "green" ];
  "STGetter.partitionsOf" -> "STGetter._appendPartition" [ color = "green" ];
  "SecurityToken.initialize" -> "SecurityToken.updateFromRegistry" [ color = "green" ];
  "SecurityToken._onlyModuleOrOwner" -> "SecurityToken.owner" [ color = "green" ];
  "SecurityToken._onlyModuleOrOwner" -> "SecurityToken.isModule" [ color = "green" ];
  "SecurityToken._isValidOperator" -> "SecurityToken._isAuthorised" [ color = "green" ];
  "SecurityToken._isValidOperator" -> "SecurityToken.allowance" [ color = "green" ];
  "SecurityToken._onlyController" -> "SecurityToken._isAuthorised" [ color = "green" ];
  "SecurityToken._onlyController" -> "SecurityToken.isControllable" [ color = "green" ];
  "SecurityToken._onlyOwner" -> "SecurityToken.isOwner" [ color = "green" ];
  "SecurityToken._onlyModule" -> "SecurityToken.isModule" [ color = "green" ];
  "SecurityToken.addModuleWithLabel" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.addModuleWithLabel" -> "IModuleRegistry.useModule" [ color = "orange" ];
  "SecurityToken.addModuleWithLabel" -> "IModuleFactory.types" [ color = "orange" ];
  "SecurityToken.addModuleWithLabel" -> "IModuleFactory.setupCostInPoly" [ color = "orange" ];
  "SecurityToken.addModuleWithLabel" -> "ERC20.approve" [ color = "orange" ];
  "SecurityToken.addModuleWithLabel" -> "IModuleFactory.deploy" [ color = "orange" ];
  "SecurityToken.addModuleWithLabel" -> "ERC20.approve" [ color = "orange" ];
  "SecurityToken.addModuleWithLabel" -> "SecurityToken._addModuleData" [ color = "green" ];
  "SecurityToken._addModuleData" -> "IModuleFactory.name" [ color = "orange" ];
  "SecurityToken.addModule" -> "SecurityToken.addModuleWithLabel" [ color = "green" ];
  "SecurityToken.archiveModule" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.archiveModule" -> "TokenLib.archiveModule" [ color = "orange" ];
  "SecurityToken.upgradeModule" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.upgradeModule" -> "TokenLib.upgradeModule" [ color = "orange" ];
  "SecurityToken.upgradeToken" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.upgradeToken" -> "IUpgradableTokenFactory.upgradeToken" [ color = "orange" ];
  "SecurityToken.unarchiveModule" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.unarchiveModule" -> "TokenLib.unarchiveModule" [ color = "orange" ];
  "SecurityToken.removeModule" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.removeModule" -> "TokenLib.removeModule" [ color = "orange" ];
  "SecurityToken.withdrawERC20" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.withdrawERC20" -> "IERC20.transfer" [ color = "orange" ];
  "SecurityToken.withdrawERC20" -> "SecurityToken.owner" [ color = "green" ];
  "SecurityToken.changeModuleBudget" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.changeModuleBudget" -> "TokenLib.changeModuleBudget" [ color = "orange" ];
  "SecurityToken.updateTokenDetails" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.changeGranularity" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.changeDataStore" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.changeDataStore" -> "SecurityToken._zeroAddressCheck" [ color = "green" ];
  "SecurityToken.changeName" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.changeTreasuryWallet" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.changeTreasuryWallet" -> "SecurityToken._zeroAddressCheck" [ color = "green" ];
  "SecurityToken.changeTreasuryWallet" -> "IDataStore.getAddress" [ color = "orange" ];
  "SecurityToken.changeTreasuryWallet" -> "IDataStore.setAddress" [ color = "orange" ];
  "SecurityToken._adjustInvestorCount" -> "TokenLib.adjustInvestorCount" [ color = "orange" ];
  "SecurityToken._adjustInvestorCount" -> "SecurityToken.balanceOf" [ color = "green" ];
  "SecurityToken._adjustInvestorCount" -> "SecurityToken.balanceOf" [ color = "green" ];
  "SecurityToken.freezeTransfers" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.unfreezeTransfers" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken._adjustBalanceCheckpoints" -> "TokenLib.adjustCheckpoints" [ color = "orange" ];
  "SecurityToken._adjustBalanceCheckpoints" -> "SecurityToken.balanceOf" [ color = "green" ];
  "SecurityToken.transfer" -> "SecurityToken.transferWithData" [ color = "green" ];
  "SecurityToken.transferWithData" -> "SecurityToken._transferWithData" [ color = "green" ];
  "SecurityToken._transferWithData" -> "SecurityToken._isValidTransfer" [ color = "green" ];
  "SecurityToken._transferWithData" -> "SecurityToken._updateTransfer" [ color = "green" ];
  "SecurityToken._transferWithData" -> "SecurityToken._transfer" [ color = "green" ];
  "SecurityToken.transferFrom" -> "SecurityToken.transferFromWithData" [ color = "green" ];
  "SecurityToken.transferFromWithData" -> "SecurityToken._isValidTransfer" [ color = "green" ];
  "SecurityToken.transferFromWithData" -> "SecurityToken._updateTransfer" [ color = "green" ];
  "SecurityToken.transferFromWithData" -> "Proxy.transferFrom" [ color = "orange" ];
  "SecurityToken.balanceOfByPartition" -> "SecurityToken._balanceOfByPartition" [ color = "green" ];
  "SecurityToken._balanceOfByPartition" -> "ITransferManager.getTokensByPartition" [ color = "orange" ];
  "SecurityToken.transferByPartition" -> "SecurityToken._transferByPartition" [ color = "green" ];
  "SecurityToken._transferByPartition" -> "SecurityToken._isValidPartition" [ color = "green" ];
  "SecurityToken._transferByPartition" -> "SecurityToken._balanceOfByPartition" [ color = "green" ];
  "SecurityToken._transferByPartition" -> "SecurityToken._transferWithData" [ color = "green" ];
  "SecurityToken._transferByPartition" -> "SecurityToken._balanceOfByPartition" [ color = "green" ];
  "SecurityToken._transferByPartition" -> "SecurityToken._returnPartition" [ color = "green" ];
  "SecurityToken._returnPartition" -> "_afterBalance.sub" [ color = "orange" ];
  "SecurityToken.authorizeOperator" -> "SecurityToken._approve" [ color = "green" ];
  "SecurityToken.revokeOperator" -> "SecurityToken._approve" [ color = "green" ];
  "SecurityToken.authorizeOperatorByPartition" -> "SecurityToken._isValidPartition" [ color = "green" ];
  "SecurityToken.revokeOperatorByPartition" -> "SecurityToken._isValidPartition" [ color = "green" ];
  "SecurityToken.operatorTransferByPartition" -> "SecurityToken._validateOperatorAndPartition" [ color = "green" ];
  "SecurityToken.operatorTransferByPartition" -> "SecurityToken._transferByPartition" [ color = "green" ];
  "SecurityToken._validateOperatorAndPartition" -> "SecurityToken._isValidPartition" [ color = "green" ];
  "SecurityToken._validateOperatorAndPartition" -> "SecurityToken._isValidOperator" [ color = "green" ];
  "SecurityToken._updateTransfer" -> "SecurityToken._adjustInvestorCount" [ color = "green" ];
  "SecurityToken._updateTransfer" -> "SecurityToken._executeTransfer" [ color = "green" ];
  "SecurityToken._updateTransfer" -> "SecurityToken._adjustBalanceCheckpoints" [ color = "green" ];
  "SecurityToken._updateTransfer" -> "SecurityToken._adjustBalanceCheckpoints" [ color = "green" ];
  "SecurityToken._executeTransfer" -> "ITransferManager.executeTransfer" [ color = "orange" ];
  "SecurityToken.freezeIssuance" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.freezeIssuance" -> "SecurityToken._isIssuanceAllowed" [ color = "green" ];
  "SecurityToken.freezeIssuance" -> "SecurityToken._isSignedByOwner" [ color = "green" ];
  "SecurityToken.freezeIssuance" -> "SecurityToken.owner" [ color = "green" ];
  "SecurityToken.freezeIssuance" -> "TokenLib.recoverFreezeIssuanceAckSigner" [ color = "orange" ];
  "SecurityToken.issue" -> "SecurityToken._isIssuanceAllowed" [ color = "green" ];
  "SecurityToken.issue" -> "SecurityToken._onlyModuleOrOwner" [ color = "green" ];
  "SecurityToken.issue" -> "SecurityToken._issue" [ color = "green" ];
  "SecurityToken._issue" -> "SecurityToken._isValidTransfer" [ color = "green" ];
  "SecurityToken._issue" -> "SecurityToken._updateTransfer" [ color = "green" ];
  "SecurityToken._issue" -> "SecurityToken._mint" [ color = "green" ];
  "SecurityToken.issueMulti" -> "SecurityToken._isIssuanceAllowed" [ color = "green" ];
  "SecurityToken.issueMulti" -> "SecurityToken._onlyModuleOrOwner" [ color = "green" ];
  "SecurityToken.issueMulti" -> "SecurityToken._issue" [ color = "green" ];
  "SecurityToken.issueByPartition" -> "SecurityToken._isValidPartition" [ color = "green" ];
  "SecurityToken.issueByPartition" -> "SecurityToken.issue" [ color = "green" ];
  "SecurityToken.redeem" -> "SecurityToken._onlyModule" [ color = "green" ];
  "SecurityToken.redeem" -> "SecurityToken._redeem" [ color = "green" ];
  "SecurityToken._redeem" -> "SecurityToken._isValidRedeem" [ color = "green" ];
  "SecurityToken._redeem" -> "SecurityToken._checkAndBurn" [ color = "green" ];
  "SecurityToken.redeemByPartition" -> "SecurityToken._onlyModule" [ color = "green" ];
  "SecurityToken.redeemByPartition" -> "SecurityToken._isValidPartition" [ color = "green" ];
  "SecurityToken.redeemByPartition" -> "SecurityToken._redeemByPartition" [ color = "green" ];
  "SecurityToken._redeemByPartition" -> "SecurityToken._redeem" [ color = "green" ];
  "SecurityToken.operatorRedeemByPartition" -> "SecurityToken._onlyModule" [ color = "green" ];
  "SecurityToken.operatorRedeemByPartition" -> "SecurityToken._zeroAddressCheck" [ color = "green" ];
  "SecurityToken.operatorRedeemByPartition" -> "SecurityToken._validateOperatorAndPartition" [ color = "green" ];
  "SecurityToken.operatorRedeemByPartition" -> "SecurityToken._redeemByPartition" [ color = "green" ];
  "SecurityToken._checkAndBurn" -> "SecurityToken._updateTransfer" [ color = "green" ];
  "SecurityToken._checkAndBurn" -> "SecurityToken._burn" [ color = "green" ];
  "SecurityToken.redeemFrom" -> "SecurityToken._onlyModule" [ color = "green" ];
  "SecurityToken.redeemFrom" -> "SecurityToken._isValidRedeem" [ color = "green" ];
  "SecurityToken.redeemFrom" -> "SecurityToken._updateTransfer" [ color = "green" ];
  "SecurityToken.redeemFrom" -> "SecurityToken._burnFrom" [ color = "green" ];
  "SecurityToken.createCheckpoint" -> "SecurityToken._onlyModuleOrOwner" [ color = "green" ];
  "SecurityToken.createCheckpoint" -> "SecurityToken.totalSupply" [ color = "green" ];
  "SecurityToken.createCheckpoint" -> "IDataStore.getAddressArrayLength" [ color = "orange" ];
  "SecurityToken.setController" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.setController" -> "SecurityToken.isControllable" [ color = "green" ];
  "SecurityToken.disableController" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.disableController" -> "SecurityToken._isSignedByOwner" [ color = "green" ];
  "SecurityToken.disableController" -> "SecurityToken.owner" [ color = "green" ];
  "SecurityToken.disableController" -> "TokenLib.recoverDisableControllerAckSigner" [ color = "orange" ];
  "SecurityToken.disableController" -> "SecurityToken.isControllable" [ color = "green" ];
  "SecurityToken.canTransfer" -> "SecurityToken._canTransfer" [ color = "green" ];
  "SecurityToken.canTransferFrom" -> "SecurityToken._canTransfer" [ color = "green" ];
  "SecurityToken.canTransferFrom" -> "SecurityToken.allowance" [ color = "green" ];
  "SecurityToken._canTransfer" -> "TokenLib.verifyTransfer" [ color = "orange" ];
  "SecurityToken._canTransfer" -> "TokenLib.canTransfer" [ color = "orange" ];
  "SecurityToken._canTransfer" -> "SecurityToken.balanceOf" [ color = "green" ];
  "SecurityToken.canTransferByPartition" -> "SecurityToken._canTransfer" [ color = "green" ];
  "SecurityToken.canTransferByPartition" -> "SecurityToken._balanceOfByPartition" [ color = "green" ];
  "SecurityToken.canTransferByPartition" -> "SecurityToken._balanceOfByPartition" [ color = "green" ];
  "SecurityToken.canTransferByPartition" -> "SecurityToken._returnPartition" [ color = "green" ];
  "SecurityToken.setDocument" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.setDocument" -> "TokenLib.setDocument" [ color = "orange" ];
  "SecurityToken.removeDocument" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.removeDocument" -> "TokenLib.removeDocument" [ color = "orange" ];
  "SecurityToken.controllerTransfer" -> "SecurityToken._onlyController" [ color = "green" ];
  "SecurityToken.controllerTransfer" -> "SecurityToken._updateTransfer" [ color = "green" ];
  "SecurityToken.controllerTransfer" -> "SecurityToken._transfer" [ color = "green" ];
  "SecurityToken.controllerRedeem" -> "SecurityToken._onlyController" [ color = "green" ];
  "SecurityToken.controllerRedeem" -> "SecurityToken._checkAndBurn" [ color = "green" ];
  "SecurityToken.updateFromRegistry" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.updateFromRegistry" -> "PolymathRegistry.getAddress" [ color = "orange" ];
  "SecurityToken.updateFromRegistry" -> "PolymathRegistry.getAddress" [ color = "orange" ];
  "SecurityToken.updateFromRegistry" -> "PolymathRegistry.getAddress" [ color = "orange" ];
  "SecurityToken.transferOwnership" -> "SecurityToken._onlyOwner" [ color = "green" ];
  "SecurityToken.transferOwnership" -> "SecurityToken._transferOwnership" [ color = "green" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color=green]
key:i2:e -> key2:i2:w [color=orange]
}
}

